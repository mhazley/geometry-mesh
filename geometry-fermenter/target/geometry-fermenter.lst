
/Users/mhazley/src/geometry-mesh/geometry-fermenter/target/geometry-fermenter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c48  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016d44  2**0
                  CONTENTS
  3 .data         000000b8  2003e3f8  000d6c60  0000e3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000340  2003e4b0  2003e4b0  0001e4b0  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6d18  000d6d18  00016d18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6d40  000d6d40  00016d40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a401c  00000000  00000000  00016d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000dce9  00000000  00000000  000bad60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00013f0c  00000000  00000000  000c8a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ed8  00000000  00000000  000dc955  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003358  00000000  00000000  000de82d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002d9b8  00000000  00000000  000e1b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f791  00000000  00000000  0010f53d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d8404  00000000  00000000  0012ecce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b8d0  00000000  00000000  002070d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	90 66 0d 00                                         .f..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 ff29 	bl	d5e84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 ff2e 	bl	d5e9a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e3f8 	.word	0x2003e3f8
   d4048:	000d6c60 	.word	0x000d6c60
   d404c:	2003e4b0 	.word	0x2003e4b0
   d4050:	2003e4b0 	.word	0x2003e4b0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fc47 	bl	d58ec <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6c58 	.word	0x000d6c58
   d4080:	000d6c20 	.word	0x000d6c20

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b82e 	b.w	d40e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f83d 	bl	d4108 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bbf9 	b.w	d5888 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba99 	b.w	d45cc <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 ba97 	b.w	d45cc <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 ba9d 	b.w	d45dc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 ba9b 	b.w	d45dc <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z14button_handleryiPv>:
//#define CLOUD

static bool publish = false;

void button_handler(system_event_t event, int duration, void* )
{
   d40b8:	b510      	push	{r4, lr}
    if (!duration) 
   d40ba:	4614      	mov	r4, r2
   d40bc:	b95a      	cbnz	r2, d40d6 <_Z14button_handleryiPv+0x1e>
    {
        // just pressed
        RGB.control(true);
   d40be:	2001      	movs	r0, #1
   d40c0:	f000 fe38 	bl	d4d34 <_ZN8RGBClass7controlEb>
        RGB.color(255, 0, 255);
   d40c4:	22ff      	movs	r2, #255	; 0xff
   d40c6:	4610      	mov	r0, r2
   d40c8:	4621      	mov	r1, r4
   d40ca:	f000 fe43 	bl	d4d54 <_ZN8RGBClass5colorEiii>
        publish = true;
   d40ce:	4b04      	ldr	r3, [pc, #16]	; (d40e0 <_Z14button_handleryiPv+0x28>)
   d40d0:	2201      	movs	r2, #1
   d40d2:	701a      	strb	r2, [r3, #0]
   d40d4:	bd10      	pop	{r4, pc}
    }
    else 
    { 
        // just released
        RGB.control(false);
   d40d6:	2000      	movs	r0, #0
    }
}
   d40d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        publish = true;
    }
    else 
    { 
        // just released
        RGB.control(false);
   d40dc:	f000 be2a 	b.w	d4d34 <_ZN8RGBClass7controlEb>
   d40e0:	2003e4b4 	.word	0x2003e4b4

000d40e4 <setup>:
    }
}

void setup()
{
   d40e4:	b510      	push	{r4, lr}
    Serial.begin(115200);
   d40e6:	f001 fb4d 	bl	d5784 <_Z16_fetch_usbserialv>
   d40ea:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d40ee:	f001 fb3d 	bl	d576c <_ZN9USBSerial5beginEl>
    static uint16_t buttonPushed(uint8_t button=0) {
        return system_button_pushed_duration(button, NULL);
    }

    static bool on(system_event_t events, void(*handler)(system_event_t, int,void*)) {
        return !system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), nullptr);
   d40f2:	2300      	movs	r3, #0
   d40f4:	4a03      	ldr	r2, [pc, #12]	; (d4104 <setup+0x20>)
   d40f6:	2080      	movs	r0, #128	; 0x80
   d40f8:	2100      	movs	r1, #0
    System.on(button_status, button_handler);
}
   d40fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40fe:	f000 b9d1 	b.w	d44a4 <system_subscribe_event>
   d4102:	bf00      	nop
   d4104:	000d40b9 	.word	0x000d40b9

000d4108 <loop>:
 
void loop() 
{
   d4108:	b530      	push	{r4, r5, lr}
    if( publish )
   d410a:	4c11      	ldr	r4, [pc, #68]	; (d4150 <loop+0x48>)
   d410c:	7823      	ldrb	r3, [r4, #0]
    Serial.begin(115200);
    System.on(button_status, button_handler);
}
 
void loop() 
{
   d410e:	b085      	sub	sp, #20
    if( publish )
   d4110:	b1db      	cbz	r3, d414a <loop+0x42>
    {
#ifdef CLOUD                
        Serial.print(Time.timeStr()); Serial.println(": Publishing Cloud Event");
        Particle.publish("group-event", PRIVATE);
#else
        Serial.print(Time.timeStr()); Serial.println(": Publishing Mesh Event");
   d4112:	f001 fb37 	bl	d5784 <_Z16_fetch_usbserialv>
   d4116:	4605      	mov	r5, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4118:	f000 ff11 	bl	d4f3e <_ZN9TimeClass3nowEv>
   d411c:	4601      	mov	r1, r0
   d411e:	4668      	mov	r0, sp
   d4120:	f000 feca 	bl	d4eb8 <_ZN9TimeClass7timeStrEl>
   d4124:	9900      	ldr	r1, [sp, #0]
   d4126:	4628      	mov	r0, r5
   d4128:	f000 fdb2 	bl	d4c90 <_ZN5Print5printEPKc>
   d412c:	4668      	mov	r0, sp
   d412e:	f000 fe4f 	bl	d4dd0 <_ZN6StringD1Ev>
   d4132:	f001 fb27 	bl	d5784 <_Z16_fetch_usbserialv>
   d4136:	4907      	ldr	r1, [pc, #28]	; (d4154 <loop+0x4c>)
   d4138:	f000 fdbd 	bl	d4cb6 <_ZN5Print7printlnEPKc>
        Mesh.publish("group-event");
   d413c:	2200      	movs	r2, #0
   d413e:	4906      	ldr	r1, [pc, #24]	; (d4158 <loop+0x50>)
   d4140:	4806      	ldr	r0, [pc, #24]	; (d415c <loop+0x54>)
   d4142:	f000 fc3d 	bl	d49c0 <_ZN5spark11MeshPublish7publishEPKcS2_>
#endif
        publish = false;
   d4146:	2300      	movs	r3, #0
   d4148:	7023      	strb	r3, [r4, #0]
    }
   d414a:	b005      	add	sp, #20
   d414c:	bd30      	pop	{r4, r5, pc}
   d414e:	bf00      	nop
   d4150:	2003e4b4 	.word	0x2003e4b4
   d4154:	000d66a4 	.word	0x000d66a4
   d4158:	000d66bc 	.word	0x000d66bc
   d415c:	2003e4cc 	.word	0x2003e4cc

000d4160 <_GLOBAL__sub_I__Z14button_handleryiPv>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4160:	f000 b858 	b.w	d4214 <HAL_Pin_Map>

000d4164 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4164:	b508      	push	{r3, lr}
   d4166:	4b02      	ldr	r3, [pc, #8]	; (d4170 <os_thread_is_current+0xc>)
   d4168:	681b      	ldr	r3, [r3, #0]
   d416a:	689b      	ldr	r3, [r3, #8]
   d416c:	9301      	str	r3, [sp, #4]
   d416e:	bd08      	pop	{r3, pc}
   d4170:	00030248 	.word	0x00030248

000d4174 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4174:	b508      	push	{r3, lr}
   d4176:	4b02      	ldr	r3, [pc, #8]	; (d4180 <os_thread_join+0xc>)
   d4178:	681b      	ldr	r3, [r3, #0]
   d417a:	691b      	ldr	r3, [r3, #16]
   d417c:	9301      	str	r3, [sp, #4]
   d417e:	bd08      	pop	{r3, pc}
   d4180:	00030248 	.word	0x00030248

000d4184 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4184:	b508      	push	{r3, lr}
   d4186:	4b02      	ldr	r3, [pc, #8]	; (d4190 <os_thread_cleanup+0xc>)
   d4188:	681b      	ldr	r3, [r3, #0]
   d418a:	695b      	ldr	r3, [r3, #20]
   d418c:	9301      	str	r3, [sp, #4]
   d418e:	bd08      	pop	{r3, pc}
   d4190:	00030248 	.word	0x00030248

000d4194 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4194:	b508      	push	{r3, lr}
   d4196:	4b02      	ldr	r3, [pc, #8]	; (d41a0 <os_mutex_create+0xc>)
   d4198:	681b      	ldr	r3, [r3, #0]
   d419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d419c:	9301      	str	r3, [sp, #4]
   d419e:	bd08      	pop	{r3, pc}
   d41a0:	00030248 	.word	0x00030248

000d41a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d41a4:	b508      	push	{r3, lr}
   d41a6:	4b02      	ldr	r3, [pc, #8]	; (d41b0 <os_mutex_recursive_create+0xc>)
   d41a8:	681b      	ldr	r3, [r3, #0]
   d41aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d41ac:	9301      	str	r3, [sp, #4]
   d41ae:	bd08      	pop	{r3, pc}
   d41b0:	00030248 	.word	0x00030248

000d41b4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d41b4:	b508      	push	{r3, lr}
   d41b6:	4b02      	ldr	r3, [pc, #8]	; (d41c0 <os_mutex_recursive_lock+0xc>)
   d41b8:	681b      	ldr	r3, [r3, #0]
   d41ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d41bc:	9301      	str	r3, [sp, #4]
   d41be:	bd08      	pop	{r3, pc}
   d41c0:	00030248 	.word	0x00030248

000d41c4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d41c4:	b508      	push	{r3, lr}
   d41c6:	4b02      	ldr	r3, [pc, #8]	; (d41d0 <os_mutex_recursive_unlock+0xc>)
   d41c8:	681b      	ldr	r3, [r3, #0]
   d41ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d41cc:	9301      	str	r3, [sp, #4]
   d41ce:	bd08      	pop	{r3, pc}
   d41d0:	00030248 	.word	0x00030248

000d41d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41d4:	b508      	push	{r3, lr}
   d41d6:	4b02      	ldr	r3, [pc, #8]	; (d41e0 <HAL_RNG_GetRandomNumber+0xc>)
   d41d8:	681b      	ldr	r3, [r3, #0]
   d41da:	685b      	ldr	r3, [r3, #4]
   d41dc:	9301      	str	r3, [sp, #4]
   d41de:	bd08      	pop	{r3, pc}
   d41e0:	00030218 	.word	0x00030218

000d41e4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41e4:	b508      	push	{r3, lr}
   d41e6:	4b02      	ldr	r3, [pc, #8]	; (d41f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41e8:	681b      	ldr	r3, [r3, #0]
   d41ea:	695b      	ldr	r3, [r3, #20]
   d41ec:	9301      	str	r3, [sp, #4]
   d41ee:	bd08      	pop	{r3, pc}
   d41f0:	00030218 	.word	0x00030218

000d41f4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d41f4:	b508      	push	{r3, lr}
   d41f6:	4b02      	ldr	r3, [pc, #8]	; (d4200 <HAL_RTC_Get_UnixTime+0xc>)
   d41f8:	681b      	ldr	r3, [r3, #0]
   d41fa:	69db      	ldr	r3, [r3, #28]
   d41fc:	9301      	str	r3, [sp, #4]
   d41fe:	bd08      	pop	{r3, pc}
   d4200:	00030218 	.word	0x00030218

000d4204 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4204:	b508      	push	{r3, lr}
   d4206:	4b02      	ldr	r3, [pc, #8]	; (d4210 <HAL_RTC_Time_Is_Valid+0xc>)
   d4208:	681b      	ldr	r3, [r3, #0]
   d420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d420c:	9301      	str	r3, [sp, #4]
   d420e:	bd08      	pop	{r3, pc}
   d4210:	00030218 	.word	0x00030218

000d4214 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4214:	b508      	push	{r3, lr}
   d4216:	4b02      	ldr	r3, [pc, #8]	; (d4220 <HAL_Pin_Map+0xc>)
   d4218:	681b      	ldr	r3, [r3, #0]
   d421a:	681b      	ldr	r3, [r3, #0]
   d421c:	9301      	str	r3, [sp, #4]
   d421e:	bd08      	pop	{r3, pc}
   d4220:	0003022c 	.word	0x0003022c

000d4224 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4224:	b508      	push	{r3, lr}
   d4226:	4b02      	ldr	r3, [pc, #8]	; (d4230 <if_name_to_index+0xc>)
   d4228:	681b      	ldr	r3, [r3, #0]
   d422a:	691b      	ldr	r3, [r3, #16]
   d422c:	9301      	str	r3, [sp, #4]
   d422e:	bd08      	pop	{r3, pc}
   d4230:	0003026c 	.word	0x0003026c

000d4234 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4234:	b508      	push	{r3, lr}
   d4236:	4b02      	ldr	r3, [pc, #8]	; (d4240 <if_index_to_name+0xc>)
   d4238:	681b      	ldr	r3, [r3, #0]
   d423a:	695b      	ldr	r3, [r3, #20]
   d423c:	9301      	str	r3, [sp, #4]
   d423e:	bd08      	pop	{r3, pc}
   d4240:	0003026c 	.word	0x0003026c

000d4244 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4244:	b508      	push	{r3, lr}
   d4246:	4b02      	ldr	r3, [pc, #8]	; (d4250 <if_get_by_index+0xc>)
   d4248:	681b      	ldr	r3, [r3, #0]
   d424a:	699b      	ldr	r3, [r3, #24]
   d424c:	9301      	str	r3, [sp, #4]
   d424e:	bd08      	pop	{r3, pc}
   d4250:	0003026c 	.word	0x0003026c

000d4254 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4254:	b508      	push	{r3, lr}
   d4256:	4b02      	ldr	r3, [pc, #8]	; (d4260 <if_get_addrs+0xc>)
   d4258:	681b      	ldr	r3, [r3, #0]
   d425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d425c:	9301      	str	r3, [sp, #4]
   d425e:	bd08      	pop	{r3, pc}
   d4260:	0003026c 	.word	0x0003026c

000d4264 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4264:	b508      	push	{r3, lr}
   d4266:	4b02      	ldr	r3, [pc, #8]	; (d4270 <if_free_if_addrs+0xc>)
   d4268:	681b      	ldr	r3, [r3, #0]
   d426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d426c:	9301      	str	r3, [sp, #4]
   d426e:	bd08      	pop	{r3, pc}
   d4270:	0003026c 	.word	0x0003026c

000d4274 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4274:	b508      	push	{r3, lr}
   d4276:	4b02      	ldr	r3, [pc, #8]	; (d4280 <inet_inet_ntop+0xc>)
   d4278:	681b      	ldr	r3, [r3, #0]
   d427a:	695b      	ldr	r3, [r3, #20]
   d427c:	9301      	str	r3, [sp, #4]
   d427e:	bd08      	pop	{r3, pc}
   d4280:	00030264 	.word	0x00030264

000d4284 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <inet_inet_pton+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	699b      	ldr	r3, [r3, #24]
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	00030264 	.word	0x00030264

000d4294 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <inet_htonl+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	6a1b      	ldr	r3, [r3, #32]
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	00030264 	.word	0x00030264

000d42a4 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <inet_ntohs+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	00030264 	.word	0x00030264

000d42b4 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <inet_htons+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	00030264 	.word	0x00030264

000d42c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <netdb_freeaddrinfo+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	689b      	ldr	r3, [r3, #8]
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	00030268 	.word	0x00030268

000d42d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <netdb_getaddrinfo+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	68db      	ldr	r3, [r3, #12]
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	00030268 	.word	0x00030268

000d42e4 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <sock_bind+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	685b      	ldr	r3, [r3, #4]
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	00030238 	.word	0x00030238

000d42f4 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <sock_setsockopt+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	699b      	ldr	r3, [r3, #24]
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	00030238 	.word	0x00030238

000d4304 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <sock_close+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	69db      	ldr	r3, [r3, #28]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030238 	.word	0x00030238

000d4314 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <sock_recvfrom+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	00030238 	.word	0x00030238

000d4324 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <sock_sendto+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	00030238 	.word	0x00030238

000d4334 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <sock_socket+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030238 	.word	0x00030238

000d4344 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <HAL_SPI_Init+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	69db      	ldr	r3, [r3, #28]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030230 	.word	0x00030230

000d4354 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <HAL_USART_Init+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	681b      	ldr	r3, [r3, #0]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	0003023c 	.word	0x0003023c

000d4364 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <HAL_USART_Write_Data+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	68db      	ldr	r3, [r3, #12]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	0003023c 	.word	0x0003023c

000d4374 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <HAL_USART_Available_Data+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	691b      	ldr	r3, [r3, #16]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	0003023c 	.word	0x0003023c

000d4384 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_USART_Read_Data+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	695b      	ldr	r3, [r3, #20]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	0003023c 	.word	0x0003023c

000d4394 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_USART_Peek_Data+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	699b      	ldr	r3, [r3, #24]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	0003023c 	.word	0x0003023c

000d43a4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_USART_Flush_Data+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	69db      	ldr	r3, [r3, #28]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	0003023c 	.word	0x0003023c

000d43b4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_USART_Available_Data_For_Write+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	0003023c 	.word	0x0003023c

000d43c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_USB_USART_Init+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	681b      	ldr	r3, [r3, #0]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	0003024c 	.word	0x0003024c

000d43d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_USB_USART_Begin+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	685b      	ldr	r3, [r3, #4]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	0003024c 	.word	0x0003024c

000d43e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_USB_USART_Available_Data+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	691b      	ldr	r3, [r3, #16]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	0003024c 	.word	0x0003024c

000d43f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	695b      	ldr	r3, [r3, #20]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	0003024c 	.word	0x0003024c

000d4404 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_USB_USART_Receive_Data+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	699b      	ldr	r3, [r3, #24]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	0003024c 	.word	0x0003024c

000d4414 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_USB_USART_Send_Data+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	69db      	ldr	r3, [r3, #28]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003024c 	.word	0x0003024c

000d4424 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_USB_USART_Flush_Data+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	6a1b      	ldr	r3, [r3, #32]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003024c 	.word	0x0003024c

000d4434 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <LED_SetSignalingColor+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	685b      	ldr	r3, [r3, #4]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030260 	.word	0x00030260

000d4444 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <LED_Signaling_Start+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	689b      	ldr	r3, [r3, #8]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030260 	.word	0x00030260

000d4454 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <LED_Signaling_Stop+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	68db      	ldr	r3, [r3, #12]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030260 	.word	0x00030260

000d4464 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <LED_RGB_IsOverRidden+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	699b      	ldr	r3, [r3, #24]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030260 	.word	0x00030260

000d4474 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <LED_On+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	69db      	ldr	r3, [r3, #28]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030260 	.word	0x00030260

000d4484 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <system_mode+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	681b      	ldr	r3, [r3, #0]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030220 	.word	0x00030220

000d4494 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <set_system_mode+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	685b      	ldr	r3, [r3, #4]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030220 	.word	0x00030220

000d44a4 <system_subscribe_event>:
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <system_subscribe_event+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	6a1b      	ldr	r3, [r3, #32]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030220 	.word	0x00030220

000d44b4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <system_thread_get_state+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030220 	.word	0x00030220

000d44c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b03      	ldr	r3, [pc, #12]	; (d44d4 <system_ctrl_set_app_request_handler+0x10>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44ce:	9301      	str	r3, [sp, #4]
   d44d0:	bd08      	pop	{r3, pc}
   d44d2:	0000      	.short	0x0000
   d44d4:	00030220 	.word	0x00030220

000d44d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b03      	ldr	r3, [pc, #12]	; (d44e8 <system_ctrl_set_result+0x10>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44e2:	9301      	str	r3, [sp, #4]
   d44e4:	bd08      	pop	{r3, pc}
   d44e6:	0000      	.short	0x0000
   d44e8:	00030220 	.word	0x00030220

000d44ec <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <spark_process+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	689b      	ldr	r3, [r3, #8]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030244 	.word	0x00030244

000d44fc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <spark_cloud_flag_connected+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	695b      	ldr	r3, [r3, #20]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030244 	.word	0x00030244

000d450c <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <spark_sync_time_pending+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	00030244 	.word	0x00030244

000d451c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030244 	.word	0x00030244

000d452c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <network_connect+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	685b      	ldr	r3, [r3, #4]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030240 	.word	0x00030240

000d453c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <network_connecting+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	689b      	ldr	r3, [r3, #8]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030240 	.word	0x00030240

000d454c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <network_disconnect+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	68db      	ldr	r3, [r3, #12]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030240 	.word	0x00030240

000d455c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <network_ready+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	691b      	ldr	r3, [r3, #16]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030240 	.word	0x00030240

000d456c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <network_on+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	695b      	ldr	r3, [r3, #20]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030240 	.word	0x00030240

000d457c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <network_off+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	699b      	ldr	r3, [r3, #24]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030240 	.word	0x00030240

000d458c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <network_listen+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	69db      	ldr	r3, [r3, #28]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030240 	.word	0x00030240

000d459c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <network_listening+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	6a1b      	ldr	r3, [r3, #32]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030240 	.word	0x00030240

000d45ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <network_set_listen_timeout+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030240 	.word	0x00030240

000d45bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <network_get_listen_timeout+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030240 	.word	0x00030240

000d45cc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <malloc+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	681b      	ldr	r3, [r3, #0]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	0003021c 	.word	0x0003021c

000d45dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <free+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	685b      	ldr	r3, [r3, #4]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	0003021c 	.word	0x0003021c

000d45ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <realloc+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	689b      	ldr	r3, [r3, #8]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	0003021c 	.word	0x0003021c

000d45fc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <siprintf+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	691b      	ldr	r3, [r3, #16]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	0003021c 	.word	0x0003021c

000d460c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <siscanf+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	699b      	ldr	r3, [r3, #24]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	0003021c 	.word	0x0003021c

000d461c <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <_malloc_r+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	0003021c 	.word	0x0003021c

000d462c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d462c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d462e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4630:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4632:	b113      	cbz	r3, d463a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4634:	2203      	movs	r2, #3
   d4636:	4601      	mov	r1, r0
   d4638:	4798      	blx	r3
    }
   d463a:	4620      	mov	r0, r4
   d463c:	bd10      	pop	{r4, pc}

000d463e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d463e:	2200      	movs	r2, #0
   d4640:	4611      	mov	r1, r2
   d4642:	6840      	ldr	r0, [r0, #4]
   d4644:	f7ff bfaa 	b.w	d459c <network_listening>

000d4648 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4648:	2200      	movs	r2, #0
   d464a:	4611      	mov	r1, r2
   d464c:	6840      	ldr	r0, [r0, #4]
   d464e:	f7ff bfb5 	b.w	d45bc <network_get_listen_timeout>

000d4652 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4652:	2200      	movs	r2, #0
   d4654:	6840      	ldr	r0, [r0, #4]
   d4656:	f7ff bfa9 	b.w	d45ac <network_set_listen_timeout>

000d465a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d465a:	2200      	movs	r2, #0
   d465c:	f081 0101 	eor.w	r1, r1, #1
   d4660:	6840      	ldr	r0, [r0, #4]
   d4662:	f7ff bf93 	b.w	d458c <network_listen>

000d4666 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4666:	2300      	movs	r3, #0
   d4668:	461a      	mov	r2, r3
   d466a:	4619      	mov	r1, r3
   d466c:	6840      	ldr	r0, [r0, #4]
   d466e:	f7ff bf85 	b.w	d457c <network_off>

000d4672 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4672:	2300      	movs	r3, #0
   d4674:	461a      	mov	r2, r3
   d4676:	4619      	mov	r1, r3
   d4678:	6840      	ldr	r0, [r0, #4]
   d467a:	f7ff bf77 	b.w	d456c <network_on>

000d467e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d467e:	2200      	movs	r2, #0
   d4680:	4611      	mov	r1, r2
   d4682:	6840      	ldr	r0, [r0, #4]
   d4684:	f7ff bf6a 	b.w	d455c <network_ready>

000d4688 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4688:	2200      	movs	r2, #0
   d468a:	4611      	mov	r1, r2
   d468c:	6840      	ldr	r0, [r0, #4]
   d468e:	f7ff bf55 	b.w	d453c <network_connecting>

000d4692 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4692:	2200      	movs	r2, #0
   d4694:	2102      	movs	r1, #2
   d4696:	6840      	ldr	r0, [r0, #4]
   d4698:	f7ff bf58 	b.w	d454c <network_disconnect>

000d469c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d469c:	2300      	movs	r3, #0
   d469e:	461a      	mov	r2, r3
   d46a0:	6840      	ldr	r0, [r0, #4]
   d46a2:	f7ff bf43 	b.w	d452c <network_connect>
	...

000d46a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46a8:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46aa:	2203      	movs	r2, #3
   d46ac:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46ae:	4a02      	ldr	r2, [pc, #8]	; (d46b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d46b0:	601a      	str	r2, [r3, #0]
   d46b2:	4770      	bx	lr
   d46b4:	2003e4b8 	.word	0x2003e4b8
   d46b8:	000d66d0 	.word	0x000d66d0

000d46bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d46bc:	4770      	bx	lr

000d46be <_ZN9IPAddressD0Ev>:
   d46be:	b510      	push	{r4, lr}
   d46c0:	4604      	mov	r4, r0
   d46c2:	f7ff fcec 	bl	d409e <_ZdlPv>
   d46c6:	4620      	mov	r0, r4
   d46c8:	bd10      	pop	{r4, pc}

000d46ca <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d46ca:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d46cc:	7d03      	ldrb	r3, [r0, #20]
   d46ce:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d46d0:	b08d      	sub	sp, #52	; 0x34
   d46d2:	460e      	mov	r6, r1
   d46d4:	f100 0704 	add.w	r7, r0, #4
   d46d8:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d46dc:	d002      	beq.n	d46e4 <_ZNK9IPAddress7printToER5Print+0x1a>
   d46de:	f100 0508 	add.w	r5, r0, #8
   d46e2:	e018      	b.n	d4716 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d46e4:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46e6:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d46e8:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46ec:	232f      	movs	r3, #47	; 0x2f
   d46ee:	462a      	mov	r2, r5
   d46f0:	200a      	movs	r0, #10
   d46f2:	f7ff fdbf 	bl	d4274 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d46f6:	4628      	mov	r0, r5
   d46f8:	f001 fc12 	bl	d5f20 <strlen>
   d46fc:	6833      	ldr	r3, [r6, #0]
   d46fe:	4602      	mov	r2, r0
   d4700:	68db      	ldr	r3, [r3, #12]
   d4702:	4629      	mov	r1, r5
   d4704:	4630      	mov	r0, r6
   d4706:	4798      	blx	r3
   d4708:	e00f      	b.n	d472a <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d470a:	b124      	cbz	r4, d4716 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d470c:	212e      	movs	r1, #46	; 0x2e
   d470e:	4630      	mov	r0, r6
   d4710:	f000 fac2 	bl	d4c98 <_ZN5Print5printEc>
   d4714:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4716:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d471a:	220a      	movs	r2, #10
   d471c:	4630      	mov	r0, r6
   d471e:	f000 fb01 	bl	d4d24 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4722:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4724:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4726:	d1f0      	bne.n	d470a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4728:	4620      	mov	r0, r4
    }
    return n;
}
   d472a:	b00d      	add	sp, #52	; 0x34
   d472c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4730 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4730:	b510      	push	{r4, lr}
   d4732:	4b05      	ldr	r3, [pc, #20]	; (d4748 <_ZN9IPAddressC1Ev+0x18>)
   d4734:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4736:	2211      	movs	r2, #17
   d4738:	f840 3b04 	str.w	r3, [r0], #4
   d473c:	2100      	movs	r1, #0
   d473e:	f001 fbac 	bl	d5e9a <memset>
{
    clear();
}
   d4742:	4620      	mov	r0, r4
   d4744:	bd10      	pop	{r4, pc}
   d4746:	bf00      	nop
   d4748:	000d6704 	.word	0x000d6704

000d474c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d474c:	4603      	mov	r3, r0
   d474e:	4a07      	ldr	r2, [pc, #28]	; (d476c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4750:	b510      	push	{r4, lr}
   d4752:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4756:	f101 0210 	add.w	r2, r1, #16
   d475a:	f851 4b04 	ldr.w	r4, [r1], #4
   d475e:	f843 4b04 	str.w	r4, [r3], #4
   d4762:	4291      	cmp	r1, r2
   d4764:	d1f9      	bne.n	d475a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4766:	780a      	ldrb	r2, [r1, #0]
   d4768:	701a      	strb	r2, [r3, #0]
}
   d476a:	bd10      	pop	{r4, pc}
   d476c:	000d6704 	.word	0x000d6704

000d4770 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d4770:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d4772:	2b04      	cmp	r3, #4
   d4774:	d101      	bne.n	d477a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d4776:	6840      	ldr	r0, [r0, #4]
   d4778:	e008      	b.n	d478c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d477a:	2b06      	cmp	r3, #6
   d477c:	d10a      	bne.n	d4794 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d477e:	6843      	ldr	r3, [r0, #4]
   d4780:	b153      	cbz	r3, d4798 <_ZNK9IPAddresscvbEv+0x28>
   d4782:	6883      	ldr	r3, [r0, #8]
   d4784:	b143      	cbz	r3, d4798 <_ZNK9IPAddresscvbEv+0x28>
   d4786:	68c3      	ldr	r3, [r0, #12]
   d4788:	b133      	cbz	r3, d4798 <_ZNK9IPAddresscvbEv+0x28>
   d478a:	6900      	ldr	r0, [r0, #16]
   d478c:	3000      	adds	r0, #0
   d478e:	bf18      	it	ne
   d4790:	2001      	movne	r0, #1
   d4792:	4770      	bx	lr
   d4794:	2000      	movs	r0, #0
   d4796:	4770      	bx	lr
   d4798:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d479a:	4770      	bx	lr

000d479c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d479c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d479e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d47a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d47a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d47aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d47ae:	2304      	movs	r3, #4
   d47b0:	6041      	str	r1, [r0, #4]
   d47b2:	7503      	strb	r3, [r0, #20]
   d47b4:	bd10      	pop	{r4, pc}

000d47b6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d47b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d47b8:	780d      	ldrb	r5, [r1, #0]
   d47ba:	788b      	ldrb	r3, [r1, #2]
   d47bc:	784a      	ldrb	r2, [r1, #1]
   d47be:	78c9      	ldrb	r1, [r1, #3]
   d47c0:	9100      	str	r1, [sp, #0]
   d47c2:	4629      	mov	r1, r5
   d47c4:	f7ff ffea 	bl	d479c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d47c8:	b003      	add	sp, #12
   d47ca:	bd30      	pop	{r4, r5, pc}

000d47cc <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d47cc:	6800      	ldr	r0, [r0, #0]
   d47ce:	f7ff bcf1 	b.w	d41b4 <os_mutex_recursive_lock>
	...

000d47d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d47d4:	4b01      	ldr	r3, [pc, #4]	; (d47dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d47d6:	4a02      	ldr	r2, [pc, #8]	; (d47e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d47d8:	601a      	str	r2, [r3, #0]
   d47da:	4770      	bx	lr
   d47dc:	2003e4c0 	.word	0x2003e4c0
   d47e0:	000d67c5 	.word	0x000d67c5

000d47e4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d47e4:	2200      	movs	r2, #0
   d47e6:	4611      	mov	r1, r2
   d47e8:	6840      	ldr	r0, [r0, #4]
   d47ea:	f7ff bed7 	b.w	d459c <network_listening>

000d47ee <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d47ee:	2200      	movs	r2, #0
   d47f0:	4611      	mov	r1, r2
   d47f2:	6840      	ldr	r0, [r0, #4]
   d47f4:	f7ff bee2 	b.w	d45bc <network_get_listen_timeout>

000d47f8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d47f8:	2200      	movs	r2, #0
   d47fa:	6840      	ldr	r0, [r0, #4]
   d47fc:	f7ff bed6 	b.w	d45ac <network_set_listen_timeout>

000d4800 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4800:	2200      	movs	r2, #0
   d4802:	f081 0101 	eor.w	r1, r1, #1
   d4806:	6840      	ldr	r0, [r0, #4]
   d4808:	f7ff bec0 	b.w	d458c <network_listen>

000d480c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d480c:	2300      	movs	r3, #0
   d480e:	461a      	mov	r2, r3
   d4810:	4619      	mov	r1, r3
   d4812:	6840      	ldr	r0, [r0, #4]
   d4814:	f7ff beb2 	b.w	d457c <network_off>

000d4818 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4818:	2300      	movs	r3, #0
   d481a:	461a      	mov	r2, r3
   d481c:	4619      	mov	r1, r3
   d481e:	6840      	ldr	r0, [r0, #4]
   d4820:	f7ff bea4 	b.w	d456c <network_on>

000d4824 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4824:	2200      	movs	r2, #0
   d4826:	4611      	mov	r1, r2
   d4828:	6840      	ldr	r0, [r0, #4]
   d482a:	f7ff be97 	b.w	d455c <network_ready>

000d482e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d482e:	2200      	movs	r2, #0
   d4830:	4611      	mov	r1, r2
   d4832:	6840      	ldr	r0, [r0, #4]
   d4834:	f7ff be82 	b.w	d453c <network_connecting>

000d4838 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4838:	2200      	movs	r2, #0
   d483a:	2102      	movs	r1, #2
   d483c:	6840      	ldr	r0, [r0, #4]
   d483e:	f7ff be85 	b.w	d454c <network_disconnect>

000d4842 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4842:	2300      	movs	r3, #0
   d4844:	461a      	mov	r2, r3
   d4846:	6840      	ldr	r0, [r0, #4]
   d4848:	f7ff be70 	b.w	d452c <network_connect>

000d484c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d484c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d484e:	4605      	mov	r5, r0
   d4850:	b178      	cbz	r0, d4872 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4852:	6804      	ldr	r4, [r0, #0]
   d4854:	b144      	cbz	r4, d4868 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4856:	68a3      	ldr	r3, [r4, #8]
   d4858:	b11b      	cbz	r3, d4862 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d485a:	2203      	movs	r2, #3
   d485c:	4621      	mov	r1, r4
   d485e:	4620      	mov	r0, r4
   d4860:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4862:	4620      	mov	r0, r4
   d4864:	f7ff fc1b 	bl	d409e <_ZdlPv>
   d4868:	4628      	mov	r0, r5
      }
   d486a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d486e:	f7ff bc16 	b.w	d409e <_ZdlPv>
   d4872:	bd38      	pop	{r3, r4, r5, pc}

000d4874 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d4874:	b110      	cbz	r0, d487c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4876:	6803      	ldr	r3, [r0, #0]
   d4878:	685b      	ldr	r3, [r3, #4]
   d487a:	4718      	bx	r3
   d487c:	4770      	bx	lr

000d487e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d487e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4880:	6803      	ldr	r3, [r0, #0]
   d4882:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4884:	b1bb      	cbz	r3, d48b6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4886:	6858      	ldr	r0, [r3, #4]
   d4888:	f7ff fc6c 	bl	d4164 <os_thread_is_current>
   d488c:	b978      	cbnz	r0, d48ae <_ZN6ThreadD1Ev+0x30>
   d488e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4890:	7c5a      	ldrb	r2, [r3, #17]
   d4892:	b912      	cbnz	r2, d489a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4894:	6858      	ldr	r0, [r3, #4]
   d4896:	f7ff fc6d 	bl	d4174 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d489a:	6823      	ldr	r3, [r4, #0]
   d489c:	6858      	ldr	r0, [r3, #4]
   d489e:	f7ff fc71 	bl	d4184 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d48a2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d48a4:	2300      	movs	r3, #0
   d48a6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d48a8:	b128      	cbz	r0, d48b6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d48aa:	f7ff ffcf 	bl	d484c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d48ae:	6820      	ldr	r0, [r4, #0]
   d48b0:	b108      	cbz	r0, d48b6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d48b2:	f7ff ffcb 	bl	d484c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d48b6:	4620      	mov	r0, r4
   d48b8:	bd10      	pop	{r4, pc}
	...

000d48bc <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d48bc:	b538      	push	{r3, r4, r5, lr}
   d48be:	4b0b      	ldr	r3, [pc, #44]	; (d48ec <_ZN5spark9MeshClassD1Ev+0x30>)
   d48c0:	6003      	str	r3, [r0, #0]
   d48c2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d48c4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d48c8:	b108      	cbz	r0, d48ce <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d48ca:	f7ff fbea 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d48ce:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d48d2:	b12d      	cbz	r5, d48e0 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d48d4:	4628      	mov	r0, r5
   d48d6:	f7ff ffd2 	bl	d487e <_ZN6ThreadD1Ev>
   d48da:	4628      	mov	r0, r5
   d48dc:	f7ff fbdf 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d48e0:	68a0      	ldr	r0, [r4, #8]
   d48e2:	b108      	cbz	r0, d48e8 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d48e4:	f7ff ffc6 	bl	d4874 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d48e8:	4620      	mov	r0, r4
   d48ea:	bd38      	pop	{r3, r4, r5, pc}
   d48ec:	000d67f8 	.word	0x000d67f8

000d48f0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d48f0:	b530      	push	{r4, r5, lr}
   d48f2:	b08d      	sub	sp, #52	; 0x34
   d48f4:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d48f6:	2211      	movs	r2, #17
   d48f8:	2100      	movs	r1, #0
   d48fa:	a801      	add	r0, sp, #4
   d48fc:	f001 facd 	bl	d5e9a <memset>
    addr.v = 6;
   d4900:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d4902:	aa01      	add	r2, sp, #4
   d4904:	4909      	ldr	r1, [pc, #36]	; (d492c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d4906:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d490a:	200a      	movs	r0, #10
   d490c:	f7ff fcba 	bl	d4284 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4910:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d4912:	a901      	add	r1, sp, #4
   d4914:	a806      	add	r0, sp, #24
   d4916:	f7ff ff19 	bl	d474c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d491a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d491c:	3404      	adds	r4, #4
   d491e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4920:	682b      	ldr	r3, [r5, #0]
   d4922:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d4924:	2000      	movs	r0, #0
   d4926:	b00d      	add	sp, #52	; 0x34
   d4928:	bd30      	pop	{r4, r5, pc}
   d492a:	bf00      	nop
   d492c:	000d6824 	.word	0x000d6824

000d4930 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d4930:	b530      	push	{r4, r5, lr}
   d4932:	4604      	mov	r4, r0
   d4934:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d4936:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d493a:	f7ff ff47 	bl	d47cc <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d493e:	6823      	ldr	r3, [r4, #0]
   d4940:	bb83      	cbnz	r3, d49a4 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d4942:	204c      	movs	r0, #76	; 0x4c
   d4944:	f7ff fba7 	bl	d4096 <_Znwj>
   d4948:	4605      	mov	r5, r0
   d494a:	b108      	cbz	r0, d4950 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d494c:	f000 fdaa 	bl	d54a4 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4950:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4952:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4954:	b108      	cbz	r0, d495a <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d4956:	f7ff ff8d 	bl	d4874 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d495a:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d495c:	b320      	cbz	r0, d49a8 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d495e:	2200      	movs	r2, #0
   d4960:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d4964:	f000 fdcd 	bl	d5502 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d4968:	a908      	add	r1, sp, #32
   d496a:	2500      	movs	r5, #0
   d496c:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d4970:	4811      	ldr	r0, [pc, #68]	; (d49b8 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d4972:	f7ff fc57 	bl	d4224 <if_name_to_index>
   d4976:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d4978:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d497c:	6803      	ldr	r3, [r0, #0]
   d497e:	f249 0169 	movw	r1, #36969	; 0x9069
   d4982:	6a1b      	ldr	r3, [r3, #32]
   d4984:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d4986:	a802      	add	r0, sp, #8
   d4988:	f7ff fed2 	bl	d4730 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d498c:	a802      	add	r0, sp, #8
   d498e:	f7ff ffaf 	bl	d48f0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d4992:	2800      	cmp	r0, #0
   d4994:	db04      	blt.n	d49a0 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d4996:	a902      	add	r1, sp, #8
   d4998:	6820      	ldr	r0, [r4, #0]
   d499a:	f000 fe1c 	bl	d55d6 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d499e:	e004      	b.n	d49aa <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d49a0:	4605      	mov	r5, r0
   d49a2:	e002      	b.n	d49aa <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d49a4:	2500      	movs	r5, #0
   d49a6:	e000      	b.n	d49aa <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d49a8:	4d04      	ldr	r5, [pc, #16]	; (d49bc <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d49aa:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d49ae:	f7ff fc09 	bl	d41c4 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d49b2:	4628      	mov	r0, r5
   d49b4:	b009      	add	sp, #36	; 0x24
   d49b6:	bd30      	pop	{r4, r5, pc}
   d49b8:	000d6831 	.word	0x000d6831
   d49bc:	fffffefc 	.word	0xfffffefc

000d49c0 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d49c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d49c4:	4605      	mov	r5, r0
   d49c6:	b08c      	sub	sp, #48	; 0x30
   d49c8:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d49ca:	460f      	mov	r7, r1
   d49cc:	b109      	cbz	r1, d49d2 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d49ce:	780b      	ldrb	r3, [r1, #0]
   d49d0:	b90b      	cbnz	r3, d49d6 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d49d2:	4c35      	ldr	r4, [pc, #212]	; (d4aa8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d49d4:	e064      	b.n	d4aa0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d49d6:	4608      	mov	r0, r1
   d49d8:	f001 faa2 	bl	d5f20 <strlen>
   d49dc:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d49de:	2e00      	cmp	r6, #0
   d49e0:	d05c      	beq.n	d4a9c <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d49e2:	4630      	mov	r0, r6
   d49e4:	f001 fa9c 	bl	d5f20 <strlen>
   d49e8:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d49ea:	f108 0302 	add.w	r3, r8, #2
   d49ee:	4423      	add	r3, r4
   d49f0:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d49f4:	d84f      	bhi.n	d4a96 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d49f6:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d49fa:	f7ff fee7 	bl	d47cc <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d49fe:	4628      	mov	r0, r5
   d4a00:	f7ff ff96 	bl	d4930 <_ZN5spark11MeshPublish14initialize_udpEv>
   d4a04:	2800      	cmp	r0, #0
   d4a06:	db40      	blt.n	d4a8a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d4a08:	4668      	mov	r0, sp
   d4a0a:	f7ff fe91 	bl	d4730 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d4a0e:	4668      	mov	r0, sp
   d4a10:	f7ff ff6e 	bl	d48f0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d4a14:	2800      	cmp	r0, #0
   d4a16:	db38      	blt.n	d4a8a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d4a18:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d4a1c:	f8da 3000 	ldr.w	r3, [sl]
   d4a20:	f10d 0c04 	add.w	ip, sp, #4
   d4a24:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d4a28:	4b20      	ldr	r3, [pc, #128]	; (d4aac <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d4a2a:	9306      	str	r3, [sp, #24]
   d4a2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4a30:	f10d 0e1c 	add.w	lr, sp, #28
   d4a34:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d4a38:	f8dc 3000 	ldr.w	r3, [ip]
   d4a3c:	f88e 3000 	strb.w	r3, [lr]
   d4a40:	f249 0269 	movw	r2, #36969	; 0x9069
   d4a44:	a906      	add	r1, sp, #24
   d4a46:	4650      	mov	r0, sl
   d4a48:	47c8      	blx	r9
   d4a4a:	2800      	cmp	r0, #0
   d4a4c:	db1d      	blt.n	d4a8a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d4a4e:	2300      	movs	r3, #0
   d4a50:	6828      	ldr	r0, [r5, #0]
   d4a52:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d4a56:	6803      	ldr	r3, [r0, #0]
   d4a58:	2201      	movs	r2, #1
   d4a5a:	68db      	ldr	r3, [r3, #12]
   d4a5c:	a906      	add	r1, sp, #24
   d4a5e:	4798      	blx	r3
   d4a60:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d4a62:	6803      	ldr	r3, [r0, #0]
   d4a64:	f108 0201 	add.w	r2, r8, #1
   d4a68:	68db      	ldr	r3, [r3, #12]
   d4a6a:	4639      	mov	r1, r7
   d4a6c:	4798      	blx	r3
    if (dataLen > 0) {
   d4a6e:	b12c      	cbz	r4, d4a7c <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d4a70:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d4a72:	6803      	ldr	r3, [r0, #0]
   d4a74:	4622      	mov	r2, r4
   d4a76:	68db      	ldr	r3, [r3, #12]
   d4a78:	4631      	mov	r1, r6
   d4a7a:	4798      	blx	r3
   d4a7c:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d4a7e:	6803      	ldr	r3, [r0, #0]
   d4a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a82:	4798      	blx	r3
   d4a84:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d4a88:	e000      	b.n	d4a8c <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d4a8a:	4604      	mov	r4, r0
   d4a8c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d4a90:	f7ff fb98 	bl	d41c4 <os_mutex_recursive_unlock>
   d4a94:	e004      	b.n	d4aa0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d4a96:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d4a9a:	e001      	b.n	d4aa0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d4a9c:	4634      	mov	r4, r6
   d4a9e:	e7a4      	b.n	d49ea <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d4aa0:	4620      	mov	r0, r4
   d4aa2:	b00c      	add	sp, #48	; 0x30
   d4aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4aa8:	fffffef2 	.word	0xfffffef2
   d4aac:	000d6704 	.word	0x000d6704

000d4ab0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4ab0:	b538      	push	{r3, r4, r5, lr}
   d4ab2:	4c0d      	ldr	r4, [pc, #52]	; (d4ae8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4ab4:	4b0d      	ldr	r3, [pc, #52]	; (d4aec <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4ab6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4ab8:	2500      	movs	r5, #0
   d4aba:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4abc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4ac0:	6063      	str	r3, [r4, #4]
   d4ac2:	60a5      	str	r5, [r4, #8]
   d4ac4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4ac8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4acc:	f7ff fb6a 	bl	d41a4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4ad0:	4b07      	ldr	r3, [pc, #28]	; (d4af0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4ad2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4ad6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4ad8:	4620      	mov	r0, r4
   d4ada:	4a06      	ldr	r2, [pc, #24]	; (d4af4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4adc:	4906      	ldr	r1, [pc, #24]	; (d4af8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4ae2:	f000 bf3f 	b.w	d5964 <__aeabi_atexit>
   d4ae6:	bf00      	nop
   d4ae8:	2003e4c4 	.word	0x2003e4c4
   d4aec:	000d685c 	.word	0x000d685c
   d4af0:	000d67f8 	.word	0x000d67f8
   d4af4:	2003e4b0 	.word	0x2003e4b0
   d4af8:	000d48bd 	.word	0x000d48bd

000d4afc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4afc:	2300      	movs	r3, #0
   d4afe:	461a      	mov	r2, r3
   d4b00:	6840      	ldr	r0, [r0, #4]
   d4b02:	f7ff bd13 	b.w	d452c <network_connect>

000d4b06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4b06:	2200      	movs	r2, #0
   d4b08:	2102      	movs	r1, #2
   d4b0a:	6840      	ldr	r0, [r0, #4]
   d4b0c:	f7ff bd1e 	b.w	d454c <network_disconnect>

000d4b10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4b10:	2200      	movs	r2, #0
   d4b12:	4611      	mov	r1, r2
   d4b14:	6840      	ldr	r0, [r0, #4]
   d4b16:	f7ff bd11 	b.w	d453c <network_connecting>

000d4b1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4b1a:	2200      	movs	r2, #0
   d4b1c:	4611      	mov	r1, r2
   d4b1e:	6840      	ldr	r0, [r0, #4]
   d4b20:	f7ff bd1c 	b.w	d455c <network_ready>

000d4b24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4b24:	2300      	movs	r3, #0
   d4b26:	461a      	mov	r2, r3
   d4b28:	4619      	mov	r1, r3
   d4b2a:	6840      	ldr	r0, [r0, #4]
   d4b2c:	f7ff bd1e 	b.w	d456c <network_on>

000d4b30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4b30:	2300      	movs	r3, #0
   d4b32:	461a      	mov	r2, r3
   d4b34:	4619      	mov	r1, r3
   d4b36:	6840      	ldr	r0, [r0, #4]
   d4b38:	f7ff bd20 	b.w	d457c <network_off>

000d4b3c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4b3c:	2200      	movs	r2, #0
   d4b3e:	f081 0101 	eor.w	r1, r1, #1
   d4b42:	6840      	ldr	r0, [r0, #4]
   d4b44:	f7ff bd22 	b.w	d458c <network_listen>

000d4b48 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4b48:	2200      	movs	r2, #0
   d4b4a:	6840      	ldr	r0, [r0, #4]
   d4b4c:	f7ff bd2e 	b.w	d45ac <network_set_listen_timeout>

000d4b50 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4b50:	2200      	movs	r2, #0
   d4b52:	4611      	mov	r1, r2
   d4b54:	6840      	ldr	r0, [r0, #4]
   d4b56:	f7ff bd31 	b.w	d45bc <network_get_listen_timeout>

000d4b5a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	4611      	mov	r1, r2
   d4b5e:	6840      	ldr	r0, [r0, #4]
   d4b60:	f7ff bd1c 	b.w	d459c <network_listening>

000d4b64 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4b68:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4b6a:	b095      	sub	sp, #84	; 0x54
   d4b6c:	4616      	mov	r6, r2
   d4b6e:	460d      	mov	r5, r1
   d4b70:	4607      	mov	r7, r0
    IPAddress addr;
   d4b72:	f7ff fddd 	bl	d4730 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4b76:	4621      	mov	r1, r4
   d4b78:	2220      	movs	r2, #32
   d4b7a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4b7c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4b7e:	f001 f98c 	bl	d5e9a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4b82:	2340      	movs	r3, #64	; 0x40
   d4b84:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4b86:	4621      	mov	r1, r4
   d4b88:	466b      	mov	r3, sp
   d4b8a:	aa0c      	add	r2, sp, #48	; 0x30
   d4b8c:	4630      	mov	r0, r6
   d4b8e:	f7ff fba1 	bl	d42d4 <netdb_getaddrinfo>
    if (!r) {
   d4b92:	4604      	mov	r4, r0
   d4b94:	2800      	cmp	r0, #0
   d4b96:	d144      	bne.n	d4c22 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4b98:	4602      	mov	r2, r0
   d4b9a:	2101      	movs	r1, #1
   d4b9c:	6868      	ldr	r0, [r5, #4]
   d4b9e:	f7ff fcdd 	bl	d455c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ba2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4ba4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ba6:	4622      	mov	r2, r4
   d4ba8:	6868      	ldr	r0, [r5, #4]
   d4baa:	f7ff fcd7 	bl	d455c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4bae:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4bb0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4bb2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4bb4:	2e00      	cmp	r6, #0
   d4bb6:	d034      	beq.n	d4c22 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4bb8:	2900      	cmp	r1, #0
   d4bba:	d132      	bne.n	d4c22 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4bbc:	6873      	ldr	r3, [r6, #4]
   d4bbe:	2b02      	cmp	r3, #2
   d4bc0:	d002      	beq.n	d4bc8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4bc2:	2b0a      	cmp	r3, #10
   d4bc4:	d009      	beq.n	d4bda <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4bc6:	e02a      	b.n	d4c1e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4bc8:	f1b8 0f00 	cmp.w	r8, #0
   d4bcc:	d027      	beq.n	d4c1e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4bce:	6971      	ldr	r1, [r6, #20]
   d4bd0:	4638      	mov	r0, r7
   d4bd2:	3104      	adds	r1, #4
   d4bd4:	f7ff fdef 	bl	d47b6 <_ZN9IPAddressaSEPKh>
   d4bd8:	e020      	b.n	d4c1c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4bda:	f1b9 0f00 	cmp.w	r9, #0
   d4bde:	d01e      	beq.n	d4c1e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4be0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4be2:	2211      	movs	r2, #17
   d4be4:	a801      	add	r0, sp, #4
   d4be6:	f001 f958 	bl	d5e9a <memset>
                    a.v = 6;
   d4bea:	2306      	movs	r3, #6
   d4bec:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4bf0:	ad01      	add	r5, sp, #4
   d4bf2:	f104 0308 	add.w	r3, r4, #8
   d4bf6:	3418      	adds	r4, #24
   d4bf8:	6818      	ldr	r0, [r3, #0]
   d4bfa:	6859      	ldr	r1, [r3, #4]
   d4bfc:	462a      	mov	r2, r5
   d4bfe:	c203      	stmia	r2!, {r0, r1}
   d4c00:	3308      	adds	r3, #8
   d4c02:	42a3      	cmp	r3, r4
   d4c04:	4615      	mov	r5, r2
   d4c06:	d1f7      	bne.n	d4bf8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4c08:	a901      	add	r1, sp, #4
   d4c0a:	a806      	add	r0, sp, #24
   d4c0c:	ad07      	add	r5, sp, #28
   d4c0e:	f7ff fd9d 	bl	d474c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c14:	1d3c      	adds	r4, r7, #4
   d4c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c18:	682b      	ldr	r3, [r5, #0]
   d4c1a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4c1c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c1e:	69f6      	ldr	r6, [r6, #28]
   d4c20:	e7c8      	b.n	d4bb4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4c22:	9800      	ldr	r0, [sp, #0]
   d4c24:	f7ff fb4e 	bl	d42c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4c28:	4638      	mov	r0, r7
   d4c2a:	b015      	add	sp, #84	; 0x54
   d4c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4c30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4c30:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4c32:	4a03      	ldr	r2, [pc, #12]	; (d4c40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4c34:	601a      	str	r2, [r3, #0]
   d4c36:	2200      	movs	r2, #0
   d4c38:	605a      	str	r2, [r3, #4]
   d4c3a:	4770      	bx	lr
   d4c3c:	2003e694 	.word	0x2003e694
   d4c40:	000d685c 	.word	0x000d685c

000d4c44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c46:	4606      	mov	r6, r0
   d4c48:	460d      	mov	r5, r1
   d4c4a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4c4c:	2400      	movs	r4, #0
  while (size--) {
   d4c4e:	42bd      	cmp	r5, r7
   d4c50:	d00c      	beq.n	d4c6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4c52:	6833      	ldr	r3, [r6, #0]
   d4c54:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4c58:	689b      	ldr	r3, [r3, #8]
   d4c5a:	4630      	mov	r0, r6
   d4c5c:	4798      	blx	r3
     if (chunk>=0)
   d4c5e:	2800      	cmp	r0, #0
   d4c60:	db01      	blt.n	d4c66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4c62:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4c64:	e7f3      	b.n	d4c4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4c66:	2c00      	cmp	r4, #0
   d4c68:	bf08      	it	eq
   d4c6a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4c6c:	4620      	mov	r0, r4
   d4c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c70 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4c70:	b570      	push	{r4, r5, r6, lr}
   d4c72:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4c74:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4c76:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4c78:	b149      	cbz	r1, d4c8e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4c7a:	f001 f951 	bl	d5f20 <strlen>
   d4c7e:	682b      	ldr	r3, [r5, #0]
   d4c80:	4602      	mov	r2, r0
   d4c82:	4621      	mov	r1, r4
   d4c84:	4628      	mov	r0, r5
   d4c86:	68db      	ldr	r3, [r3, #12]
    }
   d4c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c8c:	4718      	bx	r3
    }
   d4c8e:	bd70      	pop	{r4, r5, r6, pc}

000d4c90 <_ZN5Print5printEPKc>:
   d4c90:	b508      	push	{r3, lr}
   d4c92:	f7ff ffed 	bl	d4c70 <_ZN5Print5writeEPKc>
   d4c96:	bd08      	pop	{r3, pc}

000d4c98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4c98:	6803      	ldr	r3, [r0, #0]
   d4c9a:	689b      	ldr	r3, [r3, #8]
   d4c9c:	4718      	bx	r3

000d4c9e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4c9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ca0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ca2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4ca4:	f7ff fff8 	bl	d4c98 <_ZN5Print5printEc>
  n += print('\n');
   d4ca8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4caa:	4604      	mov	r4, r0
  n += print('\n');
   d4cac:	4628      	mov	r0, r5
   d4cae:	f7ff fff3 	bl	d4c98 <_ZN5Print5printEc>
  return n;
}
   d4cb2:	4420      	add	r0, r4
   d4cb4:	bd38      	pop	{r3, r4, r5, pc}

000d4cb6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4cb6:	b538      	push	{r3, r4, r5, lr}
   d4cb8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4cba:	f7ff ffd9 	bl	d4c70 <_ZN5Print5writeEPKc>
   d4cbe:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4cc0:	4628      	mov	r0, r5
   d4cc2:	f7ff ffec 	bl	d4c9e <_ZN5Print7printlnEv>
  return n;
}
   d4cc6:	4420      	add	r0, r4
   d4cc8:	bd38      	pop	{r3, r4, r5, pc}

000d4cca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4cca:	b530      	push	{r4, r5, lr}
   d4ccc:	b08b      	sub	sp, #44	; 0x2c
   d4cce:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4cd0:	2100      	movs	r1, #0
   d4cd2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4cd6:	2a01      	cmp	r2, #1
   d4cd8:	bf98      	it	ls
   d4cda:	220a      	movls	r2, #10
   d4cdc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4ce0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4ce4:	fb05 3312 	mls	r3, r5, r2, r3
   d4ce8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4cec:	2b09      	cmp	r3, #9
   d4cee:	bf94      	ite	ls
   d4cf0:	3330      	addls	r3, #48	; 0x30
   d4cf2:	3337      	addhi	r3, #55	; 0x37
   d4cf4:	b2db      	uxtb	r3, r3
   d4cf6:	4621      	mov	r1, r4
   d4cf8:	f804 3901 	strb.w	r3, [r4], #-1
   d4cfc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4cfe:	2d00      	cmp	r5, #0
   d4d00:	d1ee      	bne.n	d4ce0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4d02:	f7ff ffb5 	bl	d4c70 <_ZN5Print5writeEPKc>
}
   d4d06:	b00b      	add	sp, #44	; 0x2c
   d4d08:	bd30      	pop	{r4, r5, pc}

000d4d0a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4d0a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4d0c:	b92a      	cbnz	r2, d4d1a <_ZN5Print5printEmi+0x10>
   d4d0e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4d10:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4d14:	689b      	ldr	r3, [r3, #8]
   d4d16:	b2c9      	uxtb	r1, r1
   d4d18:	4718      	bx	r3
  else return printNumber(n, base);
   d4d1a:	b2d2      	uxtb	r2, r2
}
   d4d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4d20:	f7ff bfd3 	b.w	d4cca <_ZN5Print11printNumberEmh>

000d4d24 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4d24:	f7ff bff1 	b.w	d4d0a <_ZN5Print5printEmi>

000d4d28 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4d28:	b510      	push	{r4, lr}
   d4d2a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d2c:	f7ff fc7e 	bl	d462c <_ZNSt14_Function_baseD1Ev>
   d4d30:	4620      	mov	r0, r4
   d4d32:	bd10      	pop	{r4, pc}

000d4d34 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d4d34:	b510      	push	{r4, lr}
   d4d36:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d4d38:	f7ff fb94 	bl	d4464 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d4d3c:	4284      	cmp	r4, r0
   d4d3e:	d008      	beq.n	d4d52 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d4d40:	b11c      	cbz	r4, d4d4a <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d4d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d4d46:	f7ff bb7d 	b.w	d4444 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d4d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d4d4e:	f7ff bb81 	b.w	d4454 <LED_Signaling_Stop>
   d4d52:	bd10      	pop	{r4, pc}

000d4d54 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d4d54:	b570      	push	{r4, r5, r6, lr}
   d4d56:	4605      	mov	r5, r0
   d4d58:	460e      	mov	r6, r1
   d4d5a:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d4d5c:	f7ff fb82 	bl	d4464 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d4d60:	b150      	cbz	r0, d4d78 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d4d62:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d4d66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d4d6a:	f7ff fb63 	bl	d4434 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d4d6e:	20e7      	movs	r0, #231	; 0xe7
}
   d4d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d4d74:	f7ff bb7e 	b.w	d4474 <LED_On>
   d4d78:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d7c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d7c:	4803      	ldr	r0, [pc, #12]	; (d4d8c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4d7e:	4a04      	ldr	r2, [pc, #16]	; (d4d90 <_GLOBAL__sub_I_RGB+0x14>)
   d4d80:	4904      	ldr	r1, [pc, #16]	; (d4d94 <_GLOBAL__sub_I_RGB+0x18>)
   d4d82:	2300      	movs	r3, #0
   d4d84:	6083      	str	r3, [r0, #8]
   d4d86:	f000 bded 	b.w	d5964 <__aeabi_atexit>
   d4d8a:	bf00      	nop
   d4d8c:	2003e69c 	.word	0x2003e69c
   d4d90:	2003e4b0 	.word	0x2003e4b0
   d4d94:	000d4d29 	.word	0x000d4d29

000d4d98 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4d98:	4770      	bx	lr

000d4d9a <_ZN8SPIClassD0Ev>:
   d4d9a:	b510      	push	{r4, lr}
   d4d9c:	4604      	mov	r4, r0
   d4d9e:	f7ff f97e 	bl	d409e <_ZdlPv>
   d4da2:	4620      	mov	r0, r4
   d4da4:	bd10      	pop	{r4, pc}
	...

000d4da8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4da8:	b570      	push	{r4, r5, r6, lr}
   d4daa:	4b08      	ldr	r3, [pc, #32]	; (d4dcc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4dac:	6003      	str	r3, [r0, #0]
   d4dae:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4db0:	2500      	movs	r5, #0
   d4db2:	460e      	mov	r6, r1
   d4db4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4db8:	f7ff f9ec 	bl	d4194 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4dbc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4dbe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4dc0:	f7ff fac0 	bl	d4344 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4dc4:	60a5      	str	r5, [r4, #8]
}
   d4dc6:	4620      	mov	r0, r4
   d4dc8:	bd70      	pop	{r4, r5, r6, pc}
   d4dca:	bf00      	nop
   d4dcc:	000d6890 	.word	0x000d6890

000d4dd0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4dd0:	b510      	push	{r4, lr}
   d4dd2:	4604      	mov	r4, r0
{
	free(buffer);
   d4dd4:	6800      	ldr	r0, [r0, #0]
   d4dd6:	f7ff fc01 	bl	d45dc <free>
}
   d4dda:	4620      	mov	r0, r4
   d4ddc:	bd10      	pop	{r4, pc}

000d4dde <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4dde:	b510      	push	{r4, lr}
   d4de0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4de2:	6800      	ldr	r0, [r0, #0]
   d4de4:	b108      	cbz	r0, d4dea <_ZN6String10invalidateEv+0xc>
   d4de6:	f7ff fbf9 	bl	d45dc <free>
	buffer = NULL;
   d4dea:	2300      	movs	r3, #0
   d4dec:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4dee:	60a3      	str	r3, [r4, #8]
   d4df0:	6063      	str	r3, [r4, #4]
   d4df2:	bd10      	pop	{r4, pc}

000d4df4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4df4:	b538      	push	{r3, r4, r5, lr}
   d4df6:	4604      	mov	r4, r0
   d4df8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4dfa:	6800      	ldr	r0, [r0, #0]
   d4dfc:	3101      	adds	r1, #1
   d4dfe:	f7ff fbf5 	bl	d45ec <realloc>
	if (newbuffer) {
   d4e02:	b110      	cbz	r0, d4e0a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4e04:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4e08:	2001      	movs	r0, #1
	}
	return 0;
}
   d4e0a:	bd38      	pop	{r3, r4, r5, pc}

000d4e0c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4e0c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4e0e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4e10:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4e12:	b113      	cbz	r3, d4e1a <_ZN6String7reserveEj+0xe>
   d4e14:	6843      	ldr	r3, [r0, #4]
   d4e16:	428b      	cmp	r3, r1
   d4e18:	d207      	bcs.n	d4e2a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	f7ff ffea 	bl	d4df4 <_ZN6String12changeBufferEj>
   d4e20:	b120      	cbz	r0, d4e2c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4e22:	68a3      	ldr	r3, [r4, #8]
   d4e24:	b90b      	cbnz	r3, d4e2a <_ZN6String7reserveEj+0x1e>
   d4e26:	6822      	ldr	r2, [r4, #0]
   d4e28:	7013      	strb	r3, [r2, #0]
   d4e2a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4e2c:	bd10      	pop	{r4, pc}

000d4e2e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4e2e:	b570      	push	{r4, r5, r6, lr}
   d4e30:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4e32:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4e34:	4604      	mov	r4, r0
   d4e36:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4e38:	f7ff ffe8 	bl	d4e0c <_ZN6String7reserveEj>
   d4e3c:	b918      	cbnz	r0, d4e46 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4e3e:	4620      	mov	r0, r4
   d4e40:	f7ff ffcd 	bl	d4dde <_ZN6String10invalidateEv>
		return *this;
   d4e44:	e009      	b.n	d4e5a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4e46:	462a      	mov	r2, r5
   d4e48:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4e4a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4e4c:	6820      	ldr	r0, [r4, #0]
   d4e4e:	f001 f819 	bl	d5e84 <memcpy>
	buffer[len] = 0;
   d4e52:	6822      	ldr	r2, [r4, #0]
   d4e54:	68a3      	ldr	r3, [r4, #8]
   d4e56:	2100      	movs	r1, #0
   d4e58:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	bd70      	pop	{r4, r5, r6, pc}

000d4e5e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4e5e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4e60:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4e62:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4e64:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4e66:	6043      	str	r3, [r0, #4]
	len = 0;
   d4e68:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e6a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4e6c:	460d      	mov	r5, r1
   d4e6e:	b139      	cbz	r1, d4e80 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4e70:	4608      	mov	r0, r1
   d4e72:	f001 f855 	bl	d5f20 <strlen>
   d4e76:	4629      	mov	r1, r5
   d4e78:	4602      	mov	r2, r0
   d4e7a:	4620      	mov	r0, r4
   d4e7c:	f7ff ffd7 	bl	d4e2e <_ZN6String4copyEPKcj>
}
   d4e80:	4620      	mov	r0, r4
   d4e82:	bd38      	pop	{r3, r4, r5, pc}

000d4e84 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4e84:	4b04      	ldr	r3, [pc, #16]	; (d4e98 <_GLOBAL__sub_I_System+0x14>)
   d4e86:	2000      	movs	r0, #0
   d4e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e8c:	7018      	strb	r0, [r3, #0]
   d4e8e:	8058      	strh	r0, [r3, #2]
   d4e90:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e92:	f7ff baff 	b.w	d4494 <set_system_mode>
   d4e96:	bf00      	nop
   d4e98:	2003e6ac 	.word	0x2003e6ac

000d4e9c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d4e9c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d4e9e:	2000      	movs	r0, #0
   d4ea0:	f7ff fb34 	bl	d450c <spark_sync_time_pending>
   d4ea4:	b128      	cbz	r0, d4eb2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ea6:	f7ff fb29 	bl	d44fc <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d4eaa:	f080 0001 	eor.w	r0, r0, #1
   d4eae:	b2c0      	uxtb	r0, r0
   d4eb0:	bd08      	pop	{r3, pc}
   d4eb2:	2001      	movs	r0, #1
    }
   d4eb4:	bd08      	pop	{r3, pc}
	...

000d4eb8 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d4eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d4eba:	4b0e      	ldr	r3, [pc, #56]	; (d4ef4 <_ZN9TimeClass7timeStrEl+0x3c>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	4419      	add	r1, r3
   d4ec0:	4b0d      	ldr	r3, [pc, #52]	; (d4ef8 <_ZN9TimeClass7timeStrEl+0x40>)
   d4ec2:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d4ec4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d4ec6:	a802      	add	r0, sp, #8
   d4ec8:	4419      	add	r1, r3
   d4eca:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d4ece:	f000 fee1 	bl	d5c94 <localtime>
        char* ascstr = asctime(calendar_time);
   d4ed2:	f000 fe95 	bl	d5c00 <asctime>
   d4ed6:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d4ed8:	f001 f822 	bl	d5f20 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d4edc:	4428      	add	r0, r5
   d4ede:	2300      	movs	r3, #0
   d4ee0:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d4ee4:	4629      	mov	r1, r5
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	f7ff ffb9 	bl	d4e5e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d4eec:	4620      	mov	r0, r4
   d4eee:	b003      	add	sp, #12
   d4ef0:	bd30      	pop	{r4, r5, pc}
   d4ef2:	bf00      	nop
   d4ef4:	2003e6bc 	.word	0x2003e6bc
   d4ef8:	2003e6b8 	.word	0x2003e6b8

000d4efc <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d4efc:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d4efe:	2000      	movs	r0, #0
   d4f00:	f7ff f980 	bl	d4204 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d4f04:	4604      	mov	r4, r0
   d4f06:	b968      	cbnz	r0, d4f24 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d4f08:	f7ff fabc 	bl	d4484 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d4f0c:	2801      	cmp	r0, #1
   d4f0e:	d10b      	bne.n	d4f28 <_ZN9TimeClass7isValidEv+0x2c>
   d4f10:	4620      	mov	r0, r4
   d4f12:	f7ff facf 	bl	d44b4 <system_thread_get_state>
   d4f16:	b938      	cbnz	r0, d4f28 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d4f18:	f7ff ffc0 	bl	d4e9c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4f1c:	b930      	cbnz	r0, d4f2c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d4f1e:	f7ff fae5 	bl	d44ec <spark_process>
   d4f22:	e7f9      	b.n	d4f18 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d4f24:	2001      	movs	r0, #1
   d4f26:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d4f28:	2000      	movs	r0, #0
   d4f2a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d4f2c:	f7ff ffb6 	bl	d4e9c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d4f30:	2000      	movs	r0, #0
   d4f32:	f7ff f967 	bl	d4204 <HAL_RTC_Time_Is_Valid>
   d4f36:	3000      	adds	r0, #0
   d4f38:	bf18      	it	ne
   d4f3a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d4f3c:	bd10      	pop	{r4, pc}

000d4f3e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d4f3e:	b508      	push	{r3, lr}
    (void)isValid();
   d4f40:	f7ff ffdc 	bl	d4efc <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d4f44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d4f48:	f7ff b954 	b.w	d41f4 <HAL_RTC_Get_UnixTime>

000d4f4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f4c:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f4e:	681a      	ldr	r2, [r3, #0]
   d4f50:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f52:	601a      	str	r2, [r3, #0]
   d4f54:	4770      	bx	lr
   d4f56:	bf00      	nop
   d4f58:	2003e3f8 	.word	0x2003e3f8
   d4f5c:	2003e6b4 	.word	0x2003e6b4

000d4f60 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4f60:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4f62:	6804      	ldr	r4, [r0, #0]
   d4f64:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4f66:	46a4      	mov	ip, r4
    }
   d4f68:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4f6c:	4760      	bx	ip

000d4f6e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4f6e:	6803      	ldr	r3, [r0, #0]
   d4f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f72:	4718      	bx	r3

000d4f74 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4f74:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4f76:	4770      	bx	lr

000d4f78 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4f78:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4f7a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4f7c:	1a10      	subs	r0, r2, r0
   d4f7e:	4770      	bx	lr

000d4f80 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4f80:	b513      	push	{r0, r1, r4, lr}
   d4f82:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d4f84:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4f86:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d4f8a:	68d4      	ldr	r4, [r2, #12]
   d4f8c:	4619      	mov	r1, r3
   d4f8e:	2201      	movs	r2, #1
   d4f90:	47a0      	blx	r4
}
   d4f92:	b002      	add	sp, #8
   d4f94:	bd10      	pop	{r4, pc}

000d4f96 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d4f96:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4f98:	6803      	ldr	r3, [r0, #0]
   d4f9a:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d4f9c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4f9e:	4798      	blx	r3
   d4fa0:	b128      	cbz	r0, d4fae <_ZN3UDP4readEv+0x18>
   d4fa2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4fa4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4fa6:	1c59      	adds	r1, r3, #1
   d4fa8:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4faa:	5cd0      	ldrb	r0, [r2, r3]
   d4fac:	bd10      	pop	{r4, pc}
   d4fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d4fb2:	bd10      	pop	{r4, pc}

000d4fb4 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4fb4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d4fb6:	6803      	ldr	r3, [r0, #0]
   d4fb8:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4fba:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d4fbc:	4798      	blx	r3
   d4fbe:	b118      	cbz	r0, d4fc8 <_ZN3UDP4peekEv+0x14>
   d4fc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4fc2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4fc4:	5cd0      	ldrb	r0, [r2, r3]
   d4fc6:	bd10      	pop	{r4, pc}
   d4fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d4fcc:	bd10      	pop	{r4, pc}

000d4fce <_ZN3UDP5flushEv>:

void UDP::flush() {
   d4fce:	4770      	bx	lr

000d4fd0 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4fd0:	b410      	push	{r4}
   d4fd2:	4603      	mov	r3, r0
   d4fd4:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4fd6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d4fd8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d4fda:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d4fdc:	6803      	ldr	r3, [r0, #0]
   d4fde:	1a52      	subs	r2, r2, r1
   d4fe0:	68db      	ldr	r3, [r3, #12]
   d4fe2:	4421      	add	r1, r4
}
   d4fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4fe8:	4718      	bx	r3

000d4fea <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4fea:	f1a0 0010 	sub.w	r0, r0, #16
   d4fee:	f7ff bfef 	b.w	d4fd0 <_ZNK3UDP7printToER5Print>

000d4ff2 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d4ff4:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4ff6:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4ff8:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d4ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4ffc:	4604      	mov	r4, r0
   d4ffe:	460f      	mov	r7, r1
   d5000:	4615      	mov	r5, r2
    stop();
   d5002:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d5004:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5006:	4632      	mov	r2, r6
   d5008:	2100      	movs	r1, #0
   d500a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d500c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d500e:	f000 ff44 	bl	d5e9a <memset>
    saddr.sin6_len = sizeof(saddr);
   d5012:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5016:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5018:	260a      	movs	r6, #10
   d501a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d501e:	f7ff f949 	bl	d42b4 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5022:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5024:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5028:	2102      	movs	r1, #2
   d502a:	4630      	mov	r0, r6
   d502c:	f7ff f982 	bl	d4334 <sock_socket>

    if (_sock < 0) {
   d5030:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5032:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d5034:	db24      	blt.n	d5080 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d5036:	2204      	movs	r2, #4
   d5038:	9200      	str	r2, [sp, #0]
   d503a:	ab02      	add	r3, sp, #8
   d503c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5040:	f7ff f958 	bl	d42f4 <sock_setsockopt>
   d5044:	b9e0      	cbnz	r0, d5080 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5046:	b195      	cbz	r5, d506e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d5048:	9003      	str	r0, [sp, #12]
   d504a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d504e:	a903      	add	r1, sp, #12
   d5050:	b2e8      	uxtb	r0, r5
   d5052:	f7ff f8ef 	bl	d4234 <if_index_to_name>
   d5056:	b998      	cbnz	r0, d5080 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d5058:	2306      	movs	r3, #6
   d505a:	9300      	str	r3, [sp, #0]
   d505c:	f241 020b 	movw	r2, #4107	; 0x100b
   d5060:	ab03      	add	r3, sp, #12
   d5062:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5066:	6960      	ldr	r0, [r4, #20]
   d5068:	f7ff f944 	bl	d42f4 <sock_setsockopt>
   d506c:	b940      	cbnz	r0, d5080 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d506e:	221c      	movs	r2, #28
   d5070:	a905      	add	r1, sp, #20
   d5072:	6960      	ldr	r0, [r4, #20]
   d5074:	f7ff f936 	bl	d42e4 <sock_bind>
   d5078:	b910      	cbnz	r0, d5080 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d507a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d507c:	2001      	movs	r0, #1
   d507e:	e004      	b.n	d508a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5080:	6823      	ldr	r3, [r4, #0]
   d5082:	4620      	mov	r0, r4
   d5084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5086:	4798      	blx	r3
   d5088:	2000      	movs	r0, #0
    }
    return bound;
}
   d508a:	b00d      	add	sp, #52	; 0x34
   d508c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d508e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d508e:	b510      	push	{r4, lr}
   d5090:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d5092:	6940      	ldr	r0, [r0, #20]
   d5094:	2800      	cmp	r0, #0
   d5096:	db01      	blt.n	d509c <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d5098:	f7ff f934 	bl	d4304 <sock_close>
    }

    _sock = -1;
   d509c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d50a0:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d50a2:	2300      	movs	r3, #0
   d50a4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d50a6:	8723      	strh	r3, [r4, #56]	; 0x38
   d50a8:	bd10      	pop	{r4, pc}

000d50aa <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d50aa:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d50ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d50ae:	4605      	mov	r5, r0
   d50b0:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d50b2:	b113      	cbz	r3, d50ba <_ZN3UDP5writeEPKhj+0x10>
   d50b4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d50b6:	1a24      	subs	r4, r4, r0
   d50b8:	e000      	b.n	d50bc <_ZN3UDP5writeEPKhj+0x12>
   d50ba:	461c      	mov	r4, r3
   d50bc:	4294      	cmp	r4, r2
   d50be:	bf28      	it	cs
   d50c0:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d50c2:	4622      	mov	r2, r4
   d50c4:	4418      	add	r0, r3
   d50c6:	f000 fedd 	bl	d5e84 <memcpy>
    _offset += size;
   d50ca:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d50cc:	4423      	add	r3, r4
   d50ce:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d50d0:	4620      	mov	r0, r4
   d50d2:	bd38      	pop	{r3, r4, r5, pc}

000d50d4 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d50d4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d50d6:	6803      	ldr	r3, [r0, #0]
   d50d8:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d50da:	4604      	mov	r4, r0
   d50dc:	460e      	mov	r6, r1
   d50de:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d50e0:	4798      	blx	r3
   d50e2:	b188      	cbz	r0, d5108 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d50e4:	6823      	ldr	r3, [r4, #0]
   d50e6:	4620      	mov	r0, r4
   d50e8:	691b      	ldr	r3, [r3, #16]
   d50ea:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d50ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d50ee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d50f0:	4285      	cmp	r5, r0
   d50f2:	bfa8      	it	ge
   d50f4:	4605      	movge	r5, r0
   d50f6:	4419      	add	r1, r3
   d50f8:	462a      	mov	r2, r5
   d50fa:	4630      	mov	r0, r6
   d50fc:	f000 fec2 	bl	d5e84 <memcpy>
        _offset += read;
   d5100:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5102:	442b      	add	r3, r5
   d5104:	86e3      	strh	r3, [r4, #54]	; 0x36
   d5106:	e001      	b.n	d510c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d5108:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d510c:	4628      	mov	r0, r5
   d510e:	bd70      	pop	{r4, r5, r6, pc}

000d5110 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5110:	b570      	push	{r4, r5, r6, lr}
   d5112:	4604      	mov	r4, r0
   d5114:	4b05      	ldr	r3, [pc, #20]	; (d512c <_ZN3UDP8remoteIPEv+0x1c>)
   d5116:	f844 3b04 	str.w	r3, [r4], #4
   d511a:	f101 0520 	add.w	r5, r1, #32
   d511e:	4606      	mov	r6, r0
   d5120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5124:	682b      	ldr	r3, [r5, #0]
   d5126:	7023      	strb	r3, [r4, #0]
   d5128:	4630      	mov	r0, r6
   d512a:	bd70      	pop	{r4, r5, r6, pc}
   d512c:	000d6704 	.word	0x000d6704

000d5130 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5130:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5132:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5134:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5136:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5138:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d513a:	4a0a      	ldr	r2, [pc, #40]	; (d5164 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d513c:	9202      	str	r2, [sp, #8]
   d513e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5140:	468e      	mov	lr, r1
   d5142:	4606      	mov	r6, r0
   d5144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5146:	ac03      	add	r4, sp, #12
   d5148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d514a:	682b      	ldr	r3, [r5, #0]
   d514c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d514e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d5152:	9300      	str	r3, [sp, #0]
   d5154:	4662      	mov	r2, ip
   d5156:	ab02      	add	r3, sp, #8
   d5158:	4671      	mov	r1, lr
   d515a:	4630      	mov	r0, r6
   d515c:	47b8      	blx	r7
    }
   d515e:	b009      	add	sp, #36	; 0x24
   d5160:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5162:	bf00      	nop
   d5164:	000d6704 	.word	0x000d6704

000d5168 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5168:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d516a:	6803      	ldr	r3, [r0, #0]
   d516c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5170:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5172:	4b0d      	ldr	r3, [pc, #52]	; (d51a8 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5174:	b089      	sub	sp, #36	; 0x24
   d5176:	f100 0620 	add.w	r6, r0, #32
   d517a:	4604      	mov	r4, r0
   d517c:	9302      	str	r3, [sp, #8]
   d517e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5180:	ad03      	add	r5, sp, #12
   d5182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5184:	6833      	ldr	r3, [r6, #0]
   d5186:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5188:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d518a:	9300      	str	r3, [sp, #0]
   d518c:	4672      	mov	r2, lr
   d518e:	ab02      	add	r3, sp, #8
   d5190:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5192:	4620      	mov	r0, r4
   d5194:	47b8      	blx	r7
    flush(); // wait for send to complete
   d5196:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5198:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d519a:	69db      	ldr	r3, [r3, #28]
   d519c:	4620      	mov	r0, r4
   d519e:	4798      	blx	r3
    return result;
}
   d51a0:	4628      	mov	r0, r5
   d51a2:	b009      	add	sp, #36	; 0x24
   d51a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51a6:	bf00      	nop
   d51a8:	000d6704 	.word	0x000d6704

000d51ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d51ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d51ae:	7843      	ldrb	r3, [r0, #1]
   d51b0:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d51b2:	b08d      	sub	sp, #52	; 0x34
   d51b4:	4605      	mov	r5, r0
   d51b6:	460c      	mov	r4, r1
   d51b8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d51ba:	d101      	bne.n	d51c0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d51bc:	1d01      	adds	r1, r0, #4
   d51be:	e033      	b.n	d5228 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d51c0:	2b0a      	cmp	r3, #10
   d51c2:	d135      	bne.n	d5230 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d51c4:	2211      	movs	r2, #17
   d51c6:	2100      	movs	r1, #0
   d51c8:	a801      	add	r0, sp, #4
   d51ca:	f000 fe66 	bl	d5e9a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d51ce:	68ab      	ldr	r3, [r5, #8]
   d51d0:	b943      	cbnz	r3, d51e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d51d2:	68eb      	ldr	r3, [r5, #12]
   d51d4:	b933      	cbnz	r3, d51e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d51d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d51da:	692e      	ldr	r6, [r5, #16]
   d51dc:	f7ff f85a 	bl	d4294 <inet_htonl>
   d51e0:	4286      	cmp	r6, r0
   d51e2:	d01f      	beq.n	d5224 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d51e4:	f105 0308 	add.w	r3, r5, #8
   d51e8:	ae01      	add	r6, sp, #4
   d51ea:	f105 0e18 	add.w	lr, r5, #24
   d51ee:	6818      	ldr	r0, [r3, #0]
   d51f0:	6859      	ldr	r1, [r3, #4]
   d51f2:	4632      	mov	r2, r6
   d51f4:	c203      	stmia	r2!, {r0, r1}
   d51f6:	3308      	adds	r3, #8
   d51f8:	4573      	cmp	r3, lr
   d51fa:	4616      	mov	r6, r2
   d51fc:	d1f7      	bne.n	d51ee <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d51fe:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5200:	a901      	add	r1, sp, #4
   d5202:	a806      	add	r0, sp, #24
   d5204:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5206:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d520a:	f7ff fa9f 	bl	d474c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d520e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5210:	3404      	adds	r4, #4
   d5212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5214:	6833      	ldr	r3, [r6, #0]
   d5216:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d5218:	b157      	cbz	r7, d5230 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d521a:	8868      	ldrh	r0, [r5, #2]
   d521c:	f7ff f842 	bl	d42a4 <inet_ntohs>
   d5220:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5222:	e005      	b.n	d5230 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5224:	f105 0114 	add.w	r1, r5, #20
   d5228:	4620      	mov	r0, r4
   d522a:	f7ff fac4 	bl	d47b6 <_ZN9IPAddressaSEPKh>
   d522e:	e7f3      	b.n	d5218 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5230:	b00d      	add	sp, #52	; 0x34
   d5232:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5234 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5238:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d523a:	ab0e      	add	r3, sp, #56	; 0x38
   d523c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d523e:	4606      	mov	r6, r0
   d5240:	4617      	mov	r7, r2
   d5242:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d5244:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5248:	462a      	mov	r2, r5
   d524a:	4629      	mov	r1, r5
   d524c:	f7ff f842 	bl	d42d4 <netdb_getaddrinfo>
   d5250:	2800      	cmp	r0, #0
   d5252:	db1f      	blt.n	d5294 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5254:	9b01      	ldr	r3, [sp, #4]
   d5256:	b1fb      	cbz	r3, d5298 <_ZN3UDP11beginPacketEPKct+0x64>
   d5258:	695b      	ldr	r3, [r3, #20]
   d525a:	b1eb      	cbz	r3, d5298 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d525c:	a802      	add	r0, sp, #8
   d525e:	f7ff fa67 	bl	d4730 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5262:	9b01      	ldr	r3, [sp, #4]
   d5264:	462a      	mov	r2, r5
   d5266:	6958      	ldr	r0, [r3, #20]
   d5268:	a902      	add	r1, sp, #8
   d526a:	f7ff ff9f 	bl	d51ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d526e:	a802      	add	r0, sp, #8
   d5270:	f7ff fa7e 	bl	d4770 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5274:	b180      	cbz	r0, d5298 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d5276:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5278:	ad03      	add	r5, sp, #12
   d527a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d527e:	4b0b      	ldr	r3, [pc, #44]	; (d52ac <_ZN3UDP11beginPacketEPKct+0x78>)
   d5280:	9308      	str	r3, [sp, #32]
   d5282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5284:	ac09      	add	r4, sp, #36	; 0x24
   d5286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5288:	682b      	ldr	r3, [r5, #0]
   d528a:	7023      	strb	r3, [r4, #0]
   d528c:	463a      	mov	r2, r7
   d528e:	a908      	add	r1, sp, #32
   d5290:	4630      	mov	r0, r6
   d5292:	47c0      	blx	r8
   d5294:	4604      	mov	r4, r0
   d5296:	e001      	b.n	d529c <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d5298:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d529c:	9801      	ldr	r0, [sp, #4]
   d529e:	f7ff f811 	bl	d42c4 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d52a2:	4620      	mov	r0, r4
   d52a4:	b00e      	add	sp, #56	; 0x38
   d52a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d52aa:	bf00      	nop
   d52ac:	000d6704 	.word	0x000d6704

000d52b0 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d52b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d52b4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d52b8:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d52bc:	b08c      	sub	sp, #48	; 0x30
   d52be:	4605      	mov	r5, r0
   d52c0:	460c      	mov	r4, r1
   d52c2:	4617      	mov	r7, r2
   d52c4:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d52c6:	db00      	blt.n	d52ca <_ZN3UDP13receivePacketEPhjm+0x1a>
   d52c8:	b911      	cbnz	r1, d52d0 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d52ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d52ce:	e035      	b.n	d533c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d52d0:	f04f 0a1c 	mov.w	sl, #28
   d52d4:	ae05      	add	r6, sp, #20
   d52d6:	4652      	mov	r2, sl
   d52d8:	2100      	movs	r1, #0
   d52da:	4630      	mov	r0, r6
   d52dc:	f000 fddd 	bl	d5e9a <memset>
        socklen_t slen = sizeof(saddr);
   d52e0:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d52e4:	f1b9 0f00 	cmp.w	r9, #0
   d52e8:	d014      	beq.n	d5314 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d52ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52ee:	fbb9 f1f2 	udiv	r1, r9, r2
   d52f2:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d52f4:	fb02 9111 	mls	r1, r2, r1, r9
   d52f8:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d52fa:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d52fc:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d52fe:	9300      	str	r3, [sp, #0]
   d5300:	f241 0206 	movw	r2, #4102	; 0x1006
   d5304:	ab03      	add	r3, sp, #12
   d5306:	f640 71ff 	movw	r1, #4095	; 0xfff
   d530a:	4640      	mov	r0, r8
   d530c:	f7fe fff2 	bl	d42f4 <sock_setsockopt>
            if (ret) {
   d5310:	b108      	cbz	r0, d5316 <_ZN3UDP13receivePacketEPhjm+0x66>
   d5312:	e013      	b.n	d533c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d5314:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5316:	ab02      	add	r3, sp, #8
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	4621      	mov	r1, r4
   d531c:	4603      	mov	r3, r0
   d531e:	9600      	str	r6, [sp, #0]
   d5320:	463a      	mov	r2, r7
   d5322:	6968      	ldr	r0, [r5, #20]
   d5324:	f7fe fff6 	bl	d4314 <sock_recvfrom>
        if (ret >= 0) {
   d5328:	1e04      	subs	r4, r0, #0
   d532a:	db06      	blt.n	d533a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d532c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5330:	f105 011c 	add.w	r1, r5, #28
   d5334:	4630      	mov	r0, r6
   d5336:	f7ff ff39 	bl	d51ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d533a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d533c:	b00c      	add	sp, #48	; 0x30
   d533e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5342 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5342:	b538      	push	{r3, r4, r5, lr}
   d5344:	4605      	mov	r5, r0
   d5346:	4614      	mov	r4, r2
   d5348:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d534a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d534c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d534e:	d111      	bne.n	d5374 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5350:	231c      	movs	r3, #28
   d5352:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d5354:	230a      	movs	r3, #10
   d5356:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d5358:	f7fe ffac 	bl	d42b4 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d535c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d535e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5362:	1d2b      	adds	r3, r5, #4
   d5364:	3514      	adds	r5, #20
   d5366:	f853 2b04 	ldr.w	r2, [r3], #4
   d536a:	f844 2b04 	str.w	r2, [r4], #4
   d536e:	42ab      	cmp	r3, r5
   d5370:	d1f9      	bne.n	d5366 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d5372:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d5374:	2b04      	cmp	r3, #4
   d5376:	d10a      	bne.n	d538e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d5378:	2310      	movs	r3, #16
   d537a:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d537c:	2302      	movs	r3, #2
   d537e:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5380:	f7fe ff98 	bl	d42b4 <inet_htons>
   d5384:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d5386:	6868      	ldr	r0, [r5, #4]
   d5388:	f7fe ff84 	bl	d4294 <inet_htonl>
   d538c:	6060      	str	r0, [r4, #4]
   d538e:	bd38      	pop	{r3, r4, r5, pc}

000d5390 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5394:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d5396:	ac03      	add	r4, sp, #12
   d5398:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d539a:	4699      	mov	r9, r3
   d539c:	4606      	mov	r6, r0
   d539e:	460f      	mov	r7, r1
   d53a0:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d53a2:	2100      	movs	r1, #0
   d53a4:	462a      	mov	r2, r5
   d53a6:	4620      	mov	r0, r4
   d53a8:	f000 fd77 	bl	d5e9a <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d53ac:	4622      	mov	r2, r4
   d53ae:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d53b2:	4648      	mov	r0, r9
   d53b4:	f7ff ffc5 	bl	d5342 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d53b8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d53bc:	b143      	cbz	r3, d53d0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d53be:	e88d 0030 	stmia.w	sp, {r4, r5}
   d53c2:	2300      	movs	r3, #0
   d53c4:	4642      	mov	r2, r8
   d53c6:	4639      	mov	r1, r7
   d53c8:	6970      	ldr	r0, [r6, #20]
   d53ca:	f7fe ffab 	bl	d4324 <sock_sendto>
   d53ce:	e001      	b.n	d53d4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d53d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d53d4:	b00b      	add	sp, #44	; 0x2c
   d53d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d53da <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d53da:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53dc:	b091      	sub	sp, #68	; 0x44
   d53de:	460c      	mov	r4, r1
   d53e0:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d53e2:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d53e4:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d53e6:	a809      	add	r0, sp, #36	; 0x24
   d53e8:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d53ea:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d53ec:	f000 fd55 	bl	d5e9a <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d53f0:	aa09      	add	r2, sp, #36	; 0x24
   d53f2:	2100      	movs	r1, #0
   d53f4:	4620      	mov	r0, r4
   d53f6:	f7ff ffa4 	bl	d5342 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d53fa:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d53fe:	2b02      	cmp	r3, #2
   d5400:	d12e      	bne.n	d5460 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d5402:	2300      	movs	r3, #0
   d5404:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d5406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5408:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d540a:	b1dd      	cbz	r5, d5444 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d540c:	a902      	add	r1, sp, #8
   d540e:	4628      	mov	r0, r5
   d5410:	f7fe ff18 	bl	d4244 <if_get_by_index>
   d5414:	b9b0      	cbnz	r0, d5444 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d5416:	a910      	add	r1, sp, #64	; 0x40
   d5418:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d541c:	9802      	ldr	r0, [sp, #8]
   d541e:	f7fe ff19 	bl	d4254 <if_get_addrs>
   d5422:	b960      	cbnz	r0, d543e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5424:	9b03      	ldr	r3, [sp, #12]
   d5426:	b153      	cbz	r3, d543e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5428:	68da      	ldr	r2, [r3, #12]
   d542a:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d542c:	7851      	ldrb	r1, [r2, #1]
   d542e:	2902      	cmp	r1, #2
   d5430:	d103      	bne.n	d543a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d5432:	6852      	ldr	r2, [r2, #4]
   d5434:	b10a      	cbz	r2, d543a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d5436:	9205      	str	r2, [sp, #20]
   d5438:	e001      	b.n	d543e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d543a:	681b      	ldr	r3, [r3, #0]
   d543c:	e7f3      	b.n	d5426 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d543e:	9803      	ldr	r0, [sp, #12]
   d5440:	f7fe ff10 	bl	d4264 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d5444:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d5446:	f04f 0308 	mov.w	r3, #8
   d544a:	9300      	str	r3, [sp, #0]
   d544c:	bf18      	it	ne
   d544e:	2203      	movne	r2, #3
   d5450:	ab04      	add	r3, sp, #16
   d5452:	bf08      	it	eq
   d5454:	2204      	moveq	r2, #4
   d5456:	2100      	movs	r1, #0
   d5458:	4630      	mov	r0, r6
   d545a:	f7fe ff4b 	bl	d42f4 <sock_setsockopt>
   d545e:	e01e      	b.n	d549e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5460:	2b0a      	cmp	r3, #10
   d5462:	d11a      	bne.n	d549a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d5464:	ac04      	add	r4, sp, #16
   d5466:	2214      	movs	r2, #20
   d5468:	2100      	movs	r1, #0
   d546a:	4620      	mov	r0, r4
   d546c:	f000 fd15 	bl	d5e9a <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5470:	ab0b      	add	r3, sp, #44	; 0x2c
   d5472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5474:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d547a:	f04f 0314 	mov.w	r3, #20
   d547e:	9300      	str	r3, [sp, #0]
   d5480:	bf18      	it	ne
   d5482:	220c      	movne	r2, #12
   d5484:	4623      	mov	r3, r4
   d5486:	bf08      	it	eq
   d5488:	220d      	moveq	r2, #13
   d548a:	2129      	movs	r1, #41	; 0x29
   d548c:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d548e:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5490:	f7fe ff30 	bl	d42f4 <sock_setsockopt>
   d5494:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5498:	e001      	b.n	d549e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d549a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d549e:	b011      	add	sp, #68	; 0x44
   d54a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d54a4 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d54a4:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d54a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54aa:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d54ac:	4b0b      	ldr	r3, [pc, #44]	; (d54dc <_ZN3UDPC1Ev+0x38>)
   d54ae:	f103 0208 	add.w	r2, r3, #8
   d54b2:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d54b4:	2500      	movs	r5, #0
   d54b6:	6103      	str	r3, [r0, #16]
   d54b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d54bc:	4604      	mov	r4, r0
   d54be:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d54c0:	6002      	str	r2, [r0, #0]
   d54c2:	6143      	str	r3, [r0, #20]
   d54c4:	301c      	adds	r0, #28
   d54c6:	f7ff f933 	bl	d4730 <_ZN9IPAddressC1Ev>
   d54ca:	f44f 7300 	mov.w	r3, #512	; 0x200
   d54ce:	86e5      	strh	r5, [r4, #54]	; 0x36
   d54d0:	8725      	strh	r5, [r4, #56]	; 0x38
   d54d2:	63e5      	str	r5, [r4, #60]	; 0x3c
   d54d4:	6423      	str	r3, [r4, #64]	; 0x40
   d54d6:	6465      	str	r5, [r4, #68]	; 0x44
}
   d54d8:	4620      	mov	r0, r4
   d54da:	bd38      	pop	{r3, r4, r5, pc}
   d54dc:	000d68c0 	.word	0x000d68c0

000d54e0 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d54e0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d54e2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d54e6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d54e8:	b11b      	cbz	r3, d54f2 <_ZN3UDP13releaseBufferEv+0x12>
   d54ea:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d54ec:	b108      	cbz	r0, d54f2 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d54ee:	f7fe fdd6 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d54f2:	2300      	movs	r3, #0
   d54f4:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d54f6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d54fa:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d54fc:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d54fe:	8723      	strh	r3, [r4, #56]	; 0x38
   d5500:	bd10      	pop	{r4, pc}

000d5502 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5502:	b570      	push	{r4, r5, r6, lr}
   d5504:	4604      	mov	r4, r0
   d5506:	4616      	mov	r6, r2
   d5508:	460d      	mov	r5, r1
    releaseBuffer();
   d550a:	f7ff ffe9 	bl	d54e0 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d550e:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5510:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5512:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5514:	b93e      	cbnz	r6, d5526 <_ZN3UDP9setBufferEjPh+0x24>
   d5516:	b135      	cbz	r5, d5526 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5518:	4628      	mov	r0, r5
   d551a:	f7fe fdbe 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d551e:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d5520:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5522:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5528:	b103      	cbz	r3, d552c <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d552a:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d552c:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d552e:	3000      	adds	r0, #0
   d5530:	bf18      	it	ne
   d5532:	2001      	movne	r0, #1
   d5534:	bd70      	pop	{r4, r5, r6, pc}

000d5536 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5538:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d553a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d553c:	4605      	mov	r5, r0
   d553e:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5540:	b91a      	cbnz	r2, d554a <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d5542:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5544:	b109      	cbz	r1, d554a <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d5546:	f7ff ffdc 	bl	d5502 <_ZN3UDP9setBufferEjPh>
   d554a:	3404      	adds	r4, #4
   d554c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d554e:	f105 0620 	add.w	r6, r5, #32
   d5552:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5554:	6823      	ldr	r3, [r4, #0]
   d5556:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5558:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d555a:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d555c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d555e:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5560:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d5562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5564 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5564:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d5566:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5568:	4604      	mov	r4, r0
   d556a:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d556c:	b91a      	cbnz	r2, d5576 <_ZN3UDP11parsePacketEm+0x12>
   d556e:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5570:	b109      	cbz	r1, d5576 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d5572:	f7ff ffc6 	bl	d5502 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5576:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5578:	2200      	movs	r2, #0
   d557a:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d557c:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d557e:	b149      	cbz	r1, d5594 <_ZN3UDP11parsePacketEm+0x30>
   d5580:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5582:	b13a      	cbz	r2, d5594 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d5584:	6823      	ldr	r3, [r4, #0]
   d5586:	4620      	mov	r0, r4
   d5588:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d558a:	4633      	mov	r3, r6
   d558c:	47a8      	blx	r5
        if (result > 0) {
   d558e:	2800      	cmp	r0, #0
            _total = result;
   d5590:	bfc8      	it	gt
   d5592:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d5594:	6823      	ldr	r3, [r4, #0]
   d5596:	4620      	mov	r0, r4
   d5598:	691b      	ldr	r3, [r3, #16]
}
   d559a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d559e:	4718      	bx	r3

000d55a0 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d55a0:	b510      	push	{r4, lr}
   d55a2:	4b07      	ldr	r3, [pc, #28]	; (d55c0 <_ZN3UDPD1Ev+0x20>)
   d55a4:	f103 0208 	add.w	r2, r3, #8
   d55a8:	336c      	adds	r3, #108	; 0x6c
   d55aa:	4604      	mov	r4, r0
   d55ac:	6002      	str	r2, [r0, #0]
   d55ae:	6103      	str	r3, [r0, #16]
   d55b0:	f7ff fd6d 	bl	d508e <_ZN3UDP4stopEv>
   d55b4:	4620      	mov	r0, r4
   d55b6:	f7ff ff93 	bl	d54e0 <_ZN3UDP13releaseBufferEv>
   d55ba:	4620      	mov	r0, r4
   d55bc:	bd10      	pop	{r4, pc}
   d55be:	bf00      	nop
   d55c0:	000d68c0 	.word	0x000d68c0

000d55c4 <_ZN3UDPD0Ev>:
   d55c4:	b510      	push	{r4, lr}
   d55c6:	4604      	mov	r4, r0
   d55c8:	f7ff ffea 	bl	d55a0 <_ZN3UDPD1Ev>
   d55cc:	4620      	mov	r0, r4
   d55ce:	f7fe fd66 	bl	d409e <_ZdlPv>
   d55d2:	4620      	mov	r0, r4
   d55d4:	bd10      	pop	{r4, pc}

000d55d6 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d55d6:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d55d8:	6940      	ldr	r0, [r0, #20]
   d55da:	2800      	cmp	r0, #0
   d55dc:	db04      	blt.n	d55e8 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d55de:	2301      	movs	r3, #1
   d55e0:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d55e4:	f7ff bef9 	b.w	d53da <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d55e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d55ec:	4770      	bx	lr

000d55ee <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d55ee:	4770      	bx	lr

000d55f0 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55f0:	7441      	strb	r1, [r0, #17]
   d55f2:	4770      	bx	lr

000d55f4 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d55f4:	7c00      	ldrb	r0, [r0, #16]
   d55f6:	f7fe bedd 	b.w	d43b4 <HAL_USART_Available_Data_For_Write>

000d55fa <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d55fa:	7c00      	ldrb	r0, [r0, #16]
   d55fc:	f7fe beba 	b.w	d4374 <HAL_USART_Available_Data>

000d5600 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5600:	7c00      	ldrb	r0, [r0, #16]
   d5602:	f7fe bec7 	b.w	d4394 <HAL_USART_Peek_Data>

000d5606 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5606:	7c00      	ldrb	r0, [r0, #16]
   d5608:	f7fe bebc 	b.w	d4384 <HAL_USART_Read_Data>

000d560c <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d560c:	7c00      	ldrb	r0, [r0, #16]
   d560e:	f7fe bec9 	b.w	d43a4 <HAL_USART_Flush_Data>

000d5612 <_ZN11USARTSerialD0Ev>:
   d5612:	b510      	push	{r4, lr}
   d5614:	4604      	mov	r4, r0
   d5616:	f7fe fd42 	bl	d409e <_ZdlPv>
   d561a:	4620      	mov	r0, r4
   d561c:	bd10      	pop	{r4, pc}

000d561e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d561e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5620:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5622:	4604      	mov	r4, r0
   d5624:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5626:	b925      	cbnz	r5, d5632 <_ZN11USARTSerial5writeEh+0x14>
   d5628:	7c00      	ldrb	r0, [r0, #16]
   d562a:	f7fe fec3 	bl	d43b4 <HAL_USART_Available_Data_For_Write>
   d562e:	2800      	cmp	r0, #0
   d5630:	dd05      	ble.n	d563e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5632:	4631      	mov	r1, r6
   d5634:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d563a:	f7fe be93 	b.w	d4364 <HAL_USART_Write_Data>
  }
  return 0;
}
   d563e:	4628      	mov	r0, r5
   d5640:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5644 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5644:	b510      	push	{r4, lr}
   d5646:	4604      	mov	r4, r0
   d5648:	4608      	mov	r0, r1
   d564a:	4611      	mov	r1, r2
   d564c:	2200      	movs	r2, #0
   d564e:	6062      	str	r2, [r4, #4]
   d5650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5654:	60a2      	str	r2, [r4, #8]
   d5656:	4a05      	ldr	r2, [pc, #20]	; (d566c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5658:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d565a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d565c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d565e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5660:	461a      	mov	r2, r3
   d5662:	f7fe fe77 	bl	d4354 <HAL_USART_Init>
}
   d5666:	4620      	mov	r0, r4
   d5668:	bd10      	pop	{r4, pc}
   d566a:	bf00      	nop
   d566c:	000d6938 	.word	0x000d6938

000d5670 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5672:	4c19      	ldr	r4, [pc, #100]	; (d56d8 <_Z22__fetch_global_Serial1v+0x68>)
   d5674:	6825      	ldr	r5, [r4, #0]
   d5676:	b94d      	cbnz	r5, d568c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d5678:	2084      	movs	r0, #132	; 0x84
   d567a:	f7fe fd0c 	bl	d4096 <_Znwj>
   d567e:	4606      	mov	r6, r0
   d5680:	b118      	cbz	r0, d568a <_Z22__fetch_global_Serial1v+0x1a>
   d5682:	2284      	movs	r2, #132	; 0x84
   d5684:	4629      	mov	r1, r5
   d5686:	f000 fc08 	bl	d5e9a <memset>
   d568a:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d568c:	4d13      	ldr	r5, [pc, #76]	; (d56dc <_Z22__fetch_global_Serial1v+0x6c>)
   d568e:	682e      	ldr	r6, [r5, #0]
   d5690:	b94e      	cbnz	r6, d56a6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5692:	2084      	movs	r0, #132	; 0x84
   d5694:	f7fe fcff 	bl	d4096 <_Znwj>
   d5698:	4607      	mov	r7, r0
   d569a:	b118      	cbz	r0, d56a4 <_Z22__fetch_global_Serial1v+0x34>
   d569c:	2284      	movs	r2, #132	; 0x84
   d569e:	4631      	mov	r1, r6
   d56a0:	f000 fbfb 	bl	d5e9a <memset>
   d56a4:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d56a6:	4f0e      	ldr	r7, [pc, #56]	; (d56e0 <_Z22__fetch_global_Serial1v+0x70>)
   d56a8:	6839      	ldr	r1, [r7, #0]
   d56aa:	f011 0601 	ands.w	r6, r1, #1
   d56ae:	d111      	bne.n	d56d4 <_Z22__fetch_global_Serial1v+0x64>
   d56b0:	4638      	mov	r0, r7
   d56b2:	f7fe fcf8 	bl	d40a6 <__cxa_guard_acquire>
   d56b6:	b168      	cbz	r0, d56d4 <_Z22__fetch_global_Serial1v+0x64>
   d56b8:	6822      	ldr	r2, [r4, #0]
   d56ba:	682b      	ldr	r3, [r5, #0]
   d56bc:	4809      	ldr	r0, [pc, #36]	; (d56e4 <_Z22__fetch_global_Serial1v+0x74>)
   d56be:	4631      	mov	r1, r6
   d56c0:	f7ff ffc0 	bl	d5644 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d56c4:	4638      	mov	r0, r7
   d56c6:	f7fe fcf3 	bl	d40b0 <__cxa_guard_release>
   d56ca:	4a07      	ldr	r2, [pc, #28]	; (d56e8 <_Z22__fetch_global_Serial1v+0x78>)
   d56cc:	4907      	ldr	r1, [pc, #28]	; (d56ec <_Z22__fetch_global_Serial1v+0x7c>)
   d56ce:	4805      	ldr	r0, [pc, #20]	; (d56e4 <_Z22__fetch_global_Serial1v+0x74>)
   d56d0:	f000 f948 	bl	d5964 <__aeabi_atexit>
#endif
	return serial1;
}
   d56d4:	4803      	ldr	r0, [pc, #12]	; (d56e4 <_Z22__fetch_global_Serial1v+0x74>)
   d56d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d56d8:	2003e6dc 	.word	0x2003e6dc
   d56dc:	2003e6d4 	.word	0x2003e6d4
   d56e0:	2003e6d8 	.word	0x2003e6d8
   d56e4:	2003e6c0 	.word	0x2003e6c0
   d56e8:	2003e4b0 	.word	0x2003e4b0
   d56ec:	000d55ef 	.word	0x000d55ef

000d56f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d56f0:	7441      	strb	r1, [r0, #17]
   d56f2:	4770      	bx	lr

000d56f4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d56f4:	4770      	bx	lr

000d56f6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d56f6:	2100      	movs	r1, #0
   d56f8:	7c00      	ldrb	r0, [r0, #16]
   d56fa:	f7fe be83 	b.w	d4404 <HAL_USB_USART_Receive_Data>

000d56fe <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d56fe:	2101      	movs	r1, #1
   d5700:	7c00      	ldrb	r0, [r0, #16]
   d5702:	f7fe be7f 	b.w	d4404 <HAL_USB_USART_Receive_Data>

000d5706 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5706:	7c00      	ldrb	r0, [r0, #16]
   d5708:	f7fe be74 	b.w	d43f4 <HAL_USB_USART_Available_Data_For_Write>

000d570c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d570c:	7c00      	ldrb	r0, [r0, #16]
   d570e:	f7fe be69 	b.w	d43e4 <HAL_USB_USART_Available_Data>

000d5712 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5712:	b538      	push	{r3, r4, r5, lr}
   d5714:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5716:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5718:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d571a:	f7fe fe6b 	bl	d43f4 <HAL_USB_USART_Available_Data_For_Write>
   d571e:	2800      	cmp	r0, #0
   d5720:	dc01      	bgt.n	d5726 <_ZN9USBSerial5writeEh+0x14>
   d5722:	7c60      	ldrb	r0, [r4, #17]
   d5724:	b120      	cbz	r0, d5730 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5726:	4629      	mov	r1, r5
   d5728:	7c20      	ldrb	r0, [r4, #16]
   d572a:	f7fe fe73 	bl	d4414 <HAL_USB_USART_Send_Data>
    return 1;
   d572e:	2001      	movs	r0, #1
  }
  return 0;
}
   d5730:	bd38      	pop	{r3, r4, r5, pc}

000d5732 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5732:	7c00      	ldrb	r0, [r0, #16]
   d5734:	f7fe be76 	b.w	d4424 <HAL_USB_USART_Flush_Data>

000d5738 <_ZN9USBSerialD0Ev>:
   d5738:	b510      	push	{r4, lr}
   d573a:	4604      	mov	r4, r0
   d573c:	f7fe fcaf 	bl	d409e <_ZdlPv>
   d5740:	4620      	mov	r0, r4
   d5742:	bd10      	pop	{r4, pc}

000d5744 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5744:	b510      	push	{r4, lr}
   d5746:	4604      	mov	r4, r0
   d5748:	2300      	movs	r3, #0
   d574a:	6063      	str	r3, [r4, #4]
   d574c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5750:	60a3      	str	r3, [r4, #8]
   d5752:	4b05      	ldr	r3, [pc, #20]	; (d5768 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5754:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5756:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5758:	4608      	mov	r0, r1
{
  _serial = serial;
   d575a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d575c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d575e:	4611      	mov	r1, r2
   d5760:	f7fe fe30 	bl	d43c4 <HAL_USB_USART_Init>
}
   d5764:	4620      	mov	r0, r4
   d5766:	bd10      	pop	{r4, pc}
   d5768:	000d6968 	.word	0x000d6968

000d576c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d576c:	2200      	movs	r2, #0
   d576e:	7c00      	ldrb	r0, [r0, #16]
   d5770:	f7fe be30 	b.w	d43d4 <HAL_USB_USART_Begin>

000d5774 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5774:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5776:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5778:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d577a:	2100      	movs	r1, #0
   d577c:	f000 fb8d 	bl	d5e9a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5780:	4620      	mov	r0, r4
   d5782:	bd10      	pop	{r4, pc}

000d5784 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5784:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5786:	4d0e      	ldr	r5, [pc, #56]	; (d57c0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5788:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d578a:	a801      	add	r0, sp, #4
   d578c:	f7ff fff2 	bl	d5774 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5790:	6829      	ldr	r1, [r5, #0]
   d5792:	f011 0401 	ands.w	r4, r1, #1
   d5796:	d110      	bne.n	d57ba <_Z16_fetch_usbserialv+0x36>
   d5798:	4628      	mov	r0, r5
   d579a:	f7fe fc84 	bl	d40a6 <__cxa_guard_acquire>
   d579e:	b160      	cbz	r0, d57ba <_Z16_fetch_usbserialv+0x36>
   d57a0:	aa01      	add	r2, sp, #4
   d57a2:	4621      	mov	r1, r4
   d57a4:	4807      	ldr	r0, [pc, #28]	; (d57c4 <_Z16_fetch_usbserialv+0x40>)
   d57a6:	f7ff ffcd 	bl	d5744 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d57aa:	4628      	mov	r0, r5
   d57ac:	f7fe fc80 	bl	d40b0 <__cxa_guard_release>
   d57b0:	4a05      	ldr	r2, [pc, #20]	; (d57c8 <_Z16_fetch_usbserialv+0x44>)
   d57b2:	4906      	ldr	r1, [pc, #24]	; (d57cc <_Z16_fetch_usbserialv+0x48>)
   d57b4:	4803      	ldr	r0, [pc, #12]	; (d57c4 <_Z16_fetch_usbserialv+0x40>)
   d57b6:	f000 f8d5 	bl	d5964 <__aeabi_atexit>
	return _usbserial;
}
   d57ba:	4802      	ldr	r0, [pc, #8]	; (d57c4 <_Z16_fetch_usbserialv+0x40>)
   d57bc:	b007      	add	sp, #28
   d57be:	bd30      	pop	{r4, r5, pc}
   d57c0:	2003e6e0 	.word	0x2003e6e0
   d57c4:	2003e6e4 	.word	0x2003e6e4
   d57c8:	2003e4b0 	.word	0x2003e4b0
   d57cc:	000d56f5 	.word	0x000d56f5

000d57d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d57d0:	2200      	movs	r2, #0
   d57d2:	4611      	mov	r1, r2
   d57d4:	6840      	ldr	r0, [r0, #4]
   d57d6:	f7fe bec1 	b.w	d455c <network_ready>

000d57da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57da:	2200      	movs	r2, #0
   d57dc:	4611      	mov	r1, r2
   d57de:	6840      	ldr	r0, [r0, #4]
   d57e0:	f7fe bedc 	b.w	d459c <network_listening>

000d57e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57e4:	2200      	movs	r2, #0
   d57e6:	4611      	mov	r1, r2
   d57e8:	6840      	ldr	r0, [r0, #4]
   d57ea:	f7fe bee7 	b.w	d45bc <network_get_listen_timeout>

000d57ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57ee:	2200      	movs	r2, #0
   d57f0:	6840      	ldr	r0, [r0, #4]
   d57f2:	f7fe bedb 	b.w	d45ac <network_set_listen_timeout>

000d57f6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57f6:	2200      	movs	r2, #0
   d57f8:	f081 0101 	eor.w	r1, r1, #1
   d57fc:	6840      	ldr	r0, [r0, #4]
   d57fe:	f7fe bec5 	b.w	d458c <network_listen>

000d5802 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5802:	2300      	movs	r3, #0
   d5804:	461a      	mov	r2, r3
   d5806:	4619      	mov	r1, r3
   d5808:	6840      	ldr	r0, [r0, #4]
   d580a:	f7fe beb7 	b.w	d457c <network_off>

000d580e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d580e:	2300      	movs	r3, #0
   d5810:	461a      	mov	r2, r3
   d5812:	4619      	mov	r1, r3
   d5814:	6840      	ldr	r0, [r0, #4]
   d5816:	f7fe bea9 	b.w	d456c <network_on>

000d581a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d581a:	2200      	movs	r2, #0
   d581c:	4611      	mov	r1, r2
   d581e:	6840      	ldr	r0, [r0, #4]
   d5820:	f7fe be8c 	b.w	d453c <network_connecting>

000d5824 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5824:	2200      	movs	r2, #0
   d5826:	2102      	movs	r1, #2
   d5828:	6840      	ldr	r0, [r0, #4]
   d582a:	f7fe be8f 	b.w	d454c <network_disconnect>

000d582e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d582e:	2300      	movs	r3, #0
   d5830:	461a      	mov	r2, r3
   d5832:	6840      	ldr	r0, [r0, #4]
   d5834:	f7fe be7a 	b.w	d452c <network_connect>

000d5838 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5838:	4b02      	ldr	r3, [pc, #8]	; (d5844 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d583a:	2204      	movs	r2, #4
   d583c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d583e:	4a02      	ldr	r2, [pc, #8]	; (d5848 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5840:	601a      	str	r2, [r3, #0]
   d5842:	4770      	bx	lr
   d5844:	2003e6f8 	.word	0x2003e6f8
   d5848:	000d6998 	.word	0x000d6998

000d584c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d584c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d584e:	4b0c      	ldr	r3, [pc, #48]	; (d5880 <serialEventRun+0x34>)
   d5850:	b133      	cbz	r3, d5860 <serialEventRun+0x14>
   d5852:	f7ff ff97 	bl	d5784 <_Z16_fetch_usbserialv>
   d5856:	6803      	ldr	r3, [r0, #0]
   d5858:	691b      	ldr	r3, [r3, #16]
   d585a:	4798      	blx	r3
   d585c:	2800      	cmp	r0, #0
   d585e:	dc09      	bgt.n	d5874 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5860:	4b08      	ldr	r3, [pc, #32]	; (d5884 <serialEventRun+0x38>)
   d5862:	b163      	cbz	r3, d587e <serialEventRun+0x32>
   d5864:	f7ff ff04 	bl	d5670 <_Z22__fetch_global_Serial1v>
   d5868:	6803      	ldr	r3, [r0, #0]
   d586a:	691b      	ldr	r3, [r3, #16]
   d586c:	4798      	blx	r3
   d586e:	2800      	cmp	r0, #0
   d5870:	dc03      	bgt.n	d587a <serialEventRun+0x2e>
   d5872:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5874:	f3af 8000 	nop.w
   d5878:	e7f2      	b.n	d5860 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d587a:	f3af 8000 	nop.w
   d587e:	bd08      	pop	{r3, pc}
	...

000d5888 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5888:	b508      	push	{r3, lr}
	serialEventRun();
   d588a:	f7ff ffdf 	bl	d584c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d588e:	f7fe fca9 	bl	d41e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5892:	4b01      	ldr	r3, [pc, #4]	; (d5898 <_post_loop+0x10>)
   d5894:	6018      	str	r0, [r3, #0]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	2003e704 	.word	0x2003e704

000d589c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d589c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d589e:	2300      	movs	r3, #0
   d58a0:	9300      	str	r3, [sp, #0]
   d58a2:	461a      	mov	r2, r3
   d58a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58a8:	f7fe fe16 	bl	d44d8 <system_ctrl_set_result>
}
   d58ac:	b003      	add	sp, #12
   d58ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d58b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d58b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d58b6:	8843      	ldrh	r3, [r0, #2]
   d58b8:	2b0a      	cmp	r3, #10
   d58ba:	d008      	beq.n	d58ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d58bc:	2b50      	cmp	r3, #80	; 0x50
   d58be:	d109      	bne.n	d58d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d58c0:	4b09      	ldr	r3, [pc, #36]	; (d58e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d58c2:	681b      	ldr	r3, [r3, #0]
   d58c4:	b13b      	cbz	r3, d58d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d58c6:	b003      	add	sp, #12
   d58c8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d58cc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d58ce:	f7ff ffe5 	bl	d589c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d58d2:	e006      	b.n	d58e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d58d4:	2300      	movs	r3, #0
   d58d6:	9300      	str	r3, [sp, #0]
   d58d8:	461a      	mov	r2, r3
   d58da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58de:	f7fe fdfb 	bl	d44d8 <system_ctrl_set_result>
        break;
    }
}
   d58e2:	b003      	add	sp, #12
   d58e4:	f85d fb04 	ldr.w	pc, [sp], #4
   d58e8:	2003e700 	.word	0x2003e700

000d58ec <module_user_init_hook>:

void module_user_init_hook()
{
   d58ec:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d58ee:	f7fe fc71 	bl	d41d4 <HAL_RNG_GetRandomNumber>
   d58f2:	4604      	mov	r4, r0
    srand(seed);
   d58f4:	f000 fada 	bl	d5eac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d58f8:	4b07      	ldr	r3, [pc, #28]	; (d5918 <module_user_init_hook+0x2c>)
   d58fa:	b113      	cbz	r3, d5902 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d58fc:	4620      	mov	r0, r4
   d58fe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5902:	2100      	movs	r1, #0
   d5904:	4804      	ldr	r0, [pc, #16]	; (d5918 <module_user_init_hook+0x2c>)
   d5906:	f7fe fe09 	bl	d451c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d590a:	2100      	movs	r1, #0
   d590c:	4803      	ldr	r0, [pc, #12]	; (d591c <module_user_init_hook+0x30>)
}
   d590e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5912:	f7fe bdd7 	b.w	d44c4 <system_ctrl_set_app_request_handler>
   d5916:	bf00      	nop
   d5918:	00000000 	.word	0x00000000
   d591c:	000d58b5 	.word	0x000d58b5

000d5920 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5920:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5922:	4c0c      	ldr	r4, [pc, #48]	; (d5954 <_GLOBAL__sub_I_SPI+0x34>)
   d5924:	4e0c      	ldr	r6, [pc, #48]	; (d5958 <_GLOBAL__sub_I_SPI+0x38>)
   d5926:	4d0d      	ldr	r5, [pc, #52]	; (d595c <_GLOBAL__sub_I_SPI+0x3c>)
   d5928:	2100      	movs	r1, #0
   d592a:	4620      	mov	r0, r4
   d592c:	f7ff fa3c 	bl	d4da8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5930:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5932:	4c0b      	ldr	r4, [pc, #44]	; (d5960 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5934:	4632      	mov	r2, r6
   d5936:	4629      	mov	r1, r5
   d5938:	f000 f814 	bl	d5964 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d593c:	2101      	movs	r1, #1
   d593e:	4620      	mov	r0, r4
   d5940:	f7ff fa32 	bl	d4da8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5944:	4632      	mov	r2, r6
   d5946:	4629      	mov	r1, r5
   d5948:	4620      	mov	r0, r4
   d594a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d594e:	f000 b809 	b.w	d5964 <__aeabi_atexit>
   d5952:	bf00      	nop
   d5954:	2003e708 	.word	0x2003e708
   d5958:	2003e4b0 	.word	0x2003e4b0
   d595c:	000d4d99 	.word	0x000d4d99
   d5960:	2003e718 	.word	0x2003e718

000d5964 <__aeabi_atexit>:
   d5964:	460b      	mov	r3, r1
   d5966:	4601      	mov	r1, r0
   d5968:	4618      	mov	r0, r3
   d596a:	f000 b985 	b.w	d5c78 <__cxa_atexit>
	...

000d5970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5970:	4b24      	ldr	r3, [pc, #144]	; (d5a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5972:	681a      	ldr	r2, [r3, #0]
   d5974:	07d0      	lsls	r0, r2, #31
   d5976:	bf5c      	itt	pl
   d5978:	2201      	movpl	r2, #1
   d597a:	601a      	strpl	r2, [r3, #0]
   d597c:	4b22      	ldr	r3, [pc, #136]	; (d5a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d597e:	681a      	ldr	r2, [r3, #0]
   d5980:	07d1      	lsls	r1, r2, #31
   d5982:	bf5c      	itt	pl
   d5984:	2201      	movpl	r2, #1
   d5986:	601a      	strpl	r2, [r3, #0]
   d5988:	4b20      	ldr	r3, [pc, #128]	; (d5a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d598a:	681a      	ldr	r2, [r3, #0]
   d598c:	07d2      	lsls	r2, r2, #31
   d598e:	bf5c      	itt	pl
   d5990:	2201      	movpl	r2, #1
   d5992:	601a      	strpl	r2, [r3, #0]
   d5994:	4b1e      	ldr	r3, [pc, #120]	; (d5a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5996:	681a      	ldr	r2, [r3, #0]
   d5998:	07d0      	lsls	r0, r2, #31
   d599a:	bf5c      	itt	pl
   d599c:	2201      	movpl	r2, #1
   d599e:	601a      	strpl	r2, [r3, #0]
   d59a0:	4b1c      	ldr	r3, [pc, #112]	; (d5a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d59a2:	681a      	ldr	r2, [r3, #0]
   d59a4:	07d1      	lsls	r1, r2, #31
   d59a6:	bf5c      	itt	pl
   d59a8:	2201      	movpl	r2, #1
   d59aa:	601a      	strpl	r2, [r3, #0]
   d59ac:	4b1a      	ldr	r3, [pc, #104]	; (d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d59ae:	681a      	ldr	r2, [r3, #0]
   d59b0:	07d2      	lsls	r2, r2, #31
   d59b2:	bf5c      	itt	pl
   d59b4:	2201      	movpl	r2, #1
   d59b6:	601a      	strpl	r2, [r3, #0]
   d59b8:	4b18      	ldr	r3, [pc, #96]	; (d5a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d59ba:	681a      	ldr	r2, [r3, #0]
   d59bc:	07d0      	lsls	r0, r2, #31
   d59be:	bf5c      	itt	pl
   d59c0:	2201      	movpl	r2, #1
   d59c2:	601a      	strpl	r2, [r3, #0]
   d59c4:	4b16      	ldr	r3, [pc, #88]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d59c6:	681a      	ldr	r2, [r3, #0]
   d59c8:	07d1      	lsls	r1, r2, #31
   d59ca:	bf5c      	itt	pl
   d59cc:	2201      	movpl	r2, #1
   d59ce:	601a      	strpl	r2, [r3, #0]
   d59d0:	4b14      	ldr	r3, [pc, #80]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d59d2:	681a      	ldr	r2, [r3, #0]
   d59d4:	07d2      	lsls	r2, r2, #31
   d59d6:	bf5c      	itt	pl
   d59d8:	2201      	movpl	r2, #1
   d59da:	601a      	strpl	r2, [r3, #0]
   d59dc:	4b12      	ldr	r3, [pc, #72]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d59de:	681a      	ldr	r2, [r3, #0]
   d59e0:	07d0      	lsls	r0, r2, #31
   d59e2:	bf5c      	itt	pl
   d59e4:	2201      	movpl	r2, #1
   d59e6:	601a      	strpl	r2, [r3, #0]
   d59e8:	4b10      	ldr	r3, [pc, #64]	; (d5a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d59ea:	681a      	ldr	r2, [r3, #0]
   d59ec:	07d1      	lsls	r1, r2, #31
   d59ee:	bf5c      	itt	pl
   d59f0:	2201      	movpl	r2, #1
   d59f2:	601a      	strpl	r2, [r3, #0]
   d59f4:	4b0e      	ldr	r3, [pc, #56]	; (d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d59f6:	681a      	ldr	r2, [r3, #0]
   d59f8:	07d2      	lsls	r2, r2, #31
   d59fa:	bf5c      	itt	pl
   d59fc:	2201      	movpl	r2, #1
   d59fe:	601a      	strpl	r2, [r3, #0]
   d5a00:	4770      	bx	lr
   d5a02:	bf00      	nop
   d5a04:	2003e754 	.word	0x2003e754
   d5a08:	2003e750 	.word	0x2003e750
   d5a0c:	2003e74c 	.word	0x2003e74c
   d5a10:	2003e748 	.word	0x2003e748
   d5a14:	2003e744 	.word	0x2003e744
   d5a18:	2003e740 	.word	0x2003e740
   d5a1c:	2003e73c 	.word	0x2003e73c
   d5a20:	2003e738 	.word	0x2003e738
   d5a24:	2003e734 	.word	0x2003e734
   d5a28:	2003e730 	.word	0x2003e730
   d5a2c:	2003e72c 	.word	0x2003e72c
   d5a30:	2003e728 	.word	0x2003e728

000d5a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a34:	4b18      	ldr	r3, [pc, #96]	; (d5a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a36:	681a      	ldr	r2, [r3, #0]
   d5a38:	07d1      	lsls	r1, r2, #31
   d5a3a:	bf5c      	itt	pl
   d5a3c:	2201      	movpl	r2, #1
   d5a3e:	601a      	strpl	r2, [r3, #0]
   d5a40:	4b16      	ldr	r3, [pc, #88]	; (d5a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a42:	681a      	ldr	r2, [r3, #0]
   d5a44:	07d2      	lsls	r2, r2, #31
   d5a46:	bf5c      	itt	pl
   d5a48:	2201      	movpl	r2, #1
   d5a4a:	601a      	strpl	r2, [r3, #0]
   d5a4c:	4b14      	ldr	r3, [pc, #80]	; (d5aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a4e:	681a      	ldr	r2, [r3, #0]
   d5a50:	07d0      	lsls	r0, r2, #31
   d5a52:	bf5c      	itt	pl
   d5a54:	2201      	movpl	r2, #1
   d5a56:	601a      	strpl	r2, [r3, #0]
   d5a58:	4b12      	ldr	r3, [pc, #72]	; (d5aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a5a:	681a      	ldr	r2, [r3, #0]
   d5a5c:	07d1      	lsls	r1, r2, #31
   d5a5e:	bf5c      	itt	pl
   d5a60:	2201      	movpl	r2, #1
   d5a62:	601a      	strpl	r2, [r3, #0]
   d5a64:	4b10      	ldr	r3, [pc, #64]	; (d5aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a66:	681a      	ldr	r2, [r3, #0]
   d5a68:	07d2      	lsls	r2, r2, #31
   d5a6a:	bf5c      	itt	pl
   d5a6c:	2201      	movpl	r2, #1
   d5a6e:	601a      	strpl	r2, [r3, #0]
   d5a70:	4b0e      	ldr	r3, [pc, #56]	; (d5aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a72:	681a      	ldr	r2, [r3, #0]
   d5a74:	07d0      	lsls	r0, r2, #31
   d5a76:	bf5c      	itt	pl
   d5a78:	2201      	movpl	r2, #1
   d5a7a:	601a      	strpl	r2, [r3, #0]
   d5a7c:	4b0c      	ldr	r3, [pc, #48]	; (d5ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a7e:	681a      	ldr	r2, [r3, #0]
   d5a80:	07d1      	lsls	r1, r2, #31
   d5a82:	bf5c      	itt	pl
   d5a84:	2201      	movpl	r2, #1
   d5a86:	601a      	strpl	r2, [r3, #0]
   d5a88:	4b0a      	ldr	r3, [pc, #40]	; (d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a8a:	681a      	ldr	r2, [r3, #0]
   d5a8c:	07d2      	lsls	r2, r2, #31
   d5a8e:	bf5c      	itt	pl
   d5a90:	2201      	movpl	r2, #1
   d5a92:	601a      	strpl	r2, [r3, #0]
   d5a94:	4770      	bx	lr
   d5a96:	bf00      	nop
   d5a98:	2003e774 	.word	0x2003e774
   d5a9c:	2003e770 	.word	0x2003e770
   d5aa0:	2003e76c 	.word	0x2003e76c
   d5aa4:	2003e768 	.word	0x2003e768
   d5aa8:	2003e764 	.word	0x2003e764
   d5aac:	2003e760 	.word	0x2003e760
   d5ab0:	2003e75c 	.word	0x2003e75c
   d5ab4:	2003e758 	.word	0x2003e758

000d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ab8:	4b18      	ldr	r3, [pc, #96]	; (d5b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5aba:	681a      	ldr	r2, [r3, #0]
   d5abc:	07d1      	lsls	r1, r2, #31
   d5abe:	bf5c      	itt	pl
   d5ac0:	2201      	movpl	r2, #1
   d5ac2:	601a      	strpl	r2, [r3, #0]
   d5ac4:	4b16      	ldr	r3, [pc, #88]	; (d5b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5ac6:	681a      	ldr	r2, [r3, #0]
   d5ac8:	07d2      	lsls	r2, r2, #31
   d5aca:	bf5c      	itt	pl
   d5acc:	2201      	movpl	r2, #1
   d5ace:	601a      	strpl	r2, [r3, #0]
   d5ad0:	4b14      	ldr	r3, [pc, #80]	; (d5b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5ad2:	681a      	ldr	r2, [r3, #0]
   d5ad4:	07d0      	lsls	r0, r2, #31
   d5ad6:	bf5c      	itt	pl
   d5ad8:	2201      	movpl	r2, #1
   d5ada:	601a      	strpl	r2, [r3, #0]
   d5adc:	4b12      	ldr	r3, [pc, #72]	; (d5b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5ade:	681a      	ldr	r2, [r3, #0]
   d5ae0:	07d1      	lsls	r1, r2, #31
   d5ae2:	bf5c      	itt	pl
   d5ae4:	2201      	movpl	r2, #1
   d5ae6:	601a      	strpl	r2, [r3, #0]
   d5ae8:	4b10      	ldr	r3, [pc, #64]	; (d5b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5aea:	681a      	ldr	r2, [r3, #0]
   d5aec:	07d2      	lsls	r2, r2, #31
   d5aee:	bf5c      	itt	pl
   d5af0:	2201      	movpl	r2, #1
   d5af2:	601a      	strpl	r2, [r3, #0]
   d5af4:	4b0e      	ldr	r3, [pc, #56]	; (d5b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5af6:	681a      	ldr	r2, [r3, #0]
   d5af8:	07d0      	lsls	r0, r2, #31
   d5afa:	bf5c      	itt	pl
   d5afc:	2201      	movpl	r2, #1
   d5afe:	601a      	strpl	r2, [r3, #0]
   d5b00:	4b0c      	ldr	r3, [pc, #48]	; (d5b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b02:	681a      	ldr	r2, [r3, #0]
   d5b04:	07d1      	lsls	r1, r2, #31
   d5b06:	bf5c      	itt	pl
   d5b08:	2201      	movpl	r2, #1
   d5b0a:	601a      	strpl	r2, [r3, #0]
   d5b0c:	4b0a      	ldr	r3, [pc, #40]	; (d5b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b0e:	681a      	ldr	r2, [r3, #0]
   d5b10:	07d2      	lsls	r2, r2, #31
   d5b12:	bf5c      	itt	pl
   d5b14:	2201      	movpl	r2, #1
   d5b16:	601a      	strpl	r2, [r3, #0]
   d5b18:	4770      	bx	lr
   d5b1a:	bf00      	nop
   d5b1c:	2003e794 	.word	0x2003e794
   d5b20:	2003e790 	.word	0x2003e790
   d5b24:	2003e78c 	.word	0x2003e78c
   d5b28:	2003e788 	.word	0x2003e788
   d5b2c:	2003e784 	.word	0x2003e784
   d5b30:	2003e780 	.word	0x2003e780
   d5b34:	2003e77c 	.word	0x2003e77c
   d5b38:	2003e778 	.word	0x2003e778

000d5b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b3c:	4b24      	ldr	r3, [pc, #144]	; (d5bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b3e:	681a      	ldr	r2, [r3, #0]
   d5b40:	07d0      	lsls	r0, r2, #31
   d5b42:	bf5c      	itt	pl
   d5b44:	2201      	movpl	r2, #1
   d5b46:	601a      	strpl	r2, [r3, #0]
   d5b48:	4b22      	ldr	r3, [pc, #136]	; (d5bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5b4a:	681a      	ldr	r2, [r3, #0]
   d5b4c:	07d1      	lsls	r1, r2, #31
   d5b4e:	bf5c      	itt	pl
   d5b50:	2201      	movpl	r2, #1
   d5b52:	601a      	strpl	r2, [r3, #0]
   d5b54:	4b20      	ldr	r3, [pc, #128]	; (d5bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5b56:	681a      	ldr	r2, [r3, #0]
   d5b58:	07d2      	lsls	r2, r2, #31
   d5b5a:	bf5c      	itt	pl
   d5b5c:	2201      	movpl	r2, #1
   d5b5e:	601a      	strpl	r2, [r3, #0]
   d5b60:	4b1e      	ldr	r3, [pc, #120]	; (d5bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5b62:	681a      	ldr	r2, [r3, #0]
   d5b64:	07d0      	lsls	r0, r2, #31
   d5b66:	bf5c      	itt	pl
   d5b68:	2201      	movpl	r2, #1
   d5b6a:	601a      	strpl	r2, [r3, #0]
   d5b6c:	4b1c      	ldr	r3, [pc, #112]	; (d5be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5b6e:	681a      	ldr	r2, [r3, #0]
   d5b70:	07d1      	lsls	r1, r2, #31
   d5b72:	bf5c      	itt	pl
   d5b74:	2201      	movpl	r2, #1
   d5b76:	601a      	strpl	r2, [r3, #0]
   d5b78:	4b1a      	ldr	r3, [pc, #104]	; (d5be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5b7a:	681a      	ldr	r2, [r3, #0]
   d5b7c:	07d2      	lsls	r2, r2, #31
   d5b7e:	bf5c      	itt	pl
   d5b80:	2201      	movpl	r2, #1
   d5b82:	601a      	strpl	r2, [r3, #0]
   d5b84:	4b18      	ldr	r3, [pc, #96]	; (d5be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5b86:	681a      	ldr	r2, [r3, #0]
   d5b88:	07d0      	lsls	r0, r2, #31
   d5b8a:	bf5c      	itt	pl
   d5b8c:	2201      	movpl	r2, #1
   d5b8e:	601a      	strpl	r2, [r3, #0]
   d5b90:	4b16      	ldr	r3, [pc, #88]	; (d5bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5b92:	681a      	ldr	r2, [r3, #0]
   d5b94:	07d1      	lsls	r1, r2, #31
   d5b96:	bf5c      	itt	pl
   d5b98:	2201      	movpl	r2, #1
   d5b9a:	601a      	strpl	r2, [r3, #0]
   d5b9c:	4b14      	ldr	r3, [pc, #80]	; (d5bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5b9e:	681a      	ldr	r2, [r3, #0]
   d5ba0:	07d2      	lsls	r2, r2, #31
   d5ba2:	bf5c      	itt	pl
   d5ba4:	2201      	movpl	r2, #1
   d5ba6:	601a      	strpl	r2, [r3, #0]
   d5ba8:	4b12      	ldr	r3, [pc, #72]	; (d5bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d0      	lsls	r0, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b10      	ldr	r3, [pc, #64]	; (d5bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d1      	lsls	r1, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4b0e      	ldr	r3, [pc, #56]	; (d5bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5bc2:	681a      	ldr	r2, [r3, #0]
   d5bc4:	07d2      	lsls	r2, r2, #31
   d5bc6:	bf5c      	itt	pl
   d5bc8:	2201      	movpl	r2, #1
   d5bca:	601a      	strpl	r2, [r3, #0]
   d5bcc:	4770      	bx	lr
   d5bce:	bf00      	nop
   d5bd0:	2003e7c4 	.word	0x2003e7c4
   d5bd4:	2003e7c0 	.word	0x2003e7c0
   d5bd8:	2003e7bc 	.word	0x2003e7bc
   d5bdc:	2003e7b8 	.word	0x2003e7b8
   d5be0:	2003e7b4 	.word	0x2003e7b4
   d5be4:	2003e7b0 	.word	0x2003e7b0
   d5be8:	2003e7ac 	.word	0x2003e7ac
   d5bec:	2003e7a8 	.word	0x2003e7a8
   d5bf0:	2003e7a4 	.word	0x2003e7a4
   d5bf4:	2003e7a0 	.word	0x2003e7a0
   d5bf8:	2003e79c 	.word	0x2003e79c
   d5bfc:	2003e798 	.word	0x2003e798

000d5c00 <asctime>:
   d5c00:	4b09      	ldr	r3, [pc, #36]	; (d5c28 <asctime+0x28>)
   d5c02:	b570      	push	{r4, r5, r6, lr}
   d5c04:	681c      	ldr	r4, [r3, #0]
   d5c06:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d5c08:	4606      	mov	r6, r0
   d5c0a:	b93d      	cbnz	r5, d5c1c <asctime+0x1c>
   d5c0c:	201a      	movs	r0, #26
   d5c0e:	f7fe fcdd 	bl	d45cc <malloc>
   d5c12:	221a      	movs	r2, #26
   d5c14:	6420      	str	r0, [r4, #64]	; 0x40
   d5c16:	4629      	mov	r1, r5
   d5c18:	f000 f93f 	bl	d5e9a <memset>
   d5c1c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d5c1e:	4630      	mov	r0, r6
   d5c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5c24:	f000 b802 	b.w	d5c2c <asctime_r>
   d5c28:	2003e460 	.word	0x2003e460

000d5c2c <asctime_r>:
   d5c2c:	b510      	push	{r4, lr}
   d5c2e:	460c      	mov	r4, r1
   d5c30:	6941      	ldr	r1, [r0, #20]
   d5c32:	6903      	ldr	r3, [r0, #16]
   d5c34:	6982      	ldr	r2, [r0, #24]
   d5c36:	b086      	sub	sp, #24
   d5c38:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d5c3c:	9104      	str	r1, [sp, #16]
   d5c3e:	6801      	ldr	r1, [r0, #0]
   d5c40:	9103      	str	r1, [sp, #12]
   d5c42:	6841      	ldr	r1, [r0, #4]
   d5c44:	9102      	str	r1, [sp, #8]
   d5c46:	6881      	ldr	r1, [r0, #8]
   d5c48:	9101      	str	r1, [sp, #4]
   d5c4a:	68c1      	ldr	r1, [r0, #12]
   d5c4c:	9100      	str	r1, [sp, #0]
   d5c4e:	4907      	ldr	r1, [pc, #28]	; (d5c6c <asctime_r+0x40>)
   d5c50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5c54:	440b      	add	r3, r1
   d5c56:	4906      	ldr	r1, [pc, #24]	; (d5c70 <asctime_r+0x44>)
   d5c58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d5c5c:	440a      	add	r2, r1
   d5c5e:	4620      	mov	r0, r4
   d5c60:	4904      	ldr	r1, [pc, #16]	; (d5c74 <asctime_r+0x48>)
   d5c62:	f7fe fccb 	bl	d45fc <siprintf>
   d5c66:	4620      	mov	r0, r4
   d5c68:	b006      	add	sp, #24
   d5c6a:	bd10      	pop	{r4, pc}
   d5c6c:	000d69d9 	.word	0x000d69d9
   d5c70:	000d69c4 	.word	0x000d69c4
   d5c74:	000d69fd 	.word	0x000d69fd

000d5c78 <__cxa_atexit>:
   d5c78:	b510      	push	{r4, lr}
   d5c7a:	4c05      	ldr	r4, [pc, #20]	; (d5c90 <__cxa_atexit+0x18>)
   d5c7c:	4613      	mov	r3, r2
   d5c7e:	b12c      	cbz	r4, d5c8c <__cxa_atexit+0x14>
   d5c80:	460a      	mov	r2, r1
   d5c82:	4601      	mov	r1, r0
   d5c84:	2002      	movs	r0, #2
   d5c86:	f3af 8000 	nop.w
   d5c8a:	bd10      	pop	{r4, pc}
   d5c8c:	4620      	mov	r0, r4
   d5c8e:	bd10      	pop	{r4, pc}
   d5c90:	00000000 	.word	0x00000000

000d5c94 <localtime>:
   d5c94:	b538      	push	{r3, r4, r5, lr}
   d5c96:	4b07      	ldr	r3, [pc, #28]	; (d5cb4 <localtime+0x20>)
   d5c98:	681c      	ldr	r4, [r3, #0]
   d5c9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5c9c:	4605      	mov	r5, r0
   d5c9e:	b91b      	cbnz	r3, d5ca8 <localtime+0x14>
   d5ca0:	2024      	movs	r0, #36	; 0x24
   d5ca2:	f7fe fc93 	bl	d45cc <malloc>
   d5ca6:	63e0      	str	r0, [r4, #60]	; 0x3c
   d5ca8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5caa:	4628      	mov	r0, r5
   d5cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5cb0:	f000 b802 	b.w	d5cb8 <localtime_r>
   d5cb4:	2003e460 	.word	0x2003e460

000d5cb8 <localtime_r>:
   d5cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5cbc:	460c      	mov	r4, r1
   d5cbe:	4680      	mov	r8, r0
   d5cc0:	f000 fc48 	bl	d6554 <__gettzinfo>
   d5cc4:	4621      	mov	r1, r4
   d5cc6:	4607      	mov	r7, r0
   d5cc8:	4640      	mov	r0, r8
   d5cca:	f000 fc47 	bl	d655c <gmtime_r>
   d5cce:	6946      	ldr	r6, [r0, #20]
   d5cd0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d5cd4:	07b3      	lsls	r3, r6, #30
   d5cd6:	4604      	mov	r4, r0
   d5cd8:	d105      	bne.n	d5ce6 <localtime_r+0x2e>
   d5cda:	2264      	movs	r2, #100	; 0x64
   d5cdc:	fb96 f3f2 	sdiv	r3, r6, r2
   d5ce0:	fb02 6313 	mls	r3, r2, r3, r6
   d5ce4:	b94b      	cbnz	r3, d5cfa <localtime_r+0x42>
   d5ce6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d5cea:	fb96 f3f5 	sdiv	r3, r6, r5
   d5cee:	fb05 6513 	mls	r5, r5, r3, r6
   d5cf2:	fab5 f385 	clz	r3, r5
   d5cf6:	095b      	lsrs	r3, r3, #5
   d5cf8:	e000      	b.n	d5cfc <localtime_r+0x44>
   d5cfa:	2301      	movs	r3, #1
   d5cfc:	4a5f      	ldr	r2, [pc, #380]	; (d5e7c <localtime_r+0x1c4>)
   d5cfe:	2530      	movs	r5, #48	; 0x30
   d5d00:	fb05 2503 	mla	r5, r5, r3, r2
   d5d04:	f000 fa5a 	bl	d61bc <__tz_lock>
   d5d08:	f000 fa5a 	bl	d61c0 <_tzset_unlocked>
   d5d0c:	4b5c      	ldr	r3, [pc, #368]	; (d5e80 <localtime_r+0x1c8>)
   d5d0e:	681b      	ldr	r3, [r3, #0]
   d5d10:	b1f3      	cbz	r3, d5d50 <localtime_r+0x98>
   d5d12:	687b      	ldr	r3, [r7, #4]
   d5d14:	429e      	cmp	r6, r3
   d5d16:	d105      	bne.n	d5d24 <localtime_r+0x6c>
   d5d18:	6839      	ldr	r1, [r7, #0]
   d5d1a:	f8d8 3000 	ldr.w	r3, [r8]
   d5d1e:	69fa      	ldr	r2, [r7, #28]
   d5d20:	b941      	cbnz	r1, d5d34 <localtime_r+0x7c>
   d5d22:	e00a      	b.n	d5d3a <localtime_r+0x82>
   d5d24:	4630      	mov	r0, r6
   d5d26:	f000 f9a1 	bl	d606c <__tzcalc_limits>
   d5d2a:	2800      	cmp	r0, #0
   d5d2c:	d1f4      	bne.n	d5d18 <localtime_r+0x60>
   d5d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5d32:	e00d      	b.n	d5d50 <localtime_r+0x98>
   d5d34:	4293      	cmp	r3, r2
   d5d36:	db08      	blt.n	d5d4a <localtime_r+0x92>
   d5d38:	e001      	b.n	d5d3e <localtime_r+0x86>
   d5d3a:	4293      	cmp	r3, r2
   d5d3c:	da07      	bge.n	d5d4e <localtime_r+0x96>
   d5d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d5d40:	4293      	cmp	r3, r2
   d5d42:	bfac      	ite	ge
   d5d44:	2300      	movge	r3, #0
   d5d46:	2301      	movlt	r3, #1
   d5d48:	e002      	b.n	d5d50 <localtime_r+0x98>
   d5d4a:	2300      	movs	r3, #0
   d5d4c:	e000      	b.n	d5d50 <localtime_r+0x98>
   d5d4e:	2301      	movs	r3, #1
   d5d50:	6223      	str	r3, [r4, #32]
   d5d52:	6a23      	ldr	r3, [r4, #32]
   d5d54:	2b01      	cmp	r3, #1
   d5d56:	bf0c      	ite	eq
   d5d58:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d5d5a:	6a39      	ldrne	r1, [r7, #32]
   d5d5c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d5d60:	203c      	movs	r0, #60	; 0x3c
   d5d62:	fb91 f6f3 	sdiv	r6, r1, r3
   d5d66:	fb03 1316 	mls	r3, r3, r6, r1
   d5d6a:	6861      	ldr	r1, [r4, #4]
   d5d6c:	fb93 f2f0 	sdiv	r2, r3, r0
   d5d70:	fb00 3012 	mls	r0, r0, r2, r3
   d5d74:	6823      	ldr	r3, [r4, #0]
   d5d76:	1a89      	subs	r1, r1, r2
   d5d78:	68a2      	ldr	r2, [r4, #8]
   d5d7a:	6061      	str	r1, [r4, #4]
   d5d7c:	1a1b      	subs	r3, r3, r0
   d5d7e:	1b92      	subs	r2, r2, r6
   d5d80:	2b3b      	cmp	r3, #59	; 0x3b
   d5d82:	6023      	str	r3, [r4, #0]
   d5d84:	60a2      	str	r2, [r4, #8]
   d5d86:	dd03      	ble.n	d5d90 <localtime_r+0xd8>
   d5d88:	3101      	adds	r1, #1
   d5d8a:	6061      	str	r1, [r4, #4]
   d5d8c:	3b3c      	subs	r3, #60	; 0x3c
   d5d8e:	e004      	b.n	d5d9a <localtime_r+0xe2>
   d5d90:	2b00      	cmp	r3, #0
   d5d92:	da03      	bge.n	d5d9c <localtime_r+0xe4>
   d5d94:	3901      	subs	r1, #1
   d5d96:	6061      	str	r1, [r4, #4]
   d5d98:	333c      	adds	r3, #60	; 0x3c
   d5d9a:	6023      	str	r3, [r4, #0]
   d5d9c:	6863      	ldr	r3, [r4, #4]
   d5d9e:	2b3b      	cmp	r3, #59	; 0x3b
   d5da0:	dd03      	ble.n	d5daa <localtime_r+0xf2>
   d5da2:	3201      	adds	r2, #1
   d5da4:	60a2      	str	r2, [r4, #8]
   d5da6:	3b3c      	subs	r3, #60	; 0x3c
   d5da8:	e004      	b.n	d5db4 <localtime_r+0xfc>
   d5daa:	2b00      	cmp	r3, #0
   d5dac:	da03      	bge.n	d5db6 <localtime_r+0xfe>
   d5dae:	3a01      	subs	r2, #1
   d5db0:	60a2      	str	r2, [r4, #8]
   d5db2:	333c      	adds	r3, #60	; 0x3c
   d5db4:	6063      	str	r3, [r4, #4]
   d5db6:	68a3      	ldr	r3, [r4, #8]
   d5db8:	2b17      	cmp	r3, #23
   d5dba:	dd22      	ble.n	d5e02 <localtime_r+0x14a>
   d5dbc:	69e2      	ldr	r2, [r4, #28]
   d5dbe:	3201      	adds	r2, #1
   d5dc0:	61e2      	str	r2, [r4, #28]
   d5dc2:	69a2      	ldr	r2, [r4, #24]
   d5dc4:	3201      	adds	r2, #1
   d5dc6:	2a06      	cmp	r2, #6
   d5dc8:	bfc8      	it	gt
   d5dca:	2200      	movgt	r2, #0
   d5dcc:	61a2      	str	r2, [r4, #24]
   d5dce:	68e2      	ldr	r2, [r4, #12]
   d5dd0:	3b18      	subs	r3, #24
   d5dd2:	3201      	adds	r2, #1
   d5dd4:	60a3      	str	r3, [r4, #8]
   d5dd6:	6923      	ldr	r3, [r4, #16]
   d5dd8:	60e2      	str	r2, [r4, #12]
   d5dda:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d5dde:	428a      	cmp	r2, r1
   d5de0:	dd46      	ble.n	d5e70 <localtime_r+0x1b8>
   d5de2:	3301      	adds	r3, #1
   d5de4:	2b0c      	cmp	r3, #12
   d5de6:	bf0c      	ite	eq
   d5de8:	6963      	ldreq	r3, [r4, #20]
   d5dea:	6123      	strne	r3, [r4, #16]
   d5dec:	eba2 0201 	sub.w	r2, r2, r1
   d5df0:	60e2      	str	r2, [r4, #12]
   d5df2:	bf01      	itttt	eq
   d5df4:	3301      	addeq	r3, #1
   d5df6:	2200      	moveq	r2, #0
   d5df8:	6122      	streq	r2, [r4, #16]
   d5dfa:	6163      	streq	r3, [r4, #20]
   d5dfc:	bf08      	it	eq
   d5dfe:	61e2      	streq	r2, [r4, #28]
   d5e00:	e036      	b.n	d5e70 <localtime_r+0x1b8>
   d5e02:	2b00      	cmp	r3, #0
   d5e04:	da34      	bge.n	d5e70 <localtime_r+0x1b8>
   d5e06:	69e2      	ldr	r2, [r4, #28]
   d5e08:	3a01      	subs	r2, #1
   d5e0a:	61e2      	str	r2, [r4, #28]
   d5e0c:	69a2      	ldr	r2, [r4, #24]
   d5e0e:	3a01      	subs	r2, #1
   d5e10:	bf48      	it	mi
   d5e12:	2206      	movmi	r2, #6
   d5e14:	61a2      	str	r2, [r4, #24]
   d5e16:	68e2      	ldr	r2, [r4, #12]
   d5e18:	3318      	adds	r3, #24
   d5e1a:	3a01      	subs	r2, #1
   d5e1c:	60e2      	str	r2, [r4, #12]
   d5e1e:	60a3      	str	r3, [r4, #8]
   d5e20:	bb32      	cbnz	r2, d5e70 <localtime_r+0x1b8>
   d5e22:	6923      	ldr	r3, [r4, #16]
   d5e24:	3b01      	subs	r3, #1
   d5e26:	d401      	bmi.n	d5e2c <localtime_r+0x174>
   d5e28:	6123      	str	r3, [r4, #16]
   d5e2a:	e01d      	b.n	d5e68 <localtime_r+0x1b0>
   d5e2c:	230b      	movs	r3, #11
   d5e2e:	6123      	str	r3, [r4, #16]
   d5e30:	6963      	ldr	r3, [r4, #20]
   d5e32:	1e5a      	subs	r2, r3, #1
   d5e34:	f012 0f03 	tst.w	r2, #3
   d5e38:	6162      	str	r2, [r4, #20]
   d5e3a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d5e3e:	d105      	bne.n	d5e4c <localtime_r+0x194>
   d5e40:	2164      	movs	r1, #100	; 0x64
   d5e42:	fb93 f2f1 	sdiv	r2, r3, r1
   d5e46:	fb01 3212 	mls	r2, r1, r2, r3
   d5e4a:	b94a      	cbnz	r2, d5e60 <localtime_r+0x1a8>
   d5e4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d5e50:	fb93 f2f1 	sdiv	r2, r3, r1
   d5e54:	fb01 3312 	mls	r3, r1, r2, r3
   d5e58:	fab3 f383 	clz	r3, r3
   d5e5c:	095b      	lsrs	r3, r3, #5
   d5e5e:	e000      	b.n	d5e62 <localtime_r+0x1aa>
   d5e60:	2301      	movs	r3, #1
   d5e62:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d5e66:	61e3      	str	r3, [r4, #28]
   d5e68:	6923      	ldr	r3, [r4, #16]
   d5e6a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d5e6e:	60e3      	str	r3, [r4, #12]
   d5e70:	f000 f9a5 	bl	d61be <__tz_unlock>
   d5e74:	4620      	mov	r0, r4
   d5e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e7a:	bf00      	nop
   d5e7c:	000d6b84 	.word	0x000d6b84
   d5e80:	2003e7e4 	.word	0x2003e7e4

000d5e84 <memcpy>:
   d5e84:	b510      	push	{r4, lr}
   d5e86:	1e43      	subs	r3, r0, #1
   d5e88:	440a      	add	r2, r1
   d5e8a:	4291      	cmp	r1, r2
   d5e8c:	d004      	beq.n	d5e98 <memcpy+0x14>
   d5e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5e92:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5e96:	e7f8      	b.n	d5e8a <memcpy+0x6>
   d5e98:	bd10      	pop	{r4, pc}

000d5e9a <memset>:
   d5e9a:	4402      	add	r2, r0
   d5e9c:	4603      	mov	r3, r0
   d5e9e:	4293      	cmp	r3, r2
   d5ea0:	d002      	beq.n	d5ea8 <memset+0xe>
   d5ea2:	f803 1b01 	strb.w	r1, [r3], #1
   d5ea6:	e7fa      	b.n	d5e9e <memset+0x4>
   d5ea8:	4770      	bx	lr
	...

000d5eac <srand>:
   d5eac:	b538      	push	{r3, r4, r5, lr}
   d5eae:	4b12      	ldr	r3, [pc, #72]	; (d5ef8 <srand+0x4c>)
   d5eb0:	681c      	ldr	r4, [r3, #0]
   d5eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5eb4:	4605      	mov	r5, r0
   d5eb6:	b9d3      	cbnz	r3, d5eee <srand+0x42>
   d5eb8:	2018      	movs	r0, #24
   d5eba:	f7fe fb87 	bl	d45cc <malloc>
   d5ebe:	f243 330e 	movw	r3, #13070	; 0x330e
   d5ec2:	63a0      	str	r0, [r4, #56]	; 0x38
   d5ec4:	8003      	strh	r3, [r0, #0]
   d5ec6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5eca:	8043      	strh	r3, [r0, #2]
   d5ecc:	f241 2334 	movw	r3, #4660	; 0x1234
   d5ed0:	8083      	strh	r3, [r0, #4]
   d5ed2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5ed6:	80c3      	strh	r3, [r0, #6]
   d5ed8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5edc:	8103      	strh	r3, [r0, #8]
   d5ede:	2305      	movs	r3, #5
   d5ee0:	8143      	strh	r3, [r0, #10]
   d5ee2:	230b      	movs	r3, #11
   d5ee4:	8183      	strh	r3, [r0, #12]
   d5ee6:	2201      	movs	r2, #1
   d5ee8:	2300      	movs	r3, #0
   d5eea:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5ef0:	2200      	movs	r2, #0
   d5ef2:	611d      	str	r5, [r3, #16]
   d5ef4:	615a      	str	r2, [r3, #20]
   d5ef6:	bd38      	pop	{r3, r4, r5, pc}
   d5ef8:	2003e460 	.word	0x2003e460

000d5efc <strcmp>:
   d5efc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5f00:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5f04:	2a01      	cmp	r2, #1
   d5f06:	bf28      	it	cs
   d5f08:	429a      	cmpcs	r2, r3
   d5f0a:	d0f7      	beq.n	d5efc <strcmp>
   d5f0c:	1ad0      	subs	r0, r2, r3
   d5f0e:	4770      	bx	lr

000d5f10 <strcpy>:
   d5f10:	4603      	mov	r3, r0
   d5f12:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5f16:	f803 2b01 	strb.w	r2, [r3], #1
   d5f1a:	2a00      	cmp	r2, #0
   d5f1c:	d1f9      	bne.n	d5f12 <strcpy+0x2>
   d5f1e:	4770      	bx	lr

000d5f20 <strlen>:
   d5f20:	4603      	mov	r3, r0
   d5f22:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5f26:	2a00      	cmp	r2, #0
   d5f28:	d1fb      	bne.n	d5f22 <strlen+0x2>
   d5f2a:	1a18      	subs	r0, r3, r0
   d5f2c:	3801      	subs	r0, #1
   d5f2e:	4770      	bx	lr

000d5f30 <strncmp>:
   d5f30:	b530      	push	{r4, r5, lr}
   d5f32:	b182      	cbz	r2, d5f56 <strncmp+0x26>
   d5f34:	1e45      	subs	r5, r0, #1
   d5f36:	3901      	subs	r1, #1
   d5f38:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d5f3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d5f40:	42a3      	cmp	r3, r4
   d5f42:	d106      	bne.n	d5f52 <strncmp+0x22>
   d5f44:	43ec      	mvns	r4, r5
   d5f46:	4414      	add	r4, r2
   d5f48:	42e0      	cmn	r0, r4
   d5f4a:	d001      	beq.n	d5f50 <strncmp+0x20>
   d5f4c:	2b00      	cmp	r3, #0
   d5f4e:	d1f3      	bne.n	d5f38 <strncmp+0x8>
   d5f50:	461c      	mov	r4, r3
   d5f52:	1b18      	subs	r0, r3, r4
   d5f54:	bd30      	pop	{r4, r5, pc}
   d5f56:	4610      	mov	r0, r2
   d5f58:	bd30      	pop	{r4, r5, pc}
	...

000d5f5c <_strtoul_r>:
   d5f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5f60:	4680      	mov	r8, r0
   d5f62:	483c      	ldr	r0, [pc, #240]	; (d6054 <_strtoul_r+0xf8>)
   d5f64:	f8d0 9000 	ldr.w	r9, [r0]
   d5f68:	460e      	mov	r6, r1
   d5f6a:	4635      	mov	r5, r6
   d5f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d5f70:	eb09 0004 	add.w	r0, r9, r4
   d5f74:	7840      	ldrb	r0, [r0, #1]
   d5f76:	f000 0008 	and.w	r0, r0, #8
   d5f7a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d5f7e:	b108      	cbz	r0, d5f84 <_strtoul_r+0x28>
   d5f80:	462e      	mov	r6, r5
   d5f82:	e7f2      	b.n	d5f6a <_strtoul_r+0xe>
   d5f84:	2c2d      	cmp	r4, #45	; 0x2d
   d5f86:	d103      	bne.n	d5f90 <_strtoul_r+0x34>
   d5f88:	1cb5      	adds	r5, r6, #2
   d5f8a:	7874      	ldrb	r4, [r6, #1]
   d5f8c:	2701      	movs	r7, #1
   d5f8e:	e003      	b.n	d5f98 <_strtoul_r+0x3c>
   d5f90:	2c2b      	cmp	r4, #43	; 0x2b
   d5f92:	bf04      	itt	eq
   d5f94:	7874      	ldrbeq	r4, [r6, #1]
   d5f96:	1cb5      	addeq	r5, r6, #2
   d5f98:	b113      	cbz	r3, d5fa0 <_strtoul_r+0x44>
   d5f9a:	2b10      	cmp	r3, #16
   d5f9c:	d10a      	bne.n	d5fb4 <_strtoul_r+0x58>
   d5f9e:	e053      	b.n	d6048 <_strtoul_r+0xec>
   d5fa0:	2c30      	cmp	r4, #48	; 0x30
   d5fa2:	d14f      	bne.n	d6044 <_strtoul_r+0xe8>
   d5fa4:	7828      	ldrb	r0, [r5, #0]
   d5fa6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d5faa:	2858      	cmp	r0, #88	; 0x58
   d5fac:	d145      	bne.n	d603a <_strtoul_r+0xde>
   d5fae:	786c      	ldrb	r4, [r5, #1]
   d5fb0:	2310      	movs	r3, #16
   d5fb2:	3502      	adds	r5, #2
   d5fb4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d5fb8:	2600      	movs	r6, #0
   d5fba:	fbbc fcf3 	udiv	ip, ip, r3
   d5fbe:	fb03 fa0c 	mul.w	sl, r3, ip
   d5fc2:	ea6f 0a0a 	mvn.w	sl, sl
   d5fc6:	4630      	mov	r0, r6
   d5fc8:	eb09 0e04 	add.w	lr, r9, r4
   d5fcc:	f89e e001 	ldrb.w	lr, [lr, #1]
   d5fd0:	f01e 0f04 	tst.w	lr, #4
   d5fd4:	d001      	beq.n	d5fda <_strtoul_r+0x7e>
   d5fd6:	3c30      	subs	r4, #48	; 0x30
   d5fd8:	e00b      	b.n	d5ff2 <_strtoul_r+0x96>
   d5fda:	f01e 0e03 	ands.w	lr, lr, #3
   d5fde:	d01a      	beq.n	d6016 <_strtoul_r+0xba>
   d5fe0:	f1be 0f01 	cmp.w	lr, #1
   d5fe4:	bf0c      	ite	eq
   d5fe6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d5fea:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d5fee:	ebce 0404 	rsb	r4, lr, r4
   d5ff2:	42a3      	cmp	r3, r4
   d5ff4:	dd0f      	ble.n	d6016 <_strtoul_r+0xba>
   d5ff6:	2e00      	cmp	r6, #0
   d5ff8:	db08      	blt.n	d600c <_strtoul_r+0xb0>
   d5ffa:	4560      	cmp	r0, ip
   d5ffc:	d806      	bhi.n	d600c <_strtoul_r+0xb0>
   d5ffe:	d101      	bne.n	d6004 <_strtoul_r+0xa8>
   d6000:	4554      	cmp	r4, sl
   d6002:	dc03      	bgt.n	d600c <_strtoul_r+0xb0>
   d6004:	fb03 4000 	mla	r0, r3, r0, r4
   d6008:	2601      	movs	r6, #1
   d600a:	e001      	b.n	d6010 <_strtoul_r+0xb4>
   d600c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d6010:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6014:	e7d8      	b.n	d5fc8 <_strtoul_r+0x6c>
   d6016:	2e00      	cmp	r6, #0
   d6018:	da07      	bge.n	d602a <_strtoul_r+0xce>
   d601a:	2322      	movs	r3, #34	; 0x22
   d601c:	f8c8 3000 	str.w	r3, [r8]
   d6020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6024:	b92a      	cbnz	r2, d6032 <_strtoul_r+0xd6>
   d6026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d602a:	b107      	cbz	r7, d602e <_strtoul_r+0xd2>
   d602c:	4240      	negs	r0, r0
   d602e:	b172      	cbz	r2, d604e <_strtoul_r+0xf2>
   d6030:	b106      	cbz	r6, d6034 <_strtoul_r+0xd8>
   d6032:	1e69      	subs	r1, r5, #1
   d6034:	6011      	str	r1, [r2, #0]
   d6036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d603a:	2430      	movs	r4, #48	; 0x30
   d603c:	2b00      	cmp	r3, #0
   d603e:	d1b9      	bne.n	d5fb4 <_strtoul_r+0x58>
   d6040:	2308      	movs	r3, #8
   d6042:	e7b7      	b.n	d5fb4 <_strtoul_r+0x58>
   d6044:	230a      	movs	r3, #10
   d6046:	e7b5      	b.n	d5fb4 <_strtoul_r+0x58>
   d6048:	2c30      	cmp	r4, #48	; 0x30
   d604a:	d0ab      	beq.n	d5fa4 <_strtoul_r+0x48>
   d604c:	e7b2      	b.n	d5fb4 <_strtoul_r+0x58>
   d604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6052:	bf00      	nop
   d6054:	2003e3fc 	.word	0x2003e3fc

000d6058 <strtoul>:
   d6058:	4613      	mov	r3, r2
   d605a:	460a      	mov	r2, r1
   d605c:	4601      	mov	r1, r0
   d605e:	4802      	ldr	r0, [pc, #8]	; (d6068 <strtoul+0x10>)
   d6060:	6800      	ldr	r0, [r0, #0]
   d6062:	f7ff bf7b 	b.w	d5f5c <_strtoul_r>
   d6066:	bf00      	nop
   d6068:	2003e460 	.word	0x2003e460

000d606c <__tzcalc_limits>:
   d606c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6070:	4604      	mov	r4, r0
   d6072:	f000 fa6f 	bl	d6554 <__gettzinfo>
   d6076:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d607a:	429c      	cmp	r4, r3
   d607c:	f340 8096 	ble.w	d61ac <__tzcalc_limits+0x140>
   d6080:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d6084:	18e3      	adds	r3, r4, r3
   d6086:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d608a:	109b      	asrs	r3, r3, #2
   d608c:	f240 156d 	movw	r5, #365	; 0x16d
   d6090:	fb05 3502 	mla	r5, r5, r2, r3
   d6094:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d6098:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d609c:	fb92 f3f3 	sdiv	r3, r2, r3
   d60a0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d60a4:	442b      	add	r3, r5
   d60a6:	18a5      	adds	r5, r4, r2
   d60a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d60ac:	fb95 f5f2 	sdiv	r5, r5, r2
   d60b0:	441d      	add	r5, r3
   d60b2:	2364      	movs	r3, #100	; 0x64
   d60b4:	fb94 f7f2 	sdiv	r7, r4, r2
   d60b8:	fb94 f6f3 	sdiv	r6, r4, r3
   d60bc:	fb02 4717 	mls	r7, r2, r7, r4
   d60c0:	fb03 4616 	mls	r6, r3, r6, r4
   d60c4:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d60c8:	fab7 fe87 	clz	lr, r7
   d60cc:	9301      	str	r3, [sp, #4]
   d60ce:	f004 0303 	and.w	r3, r4, #3
   d60d2:	6044      	str	r4, [r0, #4]
   d60d4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d60d8:	4601      	mov	r1, r0
   d60da:	9300      	str	r3, [sp, #0]
   d60dc:	f04f 0c07 	mov.w	ip, #7
   d60e0:	7a0b      	ldrb	r3, [r1, #8]
   d60e2:	2b4a      	cmp	r3, #74	; 0x4a
   d60e4:	d10e      	bne.n	d6104 <__tzcalc_limits+0x98>
   d60e6:	694b      	ldr	r3, [r1, #20]
   d60e8:	9a00      	ldr	r2, [sp, #0]
   d60ea:	18ec      	adds	r4, r5, r3
   d60ec:	b902      	cbnz	r2, d60f0 <__tzcalc_limits+0x84>
   d60ee:	b906      	cbnz	r6, d60f2 <__tzcalc_limits+0x86>
   d60f0:	b927      	cbnz	r7, d60fc <__tzcalc_limits+0x90>
   d60f2:	2b3b      	cmp	r3, #59	; 0x3b
   d60f4:	bfd4      	ite	le
   d60f6:	2300      	movle	r3, #0
   d60f8:	2301      	movgt	r3, #1
   d60fa:	e000      	b.n	d60fe <__tzcalc_limits+0x92>
   d60fc:	2300      	movs	r3, #0
   d60fe:	4423      	add	r3, r4
   d6100:	3b01      	subs	r3, #1
   d6102:	e03f      	b.n	d6184 <__tzcalc_limits+0x118>
   d6104:	2b44      	cmp	r3, #68	; 0x44
   d6106:	d102      	bne.n	d610e <__tzcalc_limits+0xa2>
   d6108:	694b      	ldr	r3, [r1, #20]
   d610a:	442b      	add	r3, r5
   d610c:	e03a      	b.n	d6184 <__tzcalc_limits+0x118>
   d610e:	9b00      	ldr	r3, [sp, #0]
   d6110:	b92b      	cbnz	r3, d611e <__tzcalc_limits+0xb2>
   d6112:	2e00      	cmp	r6, #0
   d6114:	bf0c      	ite	eq
   d6116:	46f0      	moveq	r8, lr
   d6118:	f04f 0801 	movne.w	r8, #1
   d611c:	e000      	b.n	d6120 <__tzcalc_limits+0xb4>
   d611e:	46f0      	mov	r8, lr
   d6120:	4b24      	ldr	r3, [pc, #144]	; (d61b4 <__tzcalc_limits+0x148>)
   d6122:	68cc      	ldr	r4, [r1, #12]
   d6124:	2230      	movs	r2, #48	; 0x30
   d6126:	fb02 3808 	mla	r8, r2, r8, r3
   d612a:	f1a8 0a04 	sub.w	sl, r8, #4
   d612e:	46a9      	mov	r9, r5
   d6130:	2301      	movs	r3, #1
   d6132:	42a3      	cmp	r3, r4
   d6134:	da04      	bge.n	d6140 <__tzcalc_limits+0xd4>
   d6136:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d613a:	3301      	adds	r3, #1
   d613c:	44d9      	add	r9, fp
   d613e:	e7f8      	b.n	d6132 <__tzcalc_limits+0xc6>
   d6140:	f109 0304 	add.w	r3, r9, #4
   d6144:	fb93 fbfc 	sdiv	fp, r3, ip
   d6148:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d614c:	2c01      	cmp	r4, #1
   d614e:	ebca 0a03 	rsb	sl, sl, r3
   d6152:	694b      	ldr	r3, [r1, #20]
   d6154:	bfb8      	it	lt
   d6156:	2401      	movlt	r4, #1
   d6158:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d615c:	ebb3 0a0a 	subs.w	sl, r3, sl
   d6160:	690b      	ldr	r3, [r1, #16]
   d6162:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d6166:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d616a:	bf48      	it	mi
   d616c:	f10a 0a07 	addmi.w	sl, sl, #7
   d6170:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6174:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d6178:	4453      	add	r3, sl
   d617a:	42a3      	cmp	r3, r4
   d617c:	db01      	blt.n	d6182 <__tzcalc_limits+0x116>
   d617e:	3b07      	subs	r3, #7
   d6180:	e7fb      	b.n	d617a <__tzcalc_limits+0x10e>
   d6182:	444b      	add	r3, r9
   d6184:	698c      	ldr	r4, [r1, #24]
   d6186:	4a0c      	ldr	r2, [pc, #48]	; (d61b8 <__tzcalc_limits+0x14c>)
   d6188:	fb02 4303 	mla	r3, r2, r3, r4
   d618c:	6a0c      	ldr	r4, [r1, #32]
   d618e:	4423      	add	r3, r4
   d6190:	f841 3f1c 	str.w	r3, [r1, #28]!
   d6194:	9b01      	ldr	r3, [sp, #4]
   d6196:	4299      	cmp	r1, r3
   d6198:	d1a2      	bne.n	d60e0 <__tzcalc_limits+0x74>
   d619a:	69c3      	ldr	r3, [r0, #28]
   d619c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d619e:	4293      	cmp	r3, r2
   d61a0:	bfac      	ite	ge
   d61a2:	2300      	movge	r3, #0
   d61a4:	2301      	movlt	r3, #1
   d61a6:	6003      	str	r3, [r0, #0]
   d61a8:	2001      	movs	r0, #1
   d61aa:	e000      	b.n	d61ae <__tzcalc_limits+0x142>
   d61ac:	2000      	movs	r0, #0
   d61ae:	b003      	add	sp, #12
   d61b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d61b4:	000d6b84 	.word	0x000d6b84
   d61b8:	00015180 	.word	0x00015180

000d61bc <__tz_lock>:
   d61bc:	4770      	bx	lr

000d61be <__tz_unlock>:
   d61be:	4770      	bx	lr

000d61c0 <_tzset_unlocked>:
   d61c0:	4b01      	ldr	r3, [pc, #4]	; (d61c8 <_tzset_unlocked+0x8>)
   d61c2:	6818      	ldr	r0, [r3, #0]
   d61c4:	f000 b802 	b.w	d61cc <_tzset_unlocked_r>
   d61c8:	2003e460 	.word	0x2003e460

000d61cc <_tzset_unlocked_r>:
   d61cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d61d0:	b08d      	sub	sp, #52	; 0x34
   d61d2:	4607      	mov	r7, r0
   d61d4:	f000 f9be 	bl	d6554 <__gettzinfo>
   d61d8:	49b0      	ldr	r1, [pc, #704]	; (d649c <_tzset_unlocked_r+0x2d0>)
   d61da:	4eb1      	ldr	r6, [pc, #708]	; (d64a0 <_tzset_unlocked_r+0x2d4>)
   d61dc:	4604      	mov	r4, r0
   d61de:	4638      	mov	r0, r7
   d61e0:	f000 f9b0 	bl	d6544 <_getenv_r>
   d61e4:	4605      	mov	r5, r0
   d61e6:	b960      	cbnz	r0, d6202 <_tzset_unlocked_r+0x36>
   d61e8:	4bae      	ldr	r3, [pc, #696]	; (d64a4 <_tzset_unlocked_r+0x2d8>)
   d61ea:	4aaf      	ldr	r2, [pc, #700]	; (d64a8 <_tzset_unlocked_r+0x2dc>)
   d61ec:	6018      	str	r0, [r3, #0]
   d61ee:	4baf      	ldr	r3, [pc, #700]	; (d64ac <_tzset_unlocked_r+0x2e0>)
   d61f0:	6018      	str	r0, [r3, #0]
   d61f2:	4baf      	ldr	r3, [pc, #700]	; (d64b0 <_tzset_unlocked_r+0x2e4>)
   d61f4:	6830      	ldr	r0, [r6, #0]
   d61f6:	601a      	str	r2, [r3, #0]
   d61f8:	605a      	str	r2, [r3, #4]
   d61fa:	f7fe f9ef 	bl	d45dc <free>
   d61fe:	6035      	str	r5, [r6, #0]
   d6200:	e148      	b.n	d6494 <_tzset_unlocked_r+0x2c8>
   d6202:	6831      	ldr	r1, [r6, #0]
   d6204:	b979      	cbnz	r1, d6226 <_tzset_unlocked_r+0x5a>
   d6206:	6830      	ldr	r0, [r6, #0]
   d6208:	f7fe f9e8 	bl	d45dc <free>
   d620c:	4628      	mov	r0, r5
   d620e:	f7ff fe87 	bl	d5f20 <strlen>
   d6212:	1c41      	adds	r1, r0, #1
   d6214:	4638      	mov	r0, r7
   d6216:	f7fe fa01 	bl	d461c <_malloc_r>
   d621a:	6030      	str	r0, [r6, #0]
   d621c:	b148      	cbz	r0, d6232 <_tzset_unlocked_r+0x66>
   d621e:	4629      	mov	r1, r5
   d6220:	f7ff fe76 	bl	d5f10 <strcpy>
   d6224:	e005      	b.n	d6232 <_tzset_unlocked_r+0x66>
   d6226:	f7ff fe69 	bl	d5efc <strcmp>
   d622a:	2800      	cmp	r0, #0
   d622c:	f000 8132 	beq.w	d6494 <_tzset_unlocked_r+0x2c8>
   d6230:	e7e9      	b.n	d6206 <_tzset_unlocked_r+0x3a>
   d6232:	782b      	ldrb	r3, [r5, #0]
   d6234:	4a9f      	ldr	r2, [pc, #636]	; (d64b4 <_tzset_unlocked_r+0x2e8>)
   d6236:	49a0      	ldr	r1, [pc, #640]	; (d64b8 <_tzset_unlocked_r+0x2ec>)
   d6238:	2b3a      	cmp	r3, #58	; 0x3a
   d623a:	bf08      	it	eq
   d623c:	3501      	addeq	r5, #1
   d623e:	ae0a      	add	r6, sp, #40	; 0x28
   d6240:	4633      	mov	r3, r6
   d6242:	4628      	mov	r0, r5
   d6244:	f7fe f9e2 	bl	d460c <siscanf>
   d6248:	2800      	cmp	r0, #0
   d624a:	f340 8123 	ble.w	d6494 <_tzset_unlocked_r+0x2c8>
   d624e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6250:	18ef      	adds	r7, r5, r3
   d6252:	5ceb      	ldrb	r3, [r5, r3]
   d6254:	2b2d      	cmp	r3, #45	; 0x2d
   d6256:	d103      	bne.n	d6260 <_tzset_unlocked_r+0x94>
   d6258:	3701      	adds	r7, #1
   d625a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d625e:	e003      	b.n	d6268 <_tzset_unlocked_r+0x9c>
   d6260:	2b2b      	cmp	r3, #43	; 0x2b
   d6262:	bf08      	it	eq
   d6264:	3701      	addeq	r7, #1
   d6266:	2501      	movs	r5, #1
   d6268:	f10d 0a20 	add.w	sl, sp, #32
   d626c:	f10d 0b1e 	add.w	fp, sp, #30
   d6270:	f04f 0800 	mov.w	r8, #0
   d6274:	9603      	str	r6, [sp, #12]
   d6276:	f8cd a008 	str.w	sl, [sp, #8]
   d627a:	9601      	str	r6, [sp, #4]
   d627c:	f8cd b000 	str.w	fp, [sp]
   d6280:	4633      	mov	r3, r6
   d6282:	aa07      	add	r2, sp, #28
   d6284:	498d      	ldr	r1, [pc, #564]	; (d64bc <_tzset_unlocked_r+0x2f0>)
   d6286:	f8ad 801e 	strh.w	r8, [sp, #30]
   d628a:	4638      	mov	r0, r7
   d628c:	f8ad 8020 	strh.w	r8, [sp, #32]
   d6290:	f7fe f9bc 	bl	d460c <siscanf>
   d6294:	4540      	cmp	r0, r8
   d6296:	f340 80fd 	ble.w	d6494 <_tzset_unlocked_r+0x2c8>
   d629a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d629e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d62a2:	f8df 9224 	ldr.w	r9, [pc, #548]	; d64c8 <_tzset_unlocked_r+0x2fc>
   d62a6:	213c      	movs	r1, #60	; 0x3c
   d62a8:	fb01 3302 	mla	r3, r1, r2, r3
   d62ac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d62b0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d62b4:	fb01 3302 	mla	r3, r1, r2, r3
   d62b8:	435d      	muls	r5, r3
   d62ba:	6225      	str	r5, [r4, #32]
   d62bc:	4d7c      	ldr	r5, [pc, #496]	; (d64b0 <_tzset_unlocked_r+0x2e4>)
   d62be:	4b7d      	ldr	r3, [pc, #500]	; (d64b4 <_tzset_unlocked_r+0x2e8>)
   d62c0:	602b      	str	r3, [r5, #0]
   d62c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d62c4:	497c      	ldr	r1, [pc, #496]	; (d64b8 <_tzset_unlocked_r+0x2ec>)
   d62c6:	441f      	add	r7, r3
   d62c8:	464a      	mov	r2, r9
   d62ca:	4633      	mov	r3, r6
   d62cc:	4638      	mov	r0, r7
   d62ce:	f7fe f99d 	bl	d460c <siscanf>
   d62d2:	4540      	cmp	r0, r8
   d62d4:	dc08      	bgt.n	d62e8 <_tzset_unlocked_r+0x11c>
   d62d6:	682b      	ldr	r3, [r5, #0]
   d62d8:	606b      	str	r3, [r5, #4]
   d62da:	4b72      	ldr	r3, [pc, #456]	; (d64a4 <_tzset_unlocked_r+0x2d8>)
   d62dc:	6a22      	ldr	r2, [r4, #32]
   d62de:	601a      	str	r2, [r3, #0]
   d62e0:	4b72      	ldr	r3, [pc, #456]	; (d64ac <_tzset_unlocked_r+0x2e0>)
   d62e2:	f8c3 8000 	str.w	r8, [r3]
   d62e6:	e0d5      	b.n	d6494 <_tzset_unlocked_r+0x2c8>
   d62e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d62ea:	f8c5 9004 	str.w	r9, [r5, #4]
   d62ee:	18fd      	adds	r5, r7, r3
   d62f0:	5cfb      	ldrb	r3, [r7, r3]
   d62f2:	2b2d      	cmp	r3, #45	; 0x2d
   d62f4:	d103      	bne.n	d62fe <_tzset_unlocked_r+0x132>
   d62f6:	3501      	adds	r5, #1
   d62f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d62fc:	e003      	b.n	d6306 <_tzset_unlocked_r+0x13a>
   d62fe:	2b2b      	cmp	r3, #43	; 0x2b
   d6300:	bf08      	it	eq
   d6302:	3501      	addeq	r5, #1
   d6304:	2701      	movs	r7, #1
   d6306:	2300      	movs	r3, #0
   d6308:	f8ad 301c 	strh.w	r3, [sp, #28]
   d630c:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6310:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6314:	930a      	str	r3, [sp, #40]	; 0x28
   d6316:	9603      	str	r6, [sp, #12]
   d6318:	f8cd a008 	str.w	sl, [sp, #8]
   d631c:	9601      	str	r6, [sp, #4]
   d631e:	f8cd b000 	str.w	fp, [sp]
   d6322:	4633      	mov	r3, r6
   d6324:	aa07      	add	r2, sp, #28
   d6326:	4965      	ldr	r1, [pc, #404]	; (d64bc <_tzset_unlocked_r+0x2f0>)
   d6328:	4628      	mov	r0, r5
   d632a:	f7fe f96f 	bl	d460c <siscanf>
   d632e:	2800      	cmp	r0, #0
   d6330:	dc04      	bgt.n	d633c <_tzset_unlocked_r+0x170>
   d6332:	6a23      	ldr	r3, [r4, #32]
   d6334:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d6338:	63e3      	str	r3, [r4, #60]	; 0x3c
   d633a:	e00e      	b.n	d635a <_tzset_unlocked_r+0x18e>
   d633c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6340:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6344:	213c      	movs	r1, #60	; 0x3c
   d6346:	fb01 3302 	mla	r3, r1, r2, r3
   d634a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d634e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6352:	fb01 3302 	mla	r3, r1, r2, r3
   d6356:	435f      	muls	r7, r3
   d6358:	63e7      	str	r7, [r4, #60]	; 0x3c
   d635a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d635c:	4627      	mov	r7, r4
   d635e:	441d      	add	r5, r3
   d6360:	f04f 0900 	mov.w	r9, #0
   d6364:	782b      	ldrb	r3, [r5, #0]
   d6366:	2b2c      	cmp	r3, #44	; 0x2c
   d6368:	bf08      	it	eq
   d636a:	3501      	addeq	r5, #1
   d636c:	f895 8000 	ldrb.w	r8, [r5]
   d6370:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d6374:	d126      	bne.n	d63c4 <_tzset_unlocked_r+0x1f8>
   d6376:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d637a:	9302      	str	r3, [sp, #8]
   d637c:	ab09      	add	r3, sp, #36	; 0x24
   d637e:	9300      	str	r3, [sp, #0]
   d6380:	9603      	str	r6, [sp, #12]
   d6382:	9601      	str	r6, [sp, #4]
   d6384:	4633      	mov	r3, r6
   d6386:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d638a:	494d      	ldr	r1, [pc, #308]	; (d64c0 <_tzset_unlocked_r+0x2f4>)
   d638c:	4628      	mov	r0, r5
   d638e:	f7fe f93d 	bl	d460c <siscanf>
   d6392:	2803      	cmp	r0, #3
   d6394:	d17e      	bne.n	d6494 <_tzset_unlocked_r+0x2c8>
   d6396:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d639a:	1e4b      	subs	r3, r1, #1
   d639c:	2b0b      	cmp	r3, #11
   d639e:	d879      	bhi.n	d6494 <_tzset_unlocked_r+0x2c8>
   d63a0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d63a4:	1e53      	subs	r3, r2, #1
   d63a6:	2b04      	cmp	r3, #4
   d63a8:	d874      	bhi.n	d6494 <_tzset_unlocked_r+0x2c8>
   d63aa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d63ae:	2b06      	cmp	r3, #6
   d63b0:	d870      	bhi.n	d6494 <_tzset_unlocked_r+0x2c8>
   d63b2:	f887 8008 	strb.w	r8, [r7, #8]
   d63b6:	60f9      	str	r1, [r7, #12]
   d63b8:	613a      	str	r2, [r7, #16]
   d63ba:	617b      	str	r3, [r7, #20]
   d63bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d63be:	eb05 0803 	add.w	r8, r5, r3
   d63c2:	e02a      	b.n	d641a <_tzset_unlocked_r+0x24e>
   d63c4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d63c8:	bf06      	itte	eq
   d63ca:	3501      	addeq	r5, #1
   d63cc:	4643      	moveq	r3, r8
   d63ce:	2344      	movne	r3, #68	; 0x44
   d63d0:	220a      	movs	r2, #10
   d63d2:	a90b      	add	r1, sp, #44	; 0x2c
   d63d4:	4628      	mov	r0, r5
   d63d6:	9305      	str	r3, [sp, #20]
   d63d8:	f7ff fe3e 	bl	d6058 <strtoul>
   d63dc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d63e0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d63e4:	4545      	cmp	r5, r8
   d63e6:	9b05      	ldr	r3, [sp, #20]
   d63e8:	d114      	bne.n	d6414 <_tzset_unlocked_r+0x248>
   d63ea:	234d      	movs	r3, #77	; 0x4d
   d63ec:	f1b9 0f00 	cmp.w	r9, #0
   d63f0:	d107      	bne.n	d6402 <_tzset_unlocked_r+0x236>
   d63f2:	7223      	strb	r3, [r4, #8]
   d63f4:	2303      	movs	r3, #3
   d63f6:	60e3      	str	r3, [r4, #12]
   d63f8:	2302      	movs	r3, #2
   d63fa:	6123      	str	r3, [r4, #16]
   d63fc:	f8c4 9014 	str.w	r9, [r4, #20]
   d6400:	e00b      	b.n	d641a <_tzset_unlocked_r+0x24e>
   d6402:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d6406:	230b      	movs	r3, #11
   d6408:	62a3      	str	r3, [r4, #40]	; 0x28
   d640a:	2301      	movs	r3, #1
   d640c:	62e3      	str	r3, [r4, #44]	; 0x2c
   d640e:	2300      	movs	r3, #0
   d6410:	6323      	str	r3, [r4, #48]	; 0x30
   d6412:	e002      	b.n	d641a <_tzset_unlocked_r+0x24e>
   d6414:	b280      	uxth	r0, r0
   d6416:	723b      	strb	r3, [r7, #8]
   d6418:	6178      	str	r0, [r7, #20]
   d641a:	2302      	movs	r3, #2
   d641c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6420:	2300      	movs	r3, #0
   d6422:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6426:	f8ad 3020 	strh.w	r3, [sp, #32]
   d642a:	930a      	str	r3, [sp, #40]	; 0x28
   d642c:	f898 3000 	ldrb.w	r3, [r8]
   d6430:	2b2f      	cmp	r3, #47	; 0x2f
   d6432:	d10b      	bne.n	d644c <_tzset_unlocked_r+0x280>
   d6434:	9603      	str	r6, [sp, #12]
   d6436:	f8cd a008 	str.w	sl, [sp, #8]
   d643a:	9601      	str	r6, [sp, #4]
   d643c:	f8cd b000 	str.w	fp, [sp]
   d6440:	4633      	mov	r3, r6
   d6442:	aa07      	add	r2, sp, #28
   d6444:	491f      	ldr	r1, [pc, #124]	; (d64c4 <_tzset_unlocked_r+0x2f8>)
   d6446:	4640      	mov	r0, r8
   d6448:	f7fe f8e0 	bl	d460c <siscanf>
   d644c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6450:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6454:	213c      	movs	r1, #60	; 0x3c
   d6456:	fb01 3302 	mla	r3, r1, r2, r3
   d645a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d645e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6462:	fb01 3302 	mla	r3, r1, r2, r3
   d6466:	61bb      	str	r3, [r7, #24]
   d6468:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d646a:	f109 0901 	add.w	r9, r9, #1
   d646e:	f1b9 0f02 	cmp.w	r9, #2
   d6472:	4445      	add	r5, r8
   d6474:	f107 071c 	add.w	r7, r7, #28
   d6478:	f47f af74 	bne.w	d6364 <_tzset_unlocked_r+0x198>
   d647c:	6860      	ldr	r0, [r4, #4]
   d647e:	f7ff fdf5 	bl	d606c <__tzcalc_limits>
   d6482:	4b08      	ldr	r3, [pc, #32]	; (d64a4 <_tzset_unlocked_r+0x2d8>)
   d6484:	6a22      	ldr	r2, [r4, #32]
   d6486:	601a      	str	r2, [r3, #0]
   d6488:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d648a:	1a9b      	subs	r3, r3, r2
   d648c:	4a07      	ldr	r2, [pc, #28]	; (d64ac <_tzset_unlocked_r+0x2e0>)
   d648e:	bf18      	it	ne
   d6490:	2301      	movne	r3, #1
   d6492:	6013      	str	r3, [r2, #0]
   d6494:	b00d      	add	sp, #52	; 0x34
   d6496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d649a:	bf00      	nop
   d649c:	000d6be4 	.word	0x000d6be4
   d64a0:	2003e7e0 	.word	0x2003e7e0
   d64a4:	2003e7e8 	.word	0x2003e7e8
   d64a8:	000d6be7 	.word	0x000d6be7
   d64ac:	2003e7e4 	.word	0x2003e7e4
   d64b0:	2003e464 	.word	0x2003e464
   d64b4:	2003e7d3 	.word	0x2003e7d3
   d64b8:	000d6beb 	.word	0x000d6beb
   d64bc:	000d6c0e 	.word	0x000d6c0e
   d64c0:	000d6bfa 	.word	0x000d6bfa
   d64c4:	000d6c0d 	.word	0x000d6c0d
   d64c8:	2003e7c8 	.word	0x2003e7c8

000d64cc <_findenv_r>:
   d64cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64d0:	4607      	mov	r7, r0
   d64d2:	468b      	mov	fp, r1
   d64d4:	4690      	mov	r8, r2
   d64d6:	f000 f8d9 	bl	d668c <__env_lock>
   d64da:	4b19      	ldr	r3, [pc, #100]	; (d6540 <_findenv_r+0x74>)
   d64dc:	681d      	ldr	r5, [r3, #0]
   d64de:	469a      	mov	sl, r3
   d64e0:	b13d      	cbz	r5, d64f2 <_findenv_r+0x26>
   d64e2:	465c      	mov	r4, fp
   d64e4:	4623      	mov	r3, r4
   d64e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d64ea:	b142      	cbz	r2, d64fe <_findenv_r+0x32>
   d64ec:	2a3d      	cmp	r2, #61	; 0x3d
   d64ee:	461c      	mov	r4, r3
   d64f0:	d1f8      	bne.n	d64e4 <_findenv_r+0x18>
   d64f2:	4638      	mov	r0, r7
   d64f4:	f000 f8cb 	bl	d668e <__env_unlock>
   d64f8:	2000      	movs	r0, #0
   d64fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d64fe:	ebcb 0404 	rsb	r4, fp, r4
   d6502:	46a9      	mov	r9, r5
   d6504:	f859 0b04 	ldr.w	r0, [r9], #4
   d6508:	2800      	cmp	r0, #0
   d650a:	d0f2      	beq.n	d64f2 <_findenv_r+0x26>
   d650c:	4622      	mov	r2, r4
   d650e:	4659      	mov	r1, fp
   d6510:	f7ff fd0e 	bl	d5f30 <strncmp>
   d6514:	b988      	cbnz	r0, d653a <_findenv_r+0x6e>
   d6516:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d651a:	191e      	adds	r6, r3, r4
   d651c:	5d1b      	ldrb	r3, [r3, r4]
   d651e:	2b3d      	cmp	r3, #61	; 0x3d
   d6520:	d10b      	bne.n	d653a <_findenv_r+0x6e>
   d6522:	f8da 3000 	ldr.w	r3, [sl]
   d6526:	1aed      	subs	r5, r5, r3
   d6528:	10ad      	asrs	r5, r5, #2
   d652a:	4638      	mov	r0, r7
   d652c:	f8c8 5000 	str.w	r5, [r8]
   d6530:	f000 f8ad 	bl	d668e <__env_unlock>
   d6534:	1c70      	adds	r0, r6, #1
   d6536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d653a:	464d      	mov	r5, r9
   d653c:	e7e1      	b.n	d6502 <_findenv_r+0x36>
   d653e:	bf00      	nop
   d6540:	2003e4ac 	.word	0x2003e4ac

000d6544 <_getenv_r>:
   d6544:	b507      	push	{r0, r1, r2, lr}
   d6546:	aa01      	add	r2, sp, #4
   d6548:	f7ff ffc0 	bl	d64cc <_findenv_r>
   d654c:	b003      	add	sp, #12
   d654e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6554 <__gettzinfo>:
   d6554:	4800      	ldr	r0, [pc, #0]	; (d6558 <__gettzinfo+0x4>)
   d6556:	4770      	bx	lr
   d6558:	2003e46c 	.word	0x2003e46c

000d655c <gmtime_r>:
   d655c:	6802      	ldr	r2, [r0, #0]
   d655e:	4b47      	ldr	r3, [pc, #284]	; (d667c <gmtime_r+0x120>)
   d6560:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6562:	fb92 f4f3 	sdiv	r4, r2, r3
   d6566:	fb03 2214 	mls	r2, r3, r4, r2
   d656a:	2a00      	cmp	r2, #0
   d656c:	bfbc      	itt	lt
   d656e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d6572:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d6576:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d657a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d657e:	fb92 f3f0 	sdiv	r3, r2, r0
   d6582:	fb00 2213 	mls	r2, r0, r3, r2
   d6586:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d658a:	bfac      	ite	ge
   d658c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d6590:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d6594:	608b      	str	r3, [r1, #8]
   d6596:	fb92 f3f0 	sdiv	r3, r2, r0
   d659a:	fb00 2213 	mls	r2, r0, r3, r2
   d659e:	604b      	str	r3, [r1, #4]
   d65a0:	600a      	str	r2, [r1, #0]
   d65a2:	2307      	movs	r3, #7
   d65a4:	1ce2      	adds	r2, r4, #3
   d65a6:	fb92 f3f3 	sdiv	r3, r2, r3
   d65aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d65ae:	1ad3      	subs	r3, r2, r3
   d65b0:	618b      	str	r3, [r1, #24]
   d65b2:	4b33      	ldr	r3, [pc, #204]	; (d6680 <gmtime_r+0x124>)
   d65b4:	4d33      	ldr	r5, [pc, #204]	; (d6684 <gmtime_r+0x128>)
   d65b6:	fb94 f5f5 	sdiv	r5, r4, r5
   d65ba:	fb03 4405 	mla	r4, r3, r5, r4
   d65be:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d65c2:	fbb4 f2f2 	udiv	r2, r4, r2
   d65c6:	4422      	add	r2, r4
   d65c8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d65cc:	fbb4 f3f7 	udiv	r3, r4, r7
   d65d0:	1ad2      	subs	r2, r2, r3
   d65d2:	482d      	ldr	r0, [pc, #180]	; (d6688 <gmtime_r+0x12c>)
   d65d4:	fbb4 f0f0 	udiv	r0, r4, r0
   d65d8:	f648 6694 	movw	r6, #36500	; 0x8e94
   d65dc:	1a13      	subs	r3, r2, r0
   d65de:	fbb3 f6f6 	udiv	r6, r3, r6
   d65e2:	4434      	add	r4, r6
   d65e4:	f240 126d 	movw	r2, #365	; 0x16d
   d65e8:	fbb3 f0f2 	udiv	r0, r3, r2
   d65ec:	fbb3 f3f7 	udiv	r3, r3, r7
   d65f0:	1ae3      	subs	r3, r4, r3
   d65f2:	fb02 3310 	mls	r3, r2, r0, r3
   d65f6:	2499      	movs	r4, #153	; 0x99
   d65f8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d65fc:	3202      	adds	r2, #2
   d65fe:	fbb2 f2f4 	udiv	r2, r2, r4
   d6602:	2a0a      	cmp	r2, #10
   d6604:	fb04 f402 	mul.w	r4, r4, r2
   d6608:	f104 0602 	add.w	r6, r4, #2
   d660c:	f04f 0405 	mov.w	r4, #5
   d6610:	fbb6 f4f4 	udiv	r4, r6, r4
   d6614:	bf34      	ite	cc
   d6616:	2602      	movcc	r6, #2
   d6618:	f06f 0609 	mvncs.w	r6, #9
   d661c:	4416      	add	r6, r2
   d661e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6622:	fb02 0505 	mla	r5, r2, r5, r0
   d6626:	1c5f      	adds	r7, r3, #1
   d6628:	2e01      	cmp	r6, #1
   d662a:	bf98      	it	ls
   d662c:	3501      	addls	r5, #1
   d662e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d6632:	eba7 0704 	sub.w	r7, r7, r4
   d6636:	d302      	bcc.n	d663e <gmtime_r+0xe2>
   d6638:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d663c:	e014      	b.n	d6668 <gmtime_r+0x10c>
   d663e:	0782      	lsls	r2, r0, #30
   d6640:	d105      	bne.n	d664e <gmtime_r+0xf2>
   d6642:	2464      	movs	r4, #100	; 0x64
   d6644:	fbb0 f2f4 	udiv	r2, r0, r4
   d6648:	fb04 0212 	mls	r2, r4, r2, r0
   d664c:	b94a      	cbnz	r2, d6662 <gmtime_r+0x106>
   d664e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6652:	fbb0 f4f2 	udiv	r4, r0, r2
   d6656:	fb02 0014 	mls	r0, r2, r4, r0
   d665a:	fab0 f280 	clz	r2, r0
   d665e:	0952      	lsrs	r2, r2, #5
   d6660:	e000      	b.n	d6664 <gmtime_r+0x108>
   d6662:	2201      	movs	r2, #1
   d6664:	333b      	adds	r3, #59	; 0x3b
   d6666:	441a      	add	r2, r3
   d6668:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d666c:	2300      	movs	r3, #0
   d666e:	61ca      	str	r2, [r1, #28]
   d6670:	614d      	str	r5, [r1, #20]
   d6672:	610e      	str	r6, [r1, #16]
   d6674:	60cf      	str	r7, [r1, #12]
   d6676:	620b      	str	r3, [r1, #32]
   d6678:	4608      	mov	r0, r1
   d667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d667c:	00015180 	.word	0x00015180
   d6680:	fffdc54f 	.word	0xfffdc54f
   d6684:	00023ab1 	.word	0x00023ab1
   d6688:	00023ab0 	.word	0x00023ab0

000d668c <__env_lock>:
   d668c:	4770      	bx	lr

000d668e <__env_unlock>:
   d668e:	4770      	bx	lr

000d6690 <dynalib_user>:
   d6690:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d66a0:	0000 0000 203a 7550 6c62 7369 6968 676e     ....: Publishing
   d66b0:	4d20 7365 2068 7645 6e65 0074 7267 756f      Mesh Event.grou
   d66c0:	2d70 7665 6e65 0074                         p-event.

000d66c8 <_ZTVN5spark13EthernetClassE>:
	...
   d66d0:	469d 000d 4693 000d 4689 000d 467f 000d     .F...F...F...F..
   d66e0:	4673 000d 4667 000d 465b 000d 4653 000d     sF..gF..[F..SF..
   d66f0:	4649 000d 463f 000d 4b65 000d               IF..?F..eK..

000d66fc <_ZTV9IPAddress>:
	...
   d6704:	46cb 000d 46bd 000d 46bf 000d 0066 6e6c     .F...F...F..f.ln
   d6714:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d6724:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d6734:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d6744:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d6754:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d6764:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d6774:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d6784:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d6794:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d67a4:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d67b4:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d67c4:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d67d4:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d67e4:	6170 696e 0063 6c61 006c 0000               panic.all...

000d67f0 <_ZTVN5spark9MeshClassE>:
	...
   d67f8:	4843 000d 4839 000d 482f 000d 4825 000d     CH..9H../H..%H..
   d6808:	4819 000d 480d 000d 4801 000d 47f9 000d     .H...H...H...G..
   d6818:	47ef 000d 47e5 000d 4b65 000d 6666 3330     .G...G..eK..ff03
   d6828:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d6838:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d6848:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d6854 <_ZTVN5spark12NetworkClassE>:
	...
   d685c:	4afd 000d 4b07 000d 4b11 000d 4b1b 000d     .J...K...K...K..
   d686c:	4b25 000d 4b31 000d 4b3d 000d 4b49 000d     %K..1K..=K..IK..
   d687c:	4b51 000d 4b5b 000d 4b65 000d               QK..[K..eK..

000d6888 <_ZTV8SPIClass>:
	...
   d6890:	4d99 000d 4d9b 000d 2b25 3330 3a64 3025     .M...M..%+03d:%0
   d68a0:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d68b0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d68c0 <_ZTV3UDP>:
	...
   d68c8:	55a1 000d 55c5 000d 4f81 000d 50ab 000d     .U...U...O...P..
   d68d8:	4f79 000d 4f97 000d 4fb5 000d 4fcf 000d     yO...O...O...O..
   d68e8:	4ff3 000d 508f 000d 5391 000d 5131 000d     .O...P...S..1Q..
   d68f8:	52b1 000d 4f61 000d 5537 000d 5235 000d     .R..aO..7U..5R..
   d6908:	5169 000d 5565 000d 50d5 000d 4f6f 000d     iQ..eU...P..oO..
   d6918:	5111 000d 4f75 000d 4fd1 000d fff0 ffff     .Q..uO...O......
   d6928:	0000 0000 4feb 000d                         .....O..

000d6930 <_ZTV11USARTSerial>:
	...
   d6938:	55ef 000d 5613 000d 561f 000d 4c45 000d     .U...V...V..EL..
   d6948:	55fb 000d 5607 000d 5601 000d 560d 000d     .U...V...V...V..
   d6958:	55f1 000d 55f5 000d                         .U...U..

000d6960 <_ZTV9USBSerial>:
	...
   d6968:	56f5 000d 5739 000d 5713 000d 4c45 000d     .V..9W...W..EL..
   d6978:	570d 000d 56f7 000d 56ff 000d 5733 000d     .W...V...V..3W..
   d6988:	5707 000d 56f1 000d                         .W...V..

000d6990 <_ZTVN5spark9WiFiClassE>:
	...
   d6998:	582f 000d 5825 000d 581b 000d 57d1 000d     /X..%X...X...W..
   d69a8:	580f 000d 5803 000d 57f7 000d 57ef 000d     .X...X...W...W..
   d69b8:	57e5 000d 57db 000d 4b65 000d               .W...W..eK..

000d69c4 <day_name.4725>:
   d69c4:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d69d4:	6972 6153 4a74                                   riSat

000d69d9 <mon_name.4726>:
   d69d9:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d69e9:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d69f9:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d6a09:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d6a19:	6425 000a                                   %d..

000d6a1d <_ctype_>:
   d6a1d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d6a2d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d6a3d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d6a4d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d6a5d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d6a6d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d6a7d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d6a8d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d6a9d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d6b20 <__sf_fake_stdin>:
	...

000d6b40 <__sf_fake_stdout>:
	...

000d6b60 <__sf_fake_stderr>:
	...
   d6b80:	0043 0000                                   C...

000d6b84 <__month_lengths>:
   d6b84:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d6b94:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d6ba4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d6bb4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d6bc4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d6bd4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d6be4:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d6bf4:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d6c04:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d6c14:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d6c20 <link_const_variable_data_end>:
   d6c20:	000d4161 	.word	0x000d4161
   d6c24:	000d46a9 	.word	0x000d46a9
   d6c28:	000d47d5 	.word	0x000d47d5
   d6c2c:	000d4ab1 	.word	0x000d4ab1
   d6c30:	000d4c31 	.word	0x000d4c31
   d6c34:	000d4d7d 	.word	0x000d4d7d
   d6c38:	000d4e85 	.word	0x000d4e85
   d6c3c:	000d4f4d 	.word	0x000d4f4d
   d6c40:	000d5839 	.word	0x000d5839
   d6c44:	000d5921 	.word	0x000d5921
   d6c48:	000d5971 	.word	0x000d5971
   d6c4c:	000d5a35 	.word	0x000d5a35
   d6c50:	000d5ab9 	.word	0x000d5ab9
   d6c54:	000d5b3d 	.word	0x000d5b3d

000d6c58 <link_constructors_end>:
	...
