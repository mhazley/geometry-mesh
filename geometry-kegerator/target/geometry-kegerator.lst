
/Users/mhazley/src/geometry-mesh/geometry-kegerator/target/geometry-kegerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f18  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00017018  2**0
                  CONTENTS
  3 .data         000000bc  2003e3f8  000d6f30  0000e3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000033c  2003e4b4  2003e4b4  0001e4b4  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6fec  000d6fec  00016fec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d7014  000d7014  00017014  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0009855c  00000000  00000000  00017018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d197  00000000  00000000  000af574  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001371d  00000000  00000000  000bc70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001df8  00000000  00000000  000cfe28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000031c8  00000000  00000000  000d1c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002ce35  00000000  00000000  000d4de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e11a  00000000  00000000  00101c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d69a7  00000000  00000000  0011fd37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b980  00000000  00000000  001f66e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	a4 69 0d 00                                         .i..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f8a8 	bl	d6182 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f8ad 	bl	d6198 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e3f8 	.word	0x2003e3f8
   d4048:	000d6f30 	.word	0x000d6f30
   d404c:	2003e4b4 	.word	0x2003e4b4
   d4050:	2003e4b4 	.word	0x2003e4b4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fd9b 	bl	d5b94 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6f30 	.word	0x000d6f30
   d4080:	000d6efc 	.word	0x000d6efc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b858 	b.w	d4138 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f869 	bl	d4160 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bd4d 	b.w	d5b30 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bac5 	b.w	d4624 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bac3 	b.w	d4624 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bac9 	b.w	d4634 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bac7 	b.w	d4634 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z12eventHandlerPKcS0_>:
static uint8_t r = 255;
static uint8_t g = 0;
static uint8_t b = 0;

void eventHandler(const char *event, const char *data)
{
   d40b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if( r == 255 )
   d40ba:	4c1b      	ldr	r4, [pc, #108]	; (d4128 <_Z12eventHandlerPKcS0_+0x70>)
   d40bc:	4d1b      	ldr	r5, [pc, #108]	; (d412c <_Z12eventHandlerPKcS0_+0x74>)
   d40be:	7822      	ldrb	r2, [r4, #0]
   d40c0:	4e1b      	ldr	r6, [pc, #108]	; (d4130 <_Z12eventHandlerPKcS0_+0x78>)
   d40c2:	2aff      	cmp	r2, #255	; 0xff
   d40c4:	d103      	bne.n	d40ce <_Z12eventHandlerPKcS0_+0x16>
    {
        r = 0;
   d40c6:	2300      	movs	r3, #0
   d40c8:	7023      	strb	r3, [r4, #0]
        g = 255;
   d40ca:	702a      	strb	r2, [r5, #0]
   d40cc:	e00b      	b.n	d40e6 <_Z12eventHandlerPKcS0_+0x2e>
        b = 0;
    }
    else if ( g == 255 )
   d40ce:	782a      	ldrb	r2, [r5, #0]
   d40d0:	2aff      	cmp	r2, #255	; 0xff
   d40d2:	f04f 0300 	mov.w	r3, #0
   d40d6:	d103      	bne.n	d40e0 <_Z12eventHandlerPKcS0_+0x28>
    {
        r = 0;
   d40d8:	7023      	strb	r3, [r4, #0]
        g = 0;
   d40da:	702b      	strb	r3, [r5, #0]
        b = 255;
   d40dc:	7032      	strb	r2, [r6, #0]
   d40de:	e003      	b.n	d40e8 <_Z12eventHandlerPKcS0_+0x30>
    }
    else
    {
        r = 255;
   d40e0:	22ff      	movs	r2, #255	; 0xff
   d40e2:	7022      	strb	r2, [r4, #0]
        g = 0;
   d40e4:	702b      	strb	r3, [r5, #0]
        b = 0;
   d40e6:	7033      	strb	r3, [r6, #0]
    }
    
    RGB.control(true);
   d40e8:	2001      	movs	r0, #1
   d40ea:	f000 ffad 	bl	d5048 <_ZN8RGBClass7controlEb>
    RGB.color(r, g, b);
   d40ee:	7832      	ldrb	r2, [r6, #0]
   d40f0:	7829      	ldrb	r1, [r5, #0]
   d40f2:	7820      	ldrb	r0, [r4, #0]
   d40f4:	f000 ffb8 	bl	d5068 <_ZN8RGBClass5colorEiii>

    Serial.print(Time.timeStr()); Serial.println(": Receiving Event");
   d40f8:	f001 fcce 	bl	d5a98 <_Z16_fetch_usbserialv>
   d40fc:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d40fe:	f001 f8a8 	bl	d5252 <_ZN9TimeClass3nowEv>
   d4102:	4601      	mov	r1, r0
   d4104:	4668      	mov	r0, sp
   d4106:	f001 f861 	bl	d51cc <_ZN9TimeClass7timeStrEl>
   d410a:	9900      	ldr	r1, [sp, #0]
   d410c:	4620      	mov	r0, r4
   d410e:	f000 ff49 	bl	d4fa4 <_ZN5Print5printEPKc>
   d4112:	4668      	mov	r0, sp
   d4114:	f000 ffe6 	bl	d50e4 <_ZN6StringD1Ev>
   d4118:	f001 fcbe 	bl	d5a98 <_Z16_fetch_usbserialv>
   d411c:	4905      	ldr	r1, [pc, #20]	; (d4134 <_Z12eventHandlerPKcS0_+0x7c>)
   d411e:	f000 ff54 	bl	d4fca <_ZN5Print7printlnEPKc>
}
   d4122:	b004      	add	sp, #16
   d4124:	bd70      	pop	{r4, r5, r6, pc}
   d4126:	bf00      	nop
   d4128:	2003e3f8 	.word	0x2003e3f8
   d412c:	2003e4b9 	.word	0x2003e4b9
   d4130:	2003e4b8 	.word	0x2003e4b8
   d4134:	000d69b8 	.word	0x000d69b8

000d4138 <setup>:

void setup()
{
   d4138:	b508      	push	{r3, lr}
    Serial.begin(115200);
   d413a:	f001 fcad 	bl	d5a98 <_Z16_fetch_usbserialv>
   d413e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4142:	f001 fc9d 	bl	d5a80 <_ZN9USBSerial5beginEl>
#ifdef CLOUD    
    Particle.subscribe("group-event", eventHandler, MY_DEVICES);
#else
    Mesh.subscribe("group-event", eventHandler);
   d4146:	4a03      	ldr	r2, [pc, #12]	; (d4154 <setup+0x1c>)
   d4148:	4903      	ldr	r1, [pc, #12]	; (d4158 <setup+0x20>)
   d414a:	4804      	ldr	r0, [pc, #16]	; (d415c <setup+0x24>)
#endif
}
   d414c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
    Serial.begin(115200);
#ifdef CLOUD    
    Particle.subscribe("group-event", eventHandler, MY_DEVICES);
#else
    Mesh.subscribe("group-event", eventHandler);
   d4150:	f000 bd44 	b.w	d4bdc <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
   d4154:	000d40b9 	.word	0x000d40b9
   d4158:	000d69ca 	.word	0x000d69ca
   d415c:	2003e4d0 	.word	0x2003e4d0

000d4160 <loop>:
#endif
}
 
void loop() 
{
   d4160:	4770      	bx	lr

000d4162 <_GLOBAL__sub_I__Z12eventHandlerPKcS0_>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4162:	f000 b879 	b.w	d4258 <HAL_Pin_Map>
	...

000d4168 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4168:	b508      	push	{r3, lr}
   d416a:	4b02      	ldr	r3, [pc, #8]	; (d4174 <os_thread_create+0xc>)
   d416c:	681b      	ldr	r3, [r3, #0]
   d416e:	685b      	ldr	r3, [r3, #4]
   d4170:	9301      	str	r3, [sp, #4]
   d4172:	bd08      	pop	{r3, pc}
   d4174:	00030248 	.word	0x00030248

000d4178 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4178:	b508      	push	{r3, lr}
   d417a:	4b02      	ldr	r3, [pc, #8]	; (d4184 <os_thread_is_current+0xc>)
   d417c:	681b      	ldr	r3, [r3, #0]
   d417e:	689b      	ldr	r3, [r3, #8]
   d4180:	9301      	str	r3, [sp, #4]
   d4182:	bd08      	pop	{r3, pc}
   d4184:	00030248 	.word	0x00030248

000d4188 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4188:	b508      	push	{r3, lr}
   d418a:	4b02      	ldr	r3, [pc, #8]	; (d4194 <os_thread_yield+0xc>)
   d418c:	681b      	ldr	r3, [r3, #0]
   d418e:	68db      	ldr	r3, [r3, #12]
   d4190:	9301      	str	r3, [sp, #4]
   d4192:	bd08      	pop	{r3, pc}
   d4194:	00030248 	.word	0x00030248

000d4198 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4198:	b508      	push	{r3, lr}
   d419a:	4b02      	ldr	r3, [pc, #8]	; (d41a4 <os_thread_join+0xc>)
   d419c:	681b      	ldr	r3, [r3, #0]
   d419e:	691b      	ldr	r3, [r3, #16]
   d41a0:	9301      	str	r3, [sp, #4]
   d41a2:	bd08      	pop	{r3, pc}
   d41a4:	00030248 	.word	0x00030248

000d41a8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d41a8:	b508      	push	{r3, lr}
   d41aa:	4b02      	ldr	r3, [pc, #8]	; (d41b4 <os_thread_cleanup+0xc>)
   d41ac:	681b      	ldr	r3, [r3, #0]
   d41ae:	695b      	ldr	r3, [r3, #20]
   d41b0:	9301      	str	r3, [sp, #4]
   d41b2:	bd08      	pop	{r3, pc}
   d41b4:	00030248 	.word	0x00030248

000d41b8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d41b8:	b508      	push	{r3, lr}
   d41ba:	4b02      	ldr	r3, [pc, #8]	; (d41c4 <os_mutex_create+0xc>)
   d41bc:	681b      	ldr	r3, [r3, #0]
   d41be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d41c0:	9301      	str	r3, [sp, #4]
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	00030248 	.word	0x00030248

000d41c8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d41c8:	b508      	push	{r3, lr}
   d41ca:	4b02      	ldr	r3, [pc, #8]	; (d41d4 <os_mutex_recursive_create+0xc>)
   d41cc:	681b      	ldr	r3, [r3, #0]
   d41ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d41d0:	9301      	str	r3, [sp, #4]
   d41d2:	bd08      	pop	{r3, pc}
   d41d4:	00030248 	.word	0x00030248

000d41d8 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d41d8:	b508      	push	{r3, lr}
   d41da:	4b02      	ldr	r3, [pc, #8]	; (d41e4 <os_mutex_recursive_lock+0xc>)
   d41dc:	681b      	ldr	r3, [r3, #0]
   d41de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d41e0:	9301      	str	r3, [sp, #4]
   d41e2:	bd08      	pop	{r3, pc}
   d41e4:	00030248 	.word	0x00030248

000d41e8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d41e8:	b508      	push	{r3, lr}
   d41ea:	4b02      	ldr	r3, [pc, #8]	; (d41f4 <os_mutex_recursive_unlock+0xc>)
   d41ec:	681b      	ldr	r3, [r3, #0]
   d41ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d41f0:	9301      	str	r3, [sp, #4]
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	00030248 	.word	0x00030248

000d41f8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d41f8:	b508      	push	{r3, lr}
   d41fa:	4b02      	ldr	r3, [pc, #8]	; (d4204 <os_thread_exit+0xc>)
   d41fc:	681b      	ldr	r3, [r3, #0]
   d41fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4200:	9301      	str	r3, [sp, #4]
   d4202:	bd08      	pop	{r3, pc}
   d4204:	00030248 	.word	0x00030248

000d4208 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4208:	b508      	push	{r3, lr}
   d420a:	4b02      	ldr	r3, [pc, #8]	; (d4214 <HAL_RNG_GetRandomNumber+0xc>)
   d420c:	681b      	ldr	r3, [r3, #0]
   d420e:	685b      	ldr	r3, [r3, #4]
   d4210:	9301      	str	r3, [sp, #4]
   d4212:	bd08      	pop	{r3, pc}
   d4214:	00030218 	.word	0x00030218

000d4218 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4218:	b508      	push	{r3, lr}
   d421a:	4b02      	ldr	r3, [pc, #8]	; (d4224 <HAL_Delay_Milliseconds+0xc>)
   d421c:	681b      	ldr	r3, [r3, #0]
   d421e:	689b      	ldr	r3, [r3, #8]
   d4220:	9301      	str	r3, [sp, #4]
   d4222:	bd08      	pop	{r3, pc}
   d4224:	00030218 	.word	0x00030218

000d4228 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4228:	b508      	push	{r3, lr}
   d422a:	4b02      	ldr	r3, [pc, #8]	; (d4234 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d422c:	681b      	ldr	r3, [r3, #0]
   d422e:	695b      	ldr	r3, [r3, #20]
   d4230:	9301      	str	r3, [sp, #4]
   d4232:	bd08      	pop	{r3, pc}
   d4234:	00030218 	.word	0x00030218

000d4238 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4238:	b508      	push	{r3, lr}
   d423a:	4b02      	ldr	r3, [pc, #8]	; (d4244 <HAL_RTC_Get_UnixTime+0xc>)
   d423c:	681b      	ldr	r3, [r3, #0]
   d423e:	69db      	ldr	r3, [r3, #28]
   d4240:	9301      	str	r3, [sp, #4]
   d4242:	bd08      	pop	{r3, pc}
   d4244:	00030218 	.word	0x00030218

000d4248 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4248:	b508      	push	{r3, lr}
   d424a:	4b02      	ldr	r3, [pc, #8]	; (d4254 <HAL_RTC_Time_Is_Valid+0xc>)
   d424c:	681b      	ldr	r3, [r3, #0]
   d424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4250:	9301      	str	r3, [sp, #4]
   d4252:	bd08      	pop	{r3, pc}
   d4254:	00030218 	.word	0x00030218

000d4258 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4258:	b508      	push	{r3, lr}
   d425a:	4b02      	ldr	r3, [pc, #8]	; (d4264 <HAL_Pin_Map+0xc>)
   d425c:	681b      	ldr	r3, [r3, #0]
   d425e:	681b      	ldr	r3, [r3, #0]
   d4260:	9301      	str	r3, [sp, #4]
   d4262:	bd08      	pop	{r3, pc}
   d4264:	0003022c 	.word	0x0003022c

000d4268 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4268:	b508      	push	{r3, lr}
   d426a:	4b02      	ldr	r3, [pc, #8]	; (d4274 <if_name_to_index+0xc>)
   d426c:	681b      	ldr	r3, [r3, #0]
   d426e:	691b      	ldr	r3, [r3, #16]
   d4270:	9301      	str	r3, [sp, #4]
   d4272:	bd08      	pop	{r3, pc}
   d4274:	0003026c 	.word	0x0003026c

000d4278 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4278:	b508      	push	{r3, lr}
   d427a:	4b02      	ldr	r3, [pc, #8]	; (d4284 <if_index_to_name+0xc>)
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	695b      	ldr	r3, [r3, #20]
   d4280:	9301      	str	r3, [sp, #4]
   d4282:	bd08      	pop	{r3, pc}
   d4284:	0003026c 	.word	0x0003026c

000d4288 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4288:	b508      	push	{r3, lr}
   d428a:	4b02      	ldr	r3, [pc, #8]	; (d4294 <if_get_by_index+0xc>)
   d428c:	681b      	ldr	r3, [r3, #0]
   d428e:	699b      	ldr	r3, [r3, #24]
   d4290:	9301      	str	r3, [sp, #4]
   d4292:	bd08      	pop	{r3, pc}
   d4294:	0003026c 	.word	0x0003026c

000d4298 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4298:	b508      	push	{r3, lr}
   d429a:	4b02      	ldr	r3, [pc, #8]	; (d42a4 <if_get_addrs+0xc>)
   d429c:	681b      	ldr	r3, [r3, #0]
   d429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	bd08      	pop	{r3, pc}
   d42a4:	0003026c 	.word	0x0003026c

000d42a8 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <if_free_if_addrs+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	0003026c 	.word	0x0003026c

000d42b8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <inet_inet_ntop+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	695b      	ldr	r3, [r3, #20]
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	00030264 	.word	0x00030264

000d42c8 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <inet_inet_pton+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	699b      	ldr	r3, [r3, #24]
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	00030264 	.word	0x00030264

000d42d8 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <inet_htonl+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	6a1b      	ldr	r3, [r3, #32]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030264 	.word	0x00030264

000d42e8 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <inet_ntohs+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030264 	.word	0x00030264

000d42f8 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <inet_htons+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	00030264 	.word	0x00030264

000d4308 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <netdb_freeaddrinfo+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	689b      	ldr	r3, [r3, #8]
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	00030268 	.word	0x00030268

000d4318 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <netdb_getaddrinfo+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	68db      	ldr	r3, [r3, #12]
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030268 	.word	0x00030268

000d4328 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <sock_bind+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	685b      	ldr	r3, [r3, #4]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030238 	.word	0x00030238

000d4338 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <sock_setsockopt+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	699b      	ldr	r3, [r3, #24]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030238 	.word	0x00030238

000d4348 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <sock_close+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	69db      	ldr	r3, [r3, #28]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030238 	.word	0x00030238

000d4358 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <sock_recvfrom+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030238 	.word	0x00030238

000d4368 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <sock_sendto+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030238 	.word	0x00030238

000d4378 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <sock_socket+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	00030238 	.word	0x00030238

000d4388 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <HAL_SPI_Init+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	69db      	ldr	r3, [r3, #28]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	00030230 	.word	0x00030230

000d4398 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <HAL_USART_Init+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	681b      	ldr	r3, [r3, #0]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	0003023c 	.word	0x0003023c

000d43a8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <HAL_USART_Write_Data+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	68db      	ldr	r3, [r3, #12]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	0003023c 	.word	0x0003023c

000d43b8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_USART_Available_Data+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	691b      	ldr	r3, [r3, #16]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	0003023c 	.word	0x0003023c

000d43c8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_USART_Read_Data+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	695b      	ldr	r3, [r3, #20]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	0003023c 	.word	0x0003023c

000d43d8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_USART_Peek_Data+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	699b      	ldr	r3, [r3, #24]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003023c 	.word	0x0003023c

000d43e8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_USART_Flush_Data+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	69db      	ldr	r3, [r3, #28]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	0003023c 	.word	0x0003023c

000d43f8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_USART_Available_Data_For_Write+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003023c 	.word	0x0003023c

000d4408 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_USB_USART_Init+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	681b      	ldr	r3, [r3, #0]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003024c 	.word	0x0003024c

000d4418 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_USB_USART_Begin+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	685b      	ldr	r3, [r3, #4]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003024c 	.word	0x0003024c

000d4428 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_USB_USART_Available_Data+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	691b      	ldr	r3, [r3, #16]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003024c 	.word	0x0003024c

000d4438 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	695b      	ldr	r3, [r3, #20]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003024c 	.word	0x0003024c

000d4448 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_USB_USART_Receive_Data+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	699b      	ldr	r3, [r3, #24]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003024c 	.word	0x0003024c

000d4458 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_USB_USART_Send_Data+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	69db      	ldr	r3, [r3, #28]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003024c 	.word	0x0003024c

000d4468 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_USB_USART_Flush_Data+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	6a1b      	ldr	r3, [r3, #32]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003024c 	.word	0x0003024c

000d4478 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <LED_SetSignalingColor+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	685b      	ldr	r3, [r3, #4]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030260 	.word	0x00030260

000d4488 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <LED_Signaling_Start+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	689b      	ldr	r3, [r3, #8]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030260 	.word	0x00030260

000d4498 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <LED_Signaling_Stop+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	68db      	ldr	r3, [r3, #12]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030260 	.word	0x00030260

000d44a8 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <LED_RGB_IsOverRidden+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	699b      	ldr	r3, [r3, #24]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030260 	.word	0x00030260

000d44b8 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <LED_On+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	69db      	ldr	r3, [r3, #28]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030260 	.word	0x00030260

000d44c8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <log_message+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030260 	.word	0x00030260

000d44d8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <system_mode+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	681b      	ldr	r3, [r3, #0]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030220 	.word	0x00030220

000d44e8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <set_system_mode+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	685b      	ldr	r3, [r3, #4]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030220 	.word	0x00030220

000d44f8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <system_thread_get_state+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030220 	.word	0x00030220

000d4508 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b03      	ldr	r3, [pc, #12]	; (d4518 <system_ctrl_set_app_request_handler+0x10>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4512:	9301      	str	r3, [sp, #4]
   d4514:	bd08      	pop	{r3, pc}
   d4516:	0000      	.short	0x0000
   d4518:	00030220 	.word	0x00030220

000d451c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b03      	ldr	r3, [pc, #12]	; (d452c <system_ctrl_set_result+0x10>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4526:	9301      	str	r3, [sp, #4]
   d4528:	bd08      	pop	{r3, pc}
   d452a:	0000      	.short	0x0000
   d452c:	00030220 	.word	0x00030220

000d4530 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b03      	ldr	r3, [pc, #12]	; (d4540 <system_invoke_event_handler+0x10>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d453a:	9301      	str	r3, [sp, #4]
   d453c:	bd08      	pop	{r3, pc}
   d453e:	0000      	.short	0x0000
   d4540:	00030220 	.word	0x00030220

000d4544 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <spark_process+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	689b      	ldr	r3, [r3, #8]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030244 	.word	0x00030244

000d4554 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <spark_cloud_flag_connected+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	695b      	ldr	r3, [r3, #20]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030244 	.word	0x00030244

000d4564 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <spark_sync_time_pending+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030244 	.word	0x00030244

000d4574 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030244 	.word	0x00030244

000d4584 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <network_connect+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	685b      	ldr	r3, [r3, #4]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030240 	.word	0x00030240

000d4594 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <network_connecting+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	689b      	ldr	r3, [r3, #8]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030240 	.word	0x00030240

000d45a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <network_disconnect+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	68db      	ldr	r3, [r3, #12]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030240 	.word	0x00030240

000d45b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <network_ready+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	691b      	ldr	r3, [r3, #16]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030240 	.word	0x00030240

000d45c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <network_on+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	695b      	ldr	r3, [r3, #20]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030240 	.word	0x00030240

000d45d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <network_off+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	699b      	ldr	r3, [r3, #24]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030240 	.word	0x00030240

000d45e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <network_listen+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	69db      	ldr	r3, [r3, #28]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030240 	.word	0x00030240

000d45f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <network_listening+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	6a1b      	ldr	r3, [r3, #32]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030240 	.word	0x00030240

000d4604 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <network_set_listen_timeout+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030240 	.word	0x00030240

000d4614 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <network_get_listen_timeout+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030240 	.word	0x00030240

000d4624 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <malloc+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	681b      	ldr	r3, [r3, #0]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003021c 	.word	0x0003021c

000d4634 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <free+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	685b      	ldr	r3, [r3, #4]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003021c 	.word	0x0003021c

000d4644 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <realloc+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	689b      	ldr	r3, [r3, #8]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003021c 	.word	0x0003021c

000d4654 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <siprintf+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	691b      	ldr	r3, [r3, #16]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003021c 	.word	0x0003021c

000d4664 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <siscanf+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	699b      	ldr	r3, [r3, #24]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	0003021c 	.word	0x0003021c

000d4674 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <abort+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003021c 	.word	0x0003021c

000d4684 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <_malloc_r+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003021c 	.word	0x0003021c

000d4694 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4694:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4696:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4698:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d469a:	b113      	cbz	r3, d46a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d469c:	2203      	movs	r2, #3
   d469e:	4601      	mov	r1, r0
   d46a0:	4798      	blx	r3
    }
   d46a2:	4620      	mov	r0, r4
   d46a4:	bd10      	pop	{r4, pc}

000d46a6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d46a6:	2200      	movs	r2, #0
   d46a8:	4611      	mov	r1, r2
   d46aa:	6840      	ldr	r0, [r0, #4]
   d46ac:	f7ff bfa2 	b.w	d45f4 <network_listening>

000d46b0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d46b0:	2200      	movs	r2, #0
   d46b2:	4611      	mov	r1, r2
   d46b4:	6840      	ldr	r0, [r0, #4]
   d46b6:	f7ff bfad 	b.w	d4614 <network_get_listen_timeout>

000d46ba <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d46ba:	2200      	movs	r2, #0
   d46bc:	6840      	ldr	r0, [r0, #4]
   d46be:	f7ff bfa1 	b.w	d4604 <network_set_listen_timeout>

000d46c2 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d46c2:	2200      	movs	r2, #0
   d46c4:	f081 0101 	eor.w	r1, r1, #1
   d46c8:	6840      	ldr	r0, [r0, #4]
   d46ca:	f7ff bf8b 	b.w	d45e4 <network_listen>

000d46ce <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d46ce:	2300      	movs	r3, #0
   d46d0:	461a      	mov	r2, r3
   d46d2:	4619      	mov	r1, r3
   d46d4:	6840      	ldr	r0, [r0, #4]
   d46d6:	f7ff bf7d 	b.w	d45d4 <network_off>

000d46da <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d46da:	2300      	movs	r3, #0
   d46dc:	461a      	mov	r2, r3
   d46de:	4619      	mov	r1, r3
   d46e0:	6840      	ldr	r0, [r0, #4]
   d46e2:	f7ff bf6f 	b.w	d45c4 <network_on>

000d46e6 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46e6:	2200      	movs	r2, #0
   d46e8:	4611      	mov	r1, r2
   d46ea:	6840      	ldr	r0, [r0, #4]
   d46ec:	f7ff bf62 	b.w	d45b4 <network_ready>

000d46f0 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46f0:	2200      	movs	r2, #0
   d46f2:	4611      	mov	r1, r2
   d46f4:	6840      	ldr	r0, [r0, #4]
   d46f6:	f7ff bf4d 	b.w	d4594 <network_connecting>

000d46fa <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46fa:	2200      	movs	r2, #0
   d46fc:	2102      	movs	r1, #2
   d46fe:	6840      	ldr	r0, [r0, #4]
   d4700:	f7ff bf50 	b.w	d45a4 <network_disconnect>

000d4704 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4704:	2300      	movs	r3, #0
   d4706:	461a      	mov	r2, r3
   d4708:	6840      	ldr	r0, [r0, #4]
   d470a:	f7ff bf3b 	b.w	d4584 <network_connect>
	...

000d4710 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4710:	4b02      	ldr	r3, [pc, #8]	; (d471c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4712:	2203      	movs	r2, #3
   d4714:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4716:	4a02      	ldr	r2, [pc, #8]	; (d4720 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4718:	601a      	str	r2, [r3, #0]
   d471a:	4770      	bx	lr
   d471c:	2003e4bc 	.word	0x2003e4bc
   d4720:	000d69e0 	.word	0x000d69e0

000d4724 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4724:	4770      	bx	lr

000d4726 <_ZN9IPAddressD0Ev>:
   d4726:	b510      	push	{r4, lr}
   d4728:	4604      	mov	r4, r0
   d472a:	f7ff fcb8 	bl	d409e <_ZdlPv>
   d472e:	4620      	mov	r0, r4
   d4730:	bd10      	pop	{r4, pc}

000d4732 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4732:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4734:	7d03      	ldrb	r3, [r0, #20]
   d4736:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4738:	b08d      	sub	sp, #52	; 0x34
   d473a:	460e      	mov	r6, r1
   d473c:	f100 0704 	add.w	r7, r0, #4
   d4740:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4744:	d002      	beq.n	d474c <_ZNK9IPAddress7printToER5Print+0x1a>
   d4746:	f100 0508 	add.w	r5, r0, #8
   d474a:	e018      	b.n	d477e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d474c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d474e:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4750:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4754:	232f      	movs	r3, #47	; 0x2f
   d4756:	462a      	mov	r2, r5
   d4758:	200a      	movs	r0, #10
   d475a:	f7ff fdad 	bl	d42b8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d475e:	4628      	mov	r0, r5
   d4760:	f001 fd5c 	bl	d621c <strlen>
   d4764:	6833      	ldr	r3, [r6, #0]
   d4766:	4602      	mov	r2, r0
   d4768:	68db      	ldr	r3, [r3, #12]
   d476a:	4629      	mov	r1, r5
   d476c:	4630      	mov	r0, r6
   d476e:	4798      	blx	r3
   d4770:	e00f      	b.n	d4792 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4772:	b124      	cbz	r4, d477e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4774:	212e      	movs	r1, #46	; 0x2e
   d4776:	4630      	mov	r0, r6
   d4778:	f000 fc18 	bl	d4fac <_ZN5Print5printEc>
   d477c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d477e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4782:	220a      	movs	r2, #10
   d4784:	4630      	mov	r0, r6
   d4786:	f000 fc57 	bl	d5038 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d478a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d478c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d478e:	d1f0      	bne.n	d4772 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4790:	4620      	mov	r0, r4
    }
    return n;
}
   d4792:	b00d      	add	sp, #52	; 0x34
   d4794:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4798 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4798:	b510      	push	{r4, lr}
   d479a:	4b05      	ldr	r3, [pc, #20]	; (d47b0 <_ZN9IPAddressC1Ev+0x18>)
   d479c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d479e:	2211      	movs	r2, #17
   d47a0:	f840 3b04 	str.w	r3, [r0], #4
   d47a4:	2100      	movs	r1, #0
   d47a6:	f001 fcf7 	bl	d6198 <memset>
{
    clear();
}
   d47aa:	4620      	mov	r0, r4
   d47ac:	bd10      	pop	{r4, pc}
   d47ae:	bf00      	nop
   d47b0:	000d6a14 	.word	0x000d6a14

000d47b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d47b4:	4603      	mov	r3, r0
   d47b6:	4a07      	ldr	r2, [pc, #28]	; (d47d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d47b8:	b510      	push	{r4, lr}
   d47ba:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d47be:	f101 0210 	add.w	r2, r1, #16
   d47c2:	f851 4b04 	ldr.w	r4, [r1], #4
   d47c6:	f843 4b04 	str.w	r4, [r3], #4
   d47ca:	4291      	cmp	r1, r2
   d47cc:	d1f9      	bne.n	d47c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d47ce:	780a      	ldrb	r2, [r1, #0]
   d47d0:	701a      	strb	r2, [r3, #0]
}
   d47d2:	bd10      	pop	{r4, pc}
   d47d4:	000d6a14 	.word	0x000d6a14

000d47d8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d47d8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d47da:	2b04      	cmp	r3, #4
   d47dc:	d101      	bne.n	d47e2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d47de:	6840      	ldr	r0, [r0, #4]
   d47e0:	e008      	b.n	d47f4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d47e2:	2b06      	cmp	r3, #6
   d47e4:	d10a      	bne.n	d47fc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d47e6:	6843      	ldr	r3, [r0, #4]
   d47e8:	b153      	cbz	r3, d4800 <_ZNK9IPAddresscvbEv+0x28>
   d47ea:	6883      	ldr	r3, [r0, #8]
   d47ec:	b143      	cbz	r3, d4800 <_ZNK9IPAddresscvbEv+0x28>
   d47ee:	68c3      	ldr	r3, [r0, #12]
   d47f0:	b133      	cbz	r3, d4800 <_ZNK9IPAddresscvbEv+0x28>
   d47f2:	6900      	ldr	r0, [r0, #16]
   d47f4:	3000      	adds	r0, #0
   d47f6:	bf18      	it	ne
   d47f8:	2001      	movne	r0, #1
   d47fa:	4770      	bx	lr
   d47fc:	2000      	movs	r0, #0
   d47fe:	4770      	bx	lr
   d4800:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d4802:	4770      	bx	lr

000d4804 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4804:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4806:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d480a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d480e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4812:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4816:	2304      	movs	r3, #4
   d4818:	6041      	str	r1, [r0, #4]
   d481a:	7503      	strb	r3, [r0, #20]
   d481c:	bd10      	pop	{r4, pc}

000d481e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d481e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4820:	780d      	ldrb	r5, [r1, #0]
   d4822:	788b      	ldrb	r3, [r1, #2]
   d4824:	784a      	ldrb	r2, [r1, #1]
   d4826:	78c9      	ldrb	r1, [r1, #3]
   d4828:	9100      	str	r1, [sp, #0]
   d482a:	4629      	mov	r1, r5
   d482c:	f7ff ffea 	bl	d4804 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4830:	b003      	add	sp, #12
   d4832:	bd30      	pop	{r4, r5, pc}

000d4834 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4834:	6800      	ldr	r0, [r0, #0]
   d4836:	f7ff bccf 	b.w	d41d8 <os_mutex_recursive_lock>
	...

000d483c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d483c:	4b01      	ldr	r3, [pc, #4]	; (d4844 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d483e:	4a02      	ldr	r2, [pc, #8]	; (d4848 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4840:	601a      	str	r2, [r3, #0]
   d4842:	4770      	bx	lr
   d4844:	2003e4c4 	.word	0x2003e4c4
   d4848:	000d6ad5 	.word	0x000d6ad5

000d484c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d484c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d484e:	2301      	movs	r3, #1
   d4850:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d4852:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4854:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d4856:	b10b      	cbz	r3, d485c <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d4858:	68c0      	ldr	r0, [r0, #12]
   d485a:	e006      	b.n	d486a <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d485c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d485e:	b128      	cbz	r0, d486c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4860:	6883      	ldr	r3, [r0, #8]
   d4862:	b90b      	cbnz	r3, d4868 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d4864:	f001 f9f1 	bl	d5c4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4868:	68c3      	ldr	r3, [r0, #12]
   d486a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d486c:	2301      	movs	r3, #1
   d486e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d4870:	2000      	movs	r0, #0
    }
   d4872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d4876:	f7ff bcbf 	b.w	d41f8 <os_thread_exit>

000d487a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d487a:	2200      	movs	r2, #0
   d487c:	4611      	mov	r1, r2
   d487e:	6840      	ldr	r0, [r0, #4]
   d4880:	f7ff beb8 	b.w	d45f4 <network_listening>

000d4884 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4884:	2200      	movs	r2, #0
   d4886:	4611      	mov	r1, r2
   d4888:	6840      	ldr	r0, [r0, #4]
   d488a:	f7ff bec3 	b.w	d4614 <network_get_listen_timeout>

000d488e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d488e:	2200      	movs	r2, #0
   d4890:	6840      	ldr	r0, [r0, #4]
   d4892:	f7ff beb7 	b.w	d4604 <network_set_listen_timeout>

000d4896 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4896:	2200      	movs	r2, #0
   d4898:	f081 0101 	eor.w	r1, r1, #1
   d489c:	6840      	ldr	r0, [r0, #4]
   d489e:	f7ff bea1 	b.w	d45e4 <network_listen>

000d48a2 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d48a2:	2300      	movs	r3, #0
   d48a4:	461a      	mov	r2, r3
   d48a6:	4619      	mov	r1, r3
   d48a8:	6840      	ldr	r0, [r0, #4]
   d48aa:	f7ff be93 	b.w	d45d4 <network_off>

000d48ae <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48ae:	2300      	movs	r3, #0
   d48b0:	461a      	mov	r2, r3
   d48b2:	4619      	mov	r1, r3
   d48b4:	6840      	ldr	r0, [r0, #4]
   d48b6:	f7ff be85 	b.w	d45c4 <network_on>

000d48ba <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48ba:	2200      	movs	r2, #0
   d48bc:	4611      	mov	r1, r2
   d48be:	6840      	ldr	r0, [r0, #4]
   d48c0:	f7ff be78 	b.w	d45b4 <network_ready>

000d48c4 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48c4:	2200      	movs	r2, #0
   d48c6:	4611      	mov	r1, r2
   d48c8:	6840      	ldr	r0, [r0, #4]
   d48ca:	f7ff be63 	b.w	d4594 <network_connecting>

000d48ce <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48ce:	2200      	movs	r2, #0
   d48d0:	2102      	movs	r1, #2
   d48d2:	6840      	ldr	r0, [r0, #4]
   d48d4:	f7ff be66 	b.w	d45a4 <network_disconnect>

000d48d8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48d8:	2300      	movs	r3, #0
   d48da:	461a      	mov	r2, r3
   d48dc:	6840      	ldr	r0, [r0, #4]
   d48de:	f7ff be51 	b.w	d4584 <network_connect>

000d48e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d48e2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d48e4:	4605      	mov	r5, r0
   d48e6:	b178      	cbz	r0, d4908 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d48e8:	6804      	ldr	r4, [r0, #0]
   d48ea:	b144      	cbz	r4, d48fe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d48ec:	68a3      	ldr	r3, [r4, #8]
   d48ee:	b11b      	cbz	r3, d48f8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48f0:	2203      	movs	r2, #3
   d48f2:	4621      	mov	r1, r4
   d48f4:	4620      	mov	r0, r4
   d48f6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d48f8:	4620      	mov	r0, r4
   d48fa:	f7ff fbd0 	bl	d409e <_ZdlPv>
   d48fe:	4628      	mov	r0, r5
      }
   d4900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4904:	f7ff bbcb 	b.w	d409e <_ZdlPv>
   d4908:	bd38      	pop	{r3, r4, r5, pc}

000d490a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d490a:	b110      	cbz	r0, d4912 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d490c:	6803      	ldr	r3, [r0, #0]
   d490e:	685b      	ldr	r3, [r3, #4]
   d4910:	4718      	bx	r3
   d4912:	4770      	bx	lr

000d4914 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4914:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4916:	6803      	ldr	r3, [r0, #0]
   d4918:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d491a:	b1bb      	cbz	r3, d494c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d491c:	6858      	ldr	r0, [r3, #4]
   d491e:	f7ff fc2b 	bl	d4178 <os_thread_is_current>
   d4922:	b978      	cbnz	r0, d4944 <_ZN6ThreadD1Ev+0x30>
   d4924:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4926:	7c5a      	ldrb	r2, [r3, #17]
   d4928:	b912      	cbnz	r2, d4930 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d492a:	6858      	ldr	r0, [r3, #4]
   d492c:	f7ff fc34 	bl	d4198 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4930:	6823      	ldr	r3, [r4, #0]
   d4932:	6858      	ldr	r0, [r3, #4]
   d4934:	f7ff fc38 	bl	d41a8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4938:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d493a:	2300      	movs	r3, #0
   d493c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d493e:	b128      	cbz	r0, d494c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4940:	f7ff ffcf 	bl	d48e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4944:	6820      	ldr	r0, [r4, #0]
   d4946:	b108      	cbz	r0, d494c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4948:	f7ff ffcb 	bl	d48e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d494c:	4620      	mov	r0, r4
   d494e:	bd10      	pop	{r4, pc}

000d4950 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4950:	b538      	push	{r3, r4, r5, lr}
   d4952:	4b0b      	ldr	r3, [pc, #44]	; (d4980 <_ZN5spark9MeshClassD1Ev+0x30>)
   d4954:	6003      	str	r3, [r0, #0]
   d4956:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4958:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d495c:	b108      	cbz	r0, d4962 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d495e:	f7ff fba0 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4962:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4966:	b12d      	cbz	r5, d4974 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4968:	4628      	mov	r0, r5
   d496a:	f7ff ffd3 	bl	d4914 <_ZN6ThreadD1Ev>
   d496e:	4628      	mov	r0, r5
   d4970:	f7ff fb95 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4974:	68a0      	ldr	r0, [r4, #8]
   d4976:	b108      	cbz	r0, d497c <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d4978:	f7ff ffc7 	bl	d490a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d497c:	4620      	mov	r0, r4
   d497e:	bd38      	pop	{r3, r4, r5, pc}
   d4980:	000d6b08 	.word	0x000d6b08

000d4984 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d4984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4988:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d498a:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d498e:	4606      	mov	r6, r0
   d4990:	4688      	mov	r8, r1
   d4992:	4691      	mov	r9, r2
   d4994:	469a      	mov	sl, r3
   d4996:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d4998:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d499a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d499c:	454b      	cmp	r3, r9
   d499e:	d129      	bne.n	d49f4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d49a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d49a2:	4553      	cmp	r3, sl
   d49a4:	d126      	bne.n	d49f4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d49a6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d49aa:	455b      	cmp	r3, fp
   d49ac:	d122      	bne.n	d49f4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d49ae:	2140      	movs	r1, #64	; 0x40
   d49b0:	4640      	mov	r0, r8
   d49b2:	f001 fc50 	bl	d6256 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d49b6:	4641      	mov	r1, r8
   d49b8:	4602      	mov	r2, r0
   d49ba:	4620      	mov	r0, r4
   d49bc:	f001 fc36 	bl	d622c <strncmp>
   d49c0:	b9c0      	cbnz	r0, d49f4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d49c2:	b16f      	cbz	r7, d49e0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d49c4:	210c      	movs	r1, #12
   d49c6:	4638      	mov	r0, r7
   d49c8:	f001 fc45 	bl	d6256 <strnlen>
                if (id_len)
   d49cc:	4602      	mov	r2, r0
   d49ce:	b138      	cbz	r0, d49e0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d49d0:	2358      	movs	r3, #88	; 0x58
   d49d2:	fb03 6005 	mla	r0, r3, r5, r6
   d49d6:	4639      	mov	r1, r7
   d49d8:	3049      	adds	r0, #73	; 0x49
   d49da:	f001 fc27 	bl	d622c <strncmp>
   d49de:	e004      	b.n	d49ea <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d49e0:	2058      	movs	r0, #88	; 0x58
   d49e2:	fb00 6505 	mla	r5, r0, r5, r6
   d49e6:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d49ea:	fab0 f080 	clz	r0, r0
   d49ee:	0940      	lsrs	r0, r0, #5
   d49f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d49f4:	3501      	adds	r5, #1
   d49f6:	2d05      	cmp	r5, #5
   d49f8:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d49fc:	d1cd      	bne.n	d499a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d49fe:	2000      	movs	r0, #0
}
   d4a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4a04 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d4a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a08:	b085      	sub	sp, #20
   d4a0a:	4607      	mov	r7, r0
   d4a0c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d4a10:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d4a12:	9601      	str	r6, [sp, #4]
   d4a14:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d4a18:	4689      	mov	r9, r1
   d4a1a:	9202      	str	r2, [sp, #8]
   d4a1c:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d4a1e:	f7ff ffb1 	bl	d4984 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d4a22:	2800      	cmp	r0, #0
   d4a24:	d13c      	bne.n	d4aa0 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d4a26:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d4a28:	2358      	movs	r3, #88	; 0x58
   d4a2a:	fb03 7504 	mla	r5, r3, r4, r7
   d4a2e:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d4a32:	f1b8 0f00 	cmp.w	r8, #0
   d4a36:	d12e      	bne.n	d4a96 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d4a38:	2140      	movs	r1, #64	; 0x40
   d4a3a:	4648      	mov	r0, r9
   d4a3c:	f001 fc0b 	bl	d6256 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d4a40:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d4a42:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d4a44:	4602      	mov	r2, r0
   d4a46:	4628      	mov	r0, r5
   d4a48:	f001 fb9b 	bl	d6182 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d4a4c:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d4a50:	4641      	mov	r1, r8
   d4a52:	eb05 000b 	add.w	r0, r5, fp
   d4a56:	f001 fb9f 	bl	d6198 <memset>
            event_handlers[i].handler = handler;
   d4a5a:	9b02      	ldr	r3, [sp, #8]
   d4a5c:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d4a5e:	9b03      	ldr	r3, [sp, #12]
   d4a60:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d4a62:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d4a66:	b12e      	cbz	r6, d4a74 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d4a68:	210c      	movs	r1, #12
   d4a6a:	4630      	mov	r0, r6
   d4a6c:	f001 fbf3 	bl	d6256 <strnlen>
   d4a70:	4605      	mov	r5, r0
   d4a72:	e000      	b.n	d4a76 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d4a74:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d4a76:	2058      	movs	r0, #88	; 0x58
   d4a78:	4344      	muls	r4, r0
   d4a7a:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d4a7c:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d4a7e:	462a      	mov	r2, r5
   d4a80:	4631      	mov	r1, r6
   d4a82:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d4a84:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d4a86:	f001 fb7c 	bl	d6182 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d4a8a:	2000      	movs	r0, #0
   d4a8c:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d4a90:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d4a94:	e005      	b.n	d4aa2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d4a96:	3401      	adds	r4, #1
   d4a98:	2c05      	cmp	r4, #5
   d4a9a:	d1c6      	bne.n	d4a2a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d4a9c:	4802      	ldr	r0, [pc, #8]	; (d4aa8 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d4a9e:	e000      	b.n	d4aa2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d4aa0:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d4aa2:	b005      	add	sp, #20
   d4aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4aa8:	fffffefc 	.word	0xfffffefc

000d4aac <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d4aac:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d4aae:	2300      	movs	r3, #0
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	9300      	str	r3, [sp, #0]
   d4ab4:	f7ff ffa6 	bl	d4a04 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d4ab8:	b003      	add	sp, #12
   d4aba:	f85d fb04 	ldr.w	pc, [sp], #4

000d4abe <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d4abe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4ac2:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d4ac4:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d4ac6:	460d      	mov	r5, r1
   d4ac8:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d4aca:	f001 fba7 	bl	d621c <strlen>
   d4ace:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d4ad2:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d4ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d4ad6:	b1ab      	cbz	r3, d4b04 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d4ad8:	2140      	movs	r1, #64	; 0x40
   d4ada:	4620      	mov	r0, r4
   d4adc:	f001 fbbb 	bl	d6256 <strnlen>

        if (event_name_length < filter_length)
   d4ae0:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d4ae2:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d4ae4:	d30b      	bcc.n	d4afe <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d4ae6:	4629      	mov	r1, r5
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f001 fb3b 	bl	d6164 <memcmp>
        if (0 == cmp)
   d4aee:	b930      	cbnz	r0, d4afe <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d4af0:	9000      	str	r0, [sp, #0]
   d4af2:	4643      	mov	r3, r8
   d4af4:	462a      	mov	r2, r5
   d4af6:	4621      	mov	r1, r4
   d4af8:	2058      	movs	r0, #88	; 0x58
   d4afa:	f7ff fd19 	bl	d4530 <system_invoke_event_handler>
   d4afe:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d4b00:	42b4      	cmp	r4, r6
   d4b02:	d1e7      	bne.n	d4ad4 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d4b04:	b002      	add	sp, #8
   d4b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4b0c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d4b0c:	b530      	push	{r4, r5, lr}
   d4b0e:	b08d      	sub	sp, #52	; 0x34
   d4b10:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d4b12:	2211      	movs	r2, #17
   d4b14:	2100      	movs	r1, #0
   d4b16:	a801      	add	r0, sp, #4
   d4b18:	f001 fb3e 	bl	d6198 <memset>
    addr.v = 6;
   d4b1c:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d4b1e:	aa01      	add	r2, sp, #4
   d4b20:	4909      	ldr	r1, [pc, #36]	; (d4b48 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d4b22:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d4b26:	200a      	movs	r0, #10
   d4b28:	f7ff fbce 	bl	d42c8 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4b2c:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d4b2e:	a901      	add	r1, sp, #4
   d4b30:	a806      	add	r0, sp, #24
   d4b32:	f7ff fe3f 	bl	d47b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b38:	3404      	adds	r4, #4
   d4b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b3c:	682b      	ldr	r3, [r5, #0]
   d4b3e:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d4b40:	2000      	movs	r0, #0
   d4b42:	b00d      	add	sp, #52	; 0x34
   d4b44:	bd30      	pop	{r4, r5, pc}
   d4b46:	bf00      	nop
   d4b48:	000d6b34 	.word	0x000d6b34

000d4b4c <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d4b4c:	b530      	push	{r4, r5, lr}
   d4b4e:	4604      	mov	r4, r0
   d4b50:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d4b52:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d4b56:	f7ff fe6d 	bl	d4834 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d4b5a:	6823      	ldr	r3, [r4, #0]
   d4b5c:	bb83      	cbnz	r3, d4bc0 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d4b5e:	204c      	movs	r0, #76	; 0x4c
   d4b60:	f7ff fa99 	bl	d4096 <_Znwj>
   d4b64:	4605      	mov	r5, r0
   d4b66:	b108      	cbz	r0, d4b6c <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d4b68:	f000 fe26 	bl	d57b8 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b6c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4b6e:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4b70:	b108      	cbz	r0, d4b76 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d4b72:	f7ff feca 	bl	d490a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4b76:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d4b78:	b320      	cbz	r0, d4bc4 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d4b7a:	2200      	movs	r2, #0
   d4b7c:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d4b80:	f000 fe49 	bl	d5816 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d4b84:	a908      	add	r1, sp, #32
   d4b86:	2500      	movs	r5, #0
   d4b88:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d4b8c:	4811      	ldr	r0, [pc, #68]	; (d4bd4 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d4b8e:	f7ff fb6b 	bl	d4268 <if_name_to_index>
   d4b92:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d4b94:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4b98:	6803      	ldr	r3, [r0, #0]
   d4b9a:	f249 0169 	movw	r1, #36969	; 0x9069
   d4b9e:	6a1b      	ldr	r3, [r3, #32]
   d4ba0:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d4ba2:	a802      	add	r0, sp, #8
   d4ba4:	f7ff fdf8 	bl	d4798 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d4ba8:	a802      	add	r0, sp, #8
   d4baa:	f7ff ffaf 	bl	d4b0c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d4bae:	2800      	cmp	r0, #0
   d4bb0:	db04      	blt.n	d4bbc <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d4bb2:	a902      	add	r1, sp, #8
   d4bb4:	6820      	ldr	r0, [r4, #0]
   d4bb6:	f000 fe98 	bl	d58ea <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d4bba:	e004      	b.n	d4bc6 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d4bbc:	4605      	mov	r5, r0
   d4bbe:	e002      	b.n	d4bc6 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d4bc0:	2500      	movs	r5, #0
   d4bc2:	e000      	b.n	d4bc6 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d4bc4:	4d04      	ldr	r5, [pc, #16]	; (d4bd8 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4bc6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4bca:	f7ff fb0d 	bl	d41e8 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d4bce:	4628      	mov	r0, r5
   d4bd0:	b009      	add	sp, #36	; 0x24
   d4bd2:	bd30      	pop	{r4, r5, pc}
   d4bd4:	000d6b41 	.word	0x000d6b41
   d4bd8:	fffffefc 	.word	0xfffffefc

000d4bdc <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d4bdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4be0:	4604      	mov	r4, r0
   d4be2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d4be6:	460f      	mov	r7, r1
   d4be8:	4690      	mov	r8, r2
   d4bea:	f7ff fe23 	bl	d4834 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d4bee:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d4bf2:	2e00      	cmp	r6, #0
   d4bf4:	d139      	bne.n	d4c6a <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8e>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d4bf6:	4928      	ldr	r1, [pc, #160]	; (d4c98 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xbc>)
   d4bf8:	2004      	movs	r0, #4
   d4bfa:	f001 f815 	bl	d5c28 <_ZnwjRKSt9nothrow_t>
   d4bfe:	4605      	mov	r5, r0
   d4c00:	b340      	cbz	r0, d4c54 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d4c02:	4925      	ldr	r1, [pc, #148]	; (d4c98 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xbc>)
   d4c04:	2014      	movs	r0, #20
   d4c06:	f001 f80f 	bl	d5c28 <_ZnwjRKSt9nothrow_t>
   d4c0a:	b128      	cbz	r0, d4c18 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x3c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d4c0c:	7406      	strb	r6, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4c0e:	6006      	str	r6, [r0, #0]
   d4c10:	6046      	str	r6, [r0, #4]
   d4c12:	6086      	str	r6, [r0, #8]
   d4c14:	60c6      	str	r6, [r0, #12]
   d4c16:	7446      	strb	r6, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c18:	6028      	str	r0, [r5, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d4c1a:	b1a8      	cbz	r0, d4c48 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x6c>
            goto error;
        }
        d_->func = function;
   d4c1c:	4b1f      	ldr	r3, [pc, #124]	; (d4c9c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc0>)
   d4c1e:	6083      	str	r3, [r0, #8]
   d4c20:	682b      	ldr	r3, [r5, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4c22:	491f      	ldr	r1, [pc, #124]	; (d4ca0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc4>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d4c24:	60dc      	str	r4, [r3, #12]
   d4c26:	6828      	ldr	r0, [r5, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4c28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d4c2c:	e88d 0009 	stmia.w	sp, {r0, r3}
   d4c30:	2203      	movs	r2, #3
   d4c32:	4b1c      	ldr	r3, [pc, #112]	; (d4ca4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc8>)
   d4c34:	3004      	adds	r0, #4
   d4c36:	f7ff fa97 	bl	d4168 <os_thread_create>
   d4c3a:	b928      	cbnz	r0, d4c48 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x6c>
   d4c3c:	682b      	ldr	r3, [r5, #0]
            goto error;
        }
        while (!d_->started) {
   d4c3e:	7c1b      	ldrb	r3, [r3, #16]
   d4c40:	b943      	cbnz	r3, d4c54 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
            os_thread_yield();
   d4c42:	f7ff faa1 	bl	d4188 <os_thread_yield>
   d4c46:	e7f9      	b.n	d4c3c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x60>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c48:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4c4a:	2300      	movs	r3, #0
   d4c4c:	602b      	str	r3, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4c4e:	b108      	cbz	r0, d4c54 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
	  get_deleter()(__p);
   d4c50:	f7ff fe47 	bl	d48e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c54:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d4c58:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4c5c:	b12e      	cbz	r6, d4c6a <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c5e:	4630      	mov	r0, r6
   d4c60:	f7ff fe58 	bl	d4914 <_ZN6ThreadD1Ev>
   d4c64:	4630      	mov	r0, r6
   d4c66:	f7ff fa1a 	bl	d409e <_ZdlPv>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	f7ff ff6e 	bl	d4b4c <_ZN5spark11MeshPublish14initialize_udpEv>
   d4c70:	2800      	cmp	r0, #0
   d4c72:	db07      	blt.n	d4c84 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xa8>
    CHECK(subscriptions.add(prefix, handler));
   d4c74:	4642      	mov	r2, r8
   d4c76:	4639      	mov	r1, r7
   d4c78:	1d20      	adds	r0, r4, #4
   d4c7a:	f7ff ff17 	bl	d4aac <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d4c7e:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d4c82:	e000      	b.n	d4c86 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xaa>
   d4c84:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4c86:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4c8a:	f7ff faad 	bl	d41e8 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d4c8e:	4628      	mov	r0, r5
   d4c90:	b002      	add	sp, #8
   d4c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c96:	bf00      	nop
   d4c98:	000d6ca0 	.word	0x000d6ca0
   d4c9c:	000d4db9 	.word	0x000d4db9
   d4ca0:	000d6b45 	.word	0x000d6b45
   d4ca4:	000d484d 	.word	0x000d484d

000d4ca8 <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d4ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4cac:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d4cae:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d4cb2:	b08a      	sub	sp, #40	; 0x28
   d4cb4:	4630      	mov	r0, r6
   d4cb6:	f7ff fdbd 	bl	d4834 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4cba:	682c      	ldr	r4, [r5, #0]
   d4cbc:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d4cc0:	f7ff fa92 	bl	d41e8 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d4cc4:	2c00      	cmp	r4, #0
   d4cc6:	d063      	beq.n	d4d90 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d4cc8:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d4ccc:	b163      	cbz	r3, d4ce8 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d4cce:	6823      	ldr	r3, [r4, #0]
   d4cd0:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d4cd4:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4cdc:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d4ce0:	47b8      	blx	r7
        if (len > 0) {
   d4ce2:	1e04      	subs	r4, r0, #0
   d4ce4:	dc13      	bgt.n	d4d0e <_ZN5spark11MeshPublish4pollEv+0x66>
   d4ce6:	e056      	b.n	d4d96 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d4ce8:	492d      	ldr	r1, [pc, #180]	; (d4da0 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d4cea:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d4cee:	f000 ffaa 	bl	d5c46 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cf2:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d4cf6:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d4cfa:	b113      	cbz	r3, d4d02 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4cfc:	4618      	mov	r0, r3
   d4cfe:	f7ff f9d0 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d4d02:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d4d06:	2b00      	cmp	r3, #0
   d4d08:	d1e1      	bne.n	d4cce <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d4d0a:	4826      	ldr	r0, [pc, #152]	; (d4da4 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d4d0c:	e044      	b.n	d4d98 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d4d0e:	2320      	movs	r3, #32
   d4d10:	4a25      	ldr	r2, [pc, #148]	; (d4da8 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d4d12:	9302      	str	r3, [sp, #8]
   d4d14:	9200      	str	r2, [sp, #0]
   d4d16:	2300      	movs	r3, #0
   d4d18:	9401      	str	r4, [sp, #4]
   d4d1a:	aa02      	add	r2, sp, #8
   d4d1c:	4923      	ldr	r1, [pc, #140]	; (d4dac <_ZN5spark11MeshPublish4pollEv+0x104>)
   d4d1e:	9303      	str	r3, [sp, #12]
   d4d20:	2001      	movs	r0, #1
   d4d22:	f7ff fbd1 	bl	d44c8 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4d26:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d4d2a:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d4d2c:	781b      	ldrb	r3, [r3, #0]
   d4d2e:	bb6b      	cbnz	r3, d4d8c <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d4d30:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d4d32:	4621      	mov	r1, r4
   d4d34:	4638      	mov	r0, r7
   d4d36:	f001 fa8e 	bl	d6256 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d4d3a:	b338      	cbz	r0, d4d8c <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d4d3c:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d4d3e:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d4d40:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d4d44:	dd22      	ble.n	d4d8c <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d4d46:	5c3b      	ldrb	r3, [r7, r0]
   d4d48:	bb03      	cbnz	r3, d4d8c <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d4d4a:	3c01      	subs	r4, #1
   d4d4c:	d00e      	beq.n	d4d6c <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d4d4e:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d4d52:	4621      	mov	r1, r4
   d4d54:	4640      	mov	r0, r8
   d4d56:	f001 fa7e 	bl	d6256 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d4d5a:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d4d5c:	2c00      	cmp	r4, #0
   d4d5e:	dd15      	ble.n	d4d8c <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d4d60:	f818 3000 	ldrb.w	r3, [r8, r0]
   d4d64:	b993      	cbnz	r3, d4d8c <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d4d66:	2c01      	cmp	r4, #1
   d4d68:	d002      	beq.n	d4d70 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d4d6a:	e00f      	b.n	d4d8c <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d4d6c:	f8df 8044 	ldr.w	r8, [pc, #68]	; d4db4 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d4d70:	4630      	mov	r0, r6
   d4d72:	f7ff fd5f 	bl	d4834 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d4d76:	4642      	mov	r2, r8
   d4d78:	4639      	mov	r1, r7
   d4d7a:	1d28      	adds	r0, r5, #4
   d4d7c:	f7ff fe9f 	bl	d4abe <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d4d80:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d4d84:	f7ff fa30 	bl	d41e8 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d4d88:	2000      	movs	r0, #0
   d4d8a:	e005      	b.n	d4d98 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d4d8c:	4808      	ldr	r0, [pc, #32]	; (d4db0 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d4d8e:	e003      	b.n	d4d98 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d4d90:	2064      	movs	r0, #100	; 0x64
   d4d92:	f7ff fa41 	bl	d4218 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d4d96:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d4d98:	b00a      	add	sp, #40	; 0x28
   d4d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d9e:	bf00      	nop
   d4da0:	000d6ca0 	.word	0x000d6ca0
   d4da4:	fffffefc 	.word	0xfffffefc
   d4da8:	000d6b54 	.word	0x000d6b54
   d4dac:	000d6b4d 	.word	0x000d6b4d
   d4db0:	fffffee8 	.word	0xfffffee8
   d4db4:	000d6a36 	.word	0x000d6a36

000d4db8 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d4dbc:	4620      	mov	r0, r4
   d4dbe:	f7ff ff73 	bl	d4ca8 <_ZN5spark11MeshPublish4pollEv>
   d4dc2:	e7fb      	b.n	d4dbc <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d4dc4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4dc4:	b538      	push	{r3, r4, r5, lr}
   d4dc6:	4c0d      	ldr	r4, [pc, #52]	; (d4dfc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4dc8:	4b0d      	ldr	r3, [pc, #52]	; (d4e00 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4dca:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4dcc:	2500      	movs	r5, #0
   d4dce:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4dd0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4dd4:	6063      	str	r3, [r4, #4]
   d4dd6:	60a5      	str	r5, [r4, #8]
   d4dd8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4ddc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4de0:	f7ff f9f2 	bl	d41c8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4de4:	4b07      	ldr	r3, [pc, #28]	; (d4e04 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4de6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4dea:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4dec:	4620      	mov	r0, r4
   d4dee:	4a06      	ldr	r2, [pc, #24]	; (d4e08 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4df0:	4906      	ldr	r1, [pc, #24]	; (d4e0c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4df6:	f000 bf09 	b.w	d5c0c <__aeabi_atexit>
   d4dfa:	bf00      	nop
   d4dfc:	2003e4c8 	.word	0x2003e4c8
   d4e00:	000d6b6c 	.word	0x000d6b6c
   d4e04:	000d6b08 	.word	0x000d6b08
   d4e08:	2003e4b4 	.word	0x2003e4b4
   d4e0c:	000d4951 	.word	0x000d4951

000d4e10 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4e10:	2300      	movs	r3, #0
   d4e12:	461a      	mov	r2, r3
   d4e14:	6840      	ldr	r0, [r0, #4]
   d4e16:	f7ff bbb5 	b.w	d4584 <network_connect>

000d4e1a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4e1a:	2200      	movs	r2, #0
   d4e1c:	2102      	movs	r1, #2
   d4e1e:	6840      	ldr	r0, [r0, #4]
   d4e20:	f7ff bbc0 	b.w	d45a4 <network_disconnect>

000d4e24 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4e24:	2200      	movs	r2, #0
   d4e26:	4611      	mov	r1, r2
   d4e28:	6840      	ldr	r0, [r0, #4]
   d4e2a:	f7ff bbb3 	b.w	d4594 <network_connecting>

000d4e2e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4e2e:	2200      	movs	r2, #0
   d4e30:	4611      	mov	r1, r2
   d4e32:	6840      	ldr	r0, [r0, #4]
   d4e34:	f7ff bbbe 	b.w	d45b4 <network_ready>

000d4e38 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4e38:	2300      	movs	r3, #0
   d4e3a:	461a      	mov	r2, r3
   d4e3c:	4619      	mov	r1, r3
   d4e3e:	6840      	ldr	r0, [r0, #4]
   d4e40:	f7ff bbc0 	b.w	d45c4 <network_on>

000d4e44 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4e44:	2300      	movs	r3, #0
   d4e46:	461a      	mov	r2, r3
   d4e48:	4619      	mov	r1, r3
   d4e4a:	6840      	ldr	r0, [r0, #4]
   d4e4c:	f7ff bbc2 	b.w	d45d4 <network_off>

000d4e50 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4e50:	2200      	movs	r2, #0
   d4e52:	f081 0101 	eor.w	r1, r1, #1
   d4e56:	6840      	ldr	r0, [r0, #4]
   d4e58:	f7ff bbc4 	b.w	d45e4 <network_listen>

000d4e5c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4e5c:	2200      	movs	r2, #0
   d4e5e:	6840      	ldr	r0, [r0, #4]
   d4e60:	f7ff bbd0 	b.w	d4604 <network_set_listen_timeout>

000d4e64 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4e64:	2200      	movs	r2, #0
   d4e66:	4611      	mov	r1, r2
   d4e68:	6840      	ldr	r0, [r0, #4]
   d4e6a:	f7ff bbd3 	b.w	d4614 <network_get_listen_timeout>

000d4e6e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4e6e:	2200      	movs	r2, #0
   d4e70:	4611      	mov	r1, r2
   d4e72:	6840      	ldr	r0, [r0, #4]
   d4e74:	f7ff bbbe 	b.w	d45f4 <network_listening>

000d4e78 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e7c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e7e:	b095      	sub	sp, #84	; 0x54
   d4e80:	4616      	mov	r6, r2
   d4e82:	460d      	mov	r5, r1
   d4e84:	4607      	mov	r7, r0
    IPAddress addr;
   d4e86:	f7ff fc87 	bl	d4798 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4e8a:	4621      	mov	r1, r4
   d4e8c:	2220      	movs	r2, #32
   d4e8e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e90:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4e92:	f001 f981 	bl	d6198 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4e96:	2340      	movs	r3, #64	; 0x40
   d4e98:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4e9a:	4621      	mov	r1, r4
   d4e9c:	466b      	mov	r3, sp
   d4e9e:	aa0c      	add	r2, sp, #48	; 0x30
   d4ea0:	4630      	mov	r0, r6
   d4ea2:	f7ff fa39 	bl	d4318 <netdb_getaddrinfo>
    if (!r) {
   d4ea6:	4604      	mov	r4, r0
   d4ea8:	2800      	cmp	r0, #0
   d4eaa:	d144      	bne.n	d4f36 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4eac:	4602      	mov	r2, r0
   d4eae:	2101      	movs	r1, #1
   d4eb0:	6868      	ldr	r0, [r5, #4]
   d4eb2:	f7ff fb7f 	bl	d45b4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4eb6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4eb8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4eba:	4622      	mov	r2, r4
   d4ebc:	6868      	ldr	r0, [r5, #4]
   d4ebe:	f7ff fb79 	bl	d45b4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ec2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ec4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4ec6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ec8:	2e00      	cmp	r6, #0
   d4eca:	d034      	beq.n	d4f36 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4ecc:	2900      	cmp	r1, #0
   d4ece:	d132      	bne.n	d4f36 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4ed0:	6873      	ldr	r3, [r6, #4]
   d4ed2:	2b02      	cmp	r3, #2
   d4ed4:	d002      	beq.n	d4edc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4ed6:	2b0a      	cmp	r3, #10
   d4ed8:	d009      	beq.n	d4eee <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4eda:	e02a      	b.n	d4f32 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4edc:	f1b8 0f00 	cmp.w	r8, #0
   d4ee0:	d027      	beq.n	d4f32 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4ee2:	6971      	ldr	r1, [r6, #20]
   d4ee4:	4638      	mov	r0, r7
   d4ee6:	3104      	adds	r1, #4
   d4ee8:	f7ff fc99 	bl	d481e <_ZN9IPAddressaSEPKh>
   d4eec:	e020      	b.n	d4f30 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4eee:	f1b9 0f00 	cmp.w	r9, #0
   d4ef2:	d01e      	beq.n	d4f32 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4ef4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4ef6:	2211      	movs	r2, #17
   d4ef8:	a801      	add	r0, sp, #4
   d4efa:	f001 f94d 	bl	d6198 <memset>
                    a.v = 6;
   d4efe:	2306      	movs	r3, #6
   d4f00:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4f04:	ad01      	add	r5, sp, #4
   d4f06:	f104 0308 	add.w	r3, r4, #8
   d4f0a:	3418      	adds	r4, #24
   d4f0c:	6818      	ldr	r0, [r3, #0]
   d4f0e:	6859      	ldr	r1, [r3, #4]
   d4f10:	462a      	mov	r2, r5
   d4f12:	c203      	stmia	r2!, {r0, r1}
   d4f14:	3308      	adds	r3, #8
   d4f16:	42a3      	cmp	r3, r4
   d4f18:	4615      	mov	r5, r2
   d4f1a:	d1f7      	bne.n	d4f0c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4f1c:	a901      	add	r1, sp, #4
   d4f1e:	a806      	add	r0, sp, #24
   d4f20:	ad07      	add	r5, sp, #28
   d4f22:	f7ff fc47 	bl	d47b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4f28:	1d3c      	adds	r4, r7, #4
   d4f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4f2c:	682b      	ldr	r3, [r5, #0]
   d4f2e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4f30:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4f32:	69f6      	ldr	r6, [r6, #28]
   d4f34:	e7c8      	b.n	d4ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4f36:	9800      	ldr	r0, [sp, #0]
   d4f38:	f7ff f9e6 	bl	d4308 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4f3c:	4638      	mov	r0, r7
   d4f3e:	b015      	add	sp, #84	; 0x54
   d4f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4f44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4f44:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4f46:	4a03      	ldr	r2, [pc, #12]	; (d4f54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4f48:	601a      	str	r2, [r3, #0]
   d4f4a:	2200      	movs	r2, #0
   d4f4c:	605a      	str	r2, [r3, #4]
   d4f4e:	4770      	bx	lr
   d4f50:	2003e698 	.word	0x2003e698
   d4f54:	000d6b6c 	.word	0x000d6b6c

000d4f58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f5a:	4606      	mov	r6, r0
   d4f5c:	460d      	mov	r5, r1
   d4f5e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4f60:	2400      	movs	r4, #0
  while (size--) {
   d4f62:	42bd      	cmp	r5, r7
   d4f64:	d00c      	beq.n	d4f80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4f66:	6833      	ldr	r3, [r6, #0]
   d4f68:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f6c:	689b      	ldr	r3, [r3, #8]
   d4f6e:	4630      	mov	r0, r6
   d4f70:	4798      	blx	r3
     if (chunk>=0)
   d4f72:	2800      	cmp	r0, #0
   d4f74:	db01      	blt.n	d4f7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4f76:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4f78:	e7f3      	b.n	d4f62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4f7a:	2c00      	cmp	r4, #0
   d4f7c:	bf08      	it	eq
   d4f7e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4f80:	4620      	mov	r0, r4
   d4f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f84 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4f84:	b570      	push	{r4, r5, r6, lr}
   d4f86:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4f88:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4f8a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4f8c:	b149      	cbz	r1, d4fa2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4f8e:	f001 f945 	bl	d621c <strlen>
   d4f92:	682b      	ldr	r3, [r5, #0]
   d4f94:	4602      	mov	r2, r0
   d4f96:	4621      	mov	r1, r4
   d4f98:	4628      	mov	r0, r5
   d4f9a:	68db      	ldr	r3, [r3, #12]
    }
   d4f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4fa0:	4718      	bx	r3
    }
   d4fa2:	bd70      	pop	{r4, r5, r6, pc}

000d4fa4 <_ZN5Print5printEPKc>:
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	f7ff ffed 	bl	d4f84 <_ZN5Print5writeEPKc>
   d4faa:	bd08      	pop	{r3, pc}

000d4fac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4fac:	6803      	ldr	r3, [r0, #0]
   d4fae:	689b      	ldr	r3, [r3, #8]
   d4fb0:	4718      	bx	r3

000d4fb2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4fb2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4fb4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4fb6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4fb8:	f7ff fff8 	bl	d4fac <_ZN5Print5printEc>
  n += print('\n');
   d4fbc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4fbe:	4604      	mov	r4, r0
  n += print('\n');
   d4fc0:	4628      	mov	r0, r5
   d4fc2:	f7ff fff3 	bl	d4fac <_ZN5Print5printEc>
  return n;
}
   d4fc6:	4420      	add	r0, r4
   d4fc8:	bd38      	pop	{r3, r4, r5, pc}

000d4fca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4fca:	b538      	push	{r3, r4, r5, lr}
   d4fcc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4fce:	f7ff ffd9 	bl	d4f84 <_ZN5Print5writeEPKc>
   d4fd2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4fd4:	4628      	mov	r0, r5
   d4fd6:	f7ff ffec 	bl	d4fb2 <_ZN5Print7printlnEv>
  return n;
}
   d4fda:	4420      	add	r0, r4
   d4fdc:	bd38      	pop	{r3, r4, r5, pc}

000d4fde <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4fde:	b530      	push	{r4, r5, lr}
   d4fe0:	b08b      	sub	sp, #44	; 0x2c
   d4fe2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4fe4:	2100      	movs	r1, #0
   d4fe6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4fea:	2a01      	cmp	r2, #1
   d4fec:	bf98      	it	ls
   d4fee:	220a      	movls	r2, #10
   d4ff0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4ff4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4ff8:	fb05 3312 	mls	r3, r5, r2, r3
   d4ffc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5000:	2b09      	cmp	r3, #9
   d5002:	bf94      	ite	ls
   d5004:	3330      	addls	r3, #48	; 0x30
   d5006:	3337      	addhi	r3, #55	; 0x37
   d5008:	b2db      	uxtb	r3, r3
   d500a:	4621      	mov	r1, r4
   d500c:	f804 3901 	strb.w	r3, [r4], #-1
   d5010:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5012:	2d00      	cmp	r5, #0
   d5014:	d1ee      	bne.n	d4ff4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5016:	f7ff ffb5 	bl	d4f84 <_ZN5Print5writeEPKc>
}
   d501a:	b00b      	add	sp, #44	; 0x2c
   d501c:	bd30      	pop	{r4, r5, pc}

000d501e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d501e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5020:	b92a      	cbnz	r2, d502e <_ZN5Print5printEmi+0x10>
   d5022:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5024:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5028:	689b      	ldr	r3, [r3, #8]
   d502a:	b2c9      	uxtb	r1, r1
   d502c:	4718      	bx	r3
  else return printNumber(n, base);
   d502e:	b2d2      	uxtb	r2, r2
}
   d5030:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5034:	f7ff bfd3 	b.w	d4fde <_ZN5Print11printNumberEmh>

000d5038 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5038:	f7ff bff1 	b.w	d501e <_ZN5Print5printEmi>

000d503c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d503c:	b510      	push	{r4, lr}
   d503e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5040:	f7ff fb28 	bl	d4694 <_ZNSt14_Function_baseD1Ev>
   d5044:	4620      	mov	r0, r4
   d5046:	bd10      	pop	{r4, pc}

000d5048 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d5048:	b510      	push	{r4, lr}
   d504a:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d504c:	f7ff fa2c 	bl	d44a8 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d5050:	4284      	cmp	r4, r0
   d5052:	d008      	beq.n	d5066 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d5054:	b11c      	cbz	r4, d505e <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d5056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d505a:	f7ff ba15 	b.w	d4488 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d505e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d5062:	f7ff ba19 	b.w	d4498 <LED_Signaling_Stop>
   d5066:	bd10      	pop	{r4, pc}

000d5068 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d5068:	b570      	push	{r4, r5, r6, lr}
   d506a:	4605      	mov	r5, r0
   d506c:	460e      	mov	r6, r1
   d506e:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d5070:	f7ff fa1a 	bl	d44a8 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d5074:	b150      	cbz	r0, d508c <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d5076:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d507a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d507e:	f7ff f9fb 	bl	d4478 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d5082:	20e7      	movs	r0, #231	; 0xe7
}
   d5084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d5088:	f7ff ba16 	b.w	d44b8 <LED_On>
   d508c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5090 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5090:	4803      	ldr	r0, [pc, #12]	; (d50a0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5092:	4a04      	ldr	r2, [pc, #16]	; (d50a4 <_GLOBAL__sub_I_RGB+0x14>)
   d5094:	4904      	ldr	r1, [pc, #16]	; (d50a8 <_GLOBAL__sub_I_RGB+0x18>)
   d5096:	2300      	movs	r3, #0
   d5098:	6083      	str	r3, [r0, #8]
   d509a:	f000 bdb7 	b.w	d5c0c <__aeabi_atexit>
   d509e:	bf00      	nop
   d50a0:	2003e6a0 	.word	0x2003e6a0
   d50a4:	2003e4b4 	.word	0x2003e4b4
   d50a8:	000d503d 	.word	0x000d503d

000d50ac <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d50ac:	4770      	bx	lr

000d50ae <_ZN8SPIClassD0Ev>:
   d50ae:	b510      	push	{r4, lr}
   d50b0:	4604      	mov	r4, r0
   d50b2:	f7fe fff4 	bl	d409e <_ZdlPv>
   d50b6:	4620      	mov	r0, r4
   d50b8:	bd10      	pop	{r4, pc}
	...

000d50bc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d50bc:	b570      	push	{r4, r5, r6, lr}
   d50be:	4b08      	ldr	r3, [pc, #32]	; (d50e0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d50c0:	6003      	str	r3, [r0, #0]
   d50c2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d50c4:	2500      	movs	r5, #0
   d50c6:	460e      	mov	r6, r1
   d50c8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d50cc:	f7ff f874 	bl	d41b8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d50d0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d50d2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d50d4:	f7ff f958 	bl	d4388 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d50d8:	60a5      	str	r5, [r4, #8]
}
   d50da:	4620      	mov	r0, r4
   d50dc:	bd70      	pop	{r4, r5, r6, pc}
   d50de:	bf00      	nop
   d50e0:	000d6ba0 	.word	0x000d6ba0

000d50e4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d50e4:	b510      	push	{r4, lr}
   d50e6:	4604      	mov	r4, r0
{
	free(buffer);
   d50e8:	6800      	ldr	r0, [r0, #0]
   d50ea:	f7ff faa3 	bl	d4634 <free>
}
   d50ee:	4620      	mov	r0, r4
   d50f0:	bd10      	pop	{r4, pc}

000d50f2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d50f2:	b510      	push	{r4, lr}
   d50f4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d50f6:	6800      	ldr	r0, [r0, #0]
   d50f8:	b108      	cbz	r0, d50fe <_ZN6String10invalidateEv+0xc>
   d50fa:	f7ff fa9b 	bl	d4634 <free>
	buffer = NULL;
   d50fe:	2300      	movs	r3, #0
   d5100:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5102:	60a3      	str	r3, [r4, #8]
   d5104:	6063      	str	r3, [r4, #4]
   d5106:	bd10      	pop	{r4, pc}

000d5108 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5108:	b538      	push	{r3, r4, r5, lr}
   d510a:	4604      	mov	r4, r0
   d510c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d510e:	6800      	ldr	r0, [r0, #0]
   d5110:	3101      	adds	r1, #1
   d5112:	f7ff fa97 	bl	d4644 <realloc>
	if (newbuffer) {
   d5116:	b110      	cbz	r0, d511e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5118:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d511c:	2001      	movs	r0, #1
	}
	return 0;
}
   d511e:	bd38      	pop	{r3, r4, r5, pc}

000d5120 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5120:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5122:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5124:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5126:	b113      	cbz	r3, d512e <_ZN6String7reserveEj+0xe>
   d5128:	6843      	ldr	r3, [r0, #4]
   d512a:	428b      	cmp	r3, r1
   d512c:	d207      	bcs.n	d513e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d512e:	4620      	mov	r0, r4
   d5130:	f7ff ffea 	bl	d5108 <_ZN6String12changeBufferEj>
   d5134:	b120      	cbz	r0, d5140 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5136:	68a3      	ldr	r3, [r4, #8]
   d5138:	b90b      	cbnz	r3, d513e <_ZN6String7reserveEj+0x1e>
   d513a:	6822      	ldr	r2, [r4, #0]
   d513c:	7013      	strb	r3, [r2, #0]
   d513e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5140:	bd10      	pop	{r4, pc}

000d5142 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5142:	b570      	push	{r4, r5, r6, lr}
   d5144:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5146:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5148:	4604      	mov	r4, r0
   d514a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d514c:	f7ff ffe8 	bl	d5120 <_ZN6String7reserveEj>
   d5150:	b918      	cbnz	r0, d515a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5152:	4620      	mov	r0, r4
   d5154:	f7ff ffcd 	bl	d50f2 <_ZN6String10invalidateEv>
		return *this;
   d5158:	e009      	b.n	d516e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d515a:	462a      	mov	r2, r5
   d515c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d515e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5160:	6820      	ldr	r0, [r4, #0]
   d5162:	f001 f80e 	bl	d6182 <memcpy>
	buffer[len] = 0;
   d5166:	6822      	ldr	r2, [r4, #0]
   d5168:	68a3      	ldr	r3, [r4, #8]
   d516a:	2100      	movs	r1, #0
   d516c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d516e:	4620      	mov	r0, r4
   d5170:	bd70      	pop	{r4, r5, r6, pc}

000d5172 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5172:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5174:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5176:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5178:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d517a:	6043      	str	r3, [r0, #4]
	len = 0;
   d517c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d517e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5180:	460d      	mov	r5, r1
   d5182:	b139      	cbz	r1, d5194 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5184:	4608      	mov	r0, r1
   d5186:	f001 f849 	bl	d621c <strlen>
   d518a:	4629      	mov	r1, r5
   d518c:	4602      	mov	r2, r0
   d518e:	4620      	mov	r0, r4
   d5190:	f7ff ffd7 	bl	d5142 <_ZN6String4copyEPKcj>
}
   d5194:	4620      	mov	r0, r4
   d5196:	bd38      	pop	{r3, r4, r5, pc}

000d5198 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5198:	4b04      	ldr	r3, [pc, #16]	; (d51ac <_GLOBAL__sub_I_System+0x14>)
   d519a:	2000      	movs	r0, #0
   d519c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d51a0:	7018      	strb	r0, [r3, #0]
   d51a2:	8058      	strh	r0, [r3, #2]
   d51a4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d51a6:	f7ff b99f 	b.w	d44e8 <set_system_mode>
   d51aa:	bf00      	nop
   d51ac:	2003e6b0 	.word	0x2003e6b0

000d51b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d51b0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d51b2:	2000      	movs	r0, #0
   d51b4:	f7ff f9d6 	bl	d4564 <spark_sync_time_pending>
   d51b8:	b128      	cbz	r0, d51c6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d51ba:	f7ff f9cb 	bl	d4554 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d51be:	f080 0001 	eor.w	r0, r0, #1
   d51c2:	b2c0      	uxtb	r0, r0
   d51c4:	bd08      	pop	{r3, pc}
   d51c6:	2001      	movs	r0, #1
    }
   d51c8:	bd08      	pop	{r3, pc}
	...

000d51cc <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d51cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d51ce:	4b0e      	ldr	r3, [pc, #56]	; (d5208 <_ZN9TimeClass7timeStrEl+0x3c>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	4419      	add	r1, r3
   d51d4:	4b0d      	ldr	r3, [pc, #52]	; (d520c <_ZN9TimeClass7timeStrEl+0x40>)
   d51d6:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d51d8:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d51da:	a802      	add	r0, sp, #8
   d51dc:	4419      	add	r1, r3
   d51de:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d51e2:	f000 fec7 	bl	d5f74 <localtime>
        char* ascstr = asctime(calendar_time);
   d51e6:	f000 fe7b 	bl	d5ee0 <asctime>
   d51ea:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d51ec:	f001 f816 	bl	d621c <strlen>
        ascstr[len-1] = 0; // remove final newline
   d51f0:	4428      	add	r0, r5
   d51f2:	2300      	movs	r3, #0
   d51f4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d51f8:	4629      	mov	r1, r5
   d51fa:	4620      	mov	r0, r4
   d51fc:	f7ff ffb9 	bl	d5172 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5200:	4620      	mov	r0, r4
   d5202:	b003      	add	sp, #12
   d5204:	bd30      	pop	{r4, r5, pc}
   d5206:	bf00      	nop
   d5208:	2003e6c0 	.word	0x2003e6c0
   d520c:	2003e6bc 	.word	0x2003e6bc

000d5210 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5210:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5212:	2000      	movs	r0, #0
   d5214:	f7ff f818 	bl	d4248 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5218:	4604      	mov	r4, r0
   d521a:	b968      	cbnz	r0, d5238 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d521c:	f7ff f95c 	bl	d44d8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5220:	2801      	cmp	r0, #1
   d5222:	d10b      	bne.n	d523c <_ZN9TimeClass7isValidEv+0x2c>
   d5224:	4620      	mov	r0, r4
   d5226:	f7ff f967 	bl	d44f8 <system_thread_get_state>
   d522a:	b938      	cbnz	r0, d523c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d522c:	f7ff ffc0 	bl	d51b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5230:	b930      	cbnz	r0, d5240 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5232:	f7ff f987 	bl	d4544 <spark_process>
   d5236:	e7f9      	b.n	d522c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5238:	2001      	movs	r0, #1
   d523a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d523c:	2000      	movs	r0, #0
   d523e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5240:	f7ff ffb6 	bl	d51b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5244:	2000      	movs	r0, #0
   d5246:	f7fe ffff 	bl	d4248 <HAL_RTC_Time_Is_Valid>
   d524a:	3000      	adds	r0, #0
   d524c:	bf18      	it	ne
   d524e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5250:	bd10      	pop	{r4, pc}

000d5252 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5252:	b508      	push	{r3, lr}
    (void)isValid();
   d5254:	f7ff ffdc 	bl	d5210 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d525c:	f7fe bfec 	b.w	d4238 <HAL_RTC_Get_UnixTime>

000d5260 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5260:	4b02      	ldr	r3, [pc, #8]	; (d526c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5262:	681a      	ldr	r2, [r3, #0]
   d5264:	4b02      	ldr	r3, [pc, #8]	; (d5270 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5266:	601a      	str	r2, [r3, #0]
   d5268:	4770      	bx	lr
   d526a:	bf00      	nop
   d526c:	2003e3fc 	.word	0x2003e3fc
   d5270:	2003e6b8 	.word	0x2003e6b8

000d5274 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5274:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5276:	6804      	ldr	r4, [r0, #0]
   d5278:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d527a:	46a4      	mov	ip, r4
    }
   d527c:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5280:	4760      	bx	ip

000d5282 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d5282:	6803      	ldr	r3, [r0, #0]
   d5284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5286:	4718      	bx	r3

000d5288 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d5288:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d528a:	4770      	bx	lr

000d528c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d528c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d528e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5290:	1a10      	subs	r0, r2, r0
   d5292:	4770      	bx	lr

000d5294 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5294:	b513      	push	{r0, r1, r4, lr}
   d5296:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d5298:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d529a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d529e:	68d4      	ldr	r4, [r2, #12]
   d52a0:	4619      	mov	r1, r3
   d52a2:	2201      	movs	r2, #1
   d52a4:	47a0      	blx	r4
}
   d52a6:	b002      	add	sp, #8
   d52a8:	bd10      	pop	{r4, pc}

000d52aa <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d52aa:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d52ac:	6803      	ldr	r3, [r0, #0]
   d52ae:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d52b0:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d52b2:	4798      	blx	r3
   d52b4:	b128      	cbz	r0, d52c2 <_ZN3UDP4readEv+0x18>
   d52b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d52b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d52ba:	1c59      	adds	r1, r3, #1
   d52bc:	86e1      	strh	r1, [r4, #54]	; 0x36
   d52be:	5cd0      	ldrb	r0, [r2, r3]
   d52c0:	bd10      	pop	{r4, pc}
   d52c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d52c6:	bd10      	pop	{r4, pc}

000d52c8 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d52c8:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d52ca:	6803      	ldr	r3, [r0, #0]
   d52cc:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d52ce:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d52d0:	4798      	blx	r3
   d52d2:	b118      	cbz	r0, d52dc <_ZN3UDP4peekEv+0x14>
   d52d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d52d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d52d8:	5cd0      	ldrb	r0, [r2, r3]
   d52da:	bd10      	pop	{r4, pc}
   d52dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d52e0:	bd10      	pop	{r4, pc}

000d52e2 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d52e2:	4770      	bx	lr

000d52e4 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d52e4:	b410      	push	{r4}
   d52e6:	4603      	mov	r3, r0
   d52e8:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d52ea:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d52ec:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d52ee:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d52f0:	6803      	ldr	r3, [r0, #0]
   d52f2:	1a52      	subs	r2, r2, r1
   d52f4:	68db      	ldr	r3, [r3, #12]
   d52f6:	4421      	add	r1, r4
}
   d52f8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d52fc:	4718      	bx	r3

000d52fe <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d52fe:	f1a0 0010 	sub.w	r0, r0, #16
   d5302:	f7ff bfef 	b.w	d52e4 <_ZNK3UDP7printToER5Print>

000d5306 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5306:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d5308:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d530a:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d530c:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5310:	4604      	mov	r4, r0
   d5312:	460f      	mov	r7, r1
   d5314:	4615      	mov	r5, r2
    stop();
   d5316:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d5318:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d531a:	4632      	mov	r2, r6
   d531c:	2100      	movs	r1, #0
   d531e:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5320:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5322:	f000 ff39 	bl	d6198 <memset>
    saddr.sin6_len = sizeof(saddr);
   d5326:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d532a:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d532c:	260a      	movs	r6, #10
   d532e:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d5332:	f7fe ffe1 	bl	d42f8 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5336:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5338:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d533c:	2102      	movs	r1, #2
   d533e:	4630      	mov	r0, r6
   d5340:	f7ff f81a 	bl	d4378 <sock_socket>

    if (_sock < 0) {
   d5344:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5346:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d5348:	db24      	blt.n	d5394 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d534a:	2204      	movs	r2, #4
   d534c:	9200      	str	r2, [sp, #0]
   d534e:	ab02      	add	r3, sp, #8
   d5350:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5354:	f7fe fff0 	bl	d4338 <sock_setsockopt>
   d5358:	b9e0      	cbnz	r0, d5394 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d535a:	b195      	cbz	r5, d5382 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d535c:	9003      	str	r0, [sp, #12]
   d535e:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d5362:	a903      	add	r1, sp, #12
   d5364:	b2e8      	uxtb	r0, r5
   d5366:	f7fe ff87 	bl	d4278 <if_index_to_name>
   d536a:	b998      	cbnz	r0, d5394 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d536c:	2306      	movs	r3, #6
   d536e:	9300      	str	r3, [sp, #0]
   d5370:	f241 020b 	movw	r2, #4107	; 0x100b
   d5374:	ab03      	add	r3, sp, #12
   d5376:	f640 71ff 	movw	r1, #4095	; 0xfff
   d537a:	6960      	ldr	r0, [r4, #20]
   d537c:	f7fe ffdc 	bl	d4338 <sock_setsockopt>
   d5380:	b940      	cbnz	r0, d5394 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d5382:	221c      	movs	r2, #28
   d5384:	a905      	add	r1, sp, #20
   d5386:	6960      	ldr	r0, [r4, #20]
   d5388:	f7fe ffce 	bl	d4328 <sock_bind>
   d538c:	b910      	cbnz	r0, d5394 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d538e:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d5390:	2001      	movs	r0, #1
   d5392:	e004      	b.n	d539e <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5394:	6823      	ldr	r3, [r4, #0]
   d5396:	4620      	mov	r0, r4
   d5398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d539a:	4798      	blx	r3
   d539c:	2000      	movs	r0, #0
    }
    return bound;
}
   d539e:	b00d      	add	sp, #52	; 0x34
   d53a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53a2 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d53a2:	b510      	push	{r4, lr}
   d53a4:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d53a6:	6940      	ldr	r0, [r0, #20]
   d53a8:	2800      	cmp	r0, #0
   d53aa:	db01      	blt.n	d53b0 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d53ac:	f7fe ffcc 	bl	d4348 <sock_close>
    }

    _sock = -1;
   d53b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d53b4:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d53b6:	2300      	movs	r3, #0
   d53b8:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d53ba:	8723      	strh	r3, [r4, #56]	; 0x38
   d53bc:	bd10      	pop	{r4, pc}

000d53be <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d53be:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d53c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d53c2:	4605      	mov	r5, r0
   d53c4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d53c6:	b113      	cbz	r3, d53ce <_ZN3UDP5writeEPKhj+0x10>
   d53c8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d53ca:	1a24      	subs	r4, r4, r0
   d53cc:	e000      	b.n	d53d0 <_ZN3UDP5writeEPKhj+0x12>
   d53ce:	461c      	mov	r4, r3
   d53d0:	4294      	cmp	r4, r2
   d53d2:	bf28      	it	cs
   d53d4:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d53d6:	4622      	mov	r2, r4
   d53d8:	4418      	add	r0, r3
   d53da:	f000 fed2 	bl	d6182 <memcpy>
    _offset += size;
   d53de:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d53e0:	4423      	add	r3, r4
   d53e2:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d53e4:	4620      	mov	r0, r4
   d53e6:	bd38      	pop	{r3, r4, r5, pc}

000d53e8 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d53e8:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d53ea:	6803      	ldr	r3, [r0, #0]
   d53ec:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d53ee:	4604      	mov	r4, r0
   d53f0:	460e      	mov	r6, r1
   d53f2:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d53f4:	4798      	blx	r3
   d53f6:	b188      	cbz	r0, d541c <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d53f8:	6823      	ldr	r3, [r4, #0]
   d53fa:	4620      	mov	r0, r4
   d53fc:	691b      	ldr	r3, [r3, #16]
   d53fe:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d5400:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5402:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5404:	4285      	cmp	r5, r0
   d5406:	bfa8      	it	ge
   d5408:	4605      	movge	r5, r0
   d540a:	4419      	add	r1, r3
   d540c:	462a      	mov	r2, r5
   d540e:	4630      	mov	r0, r6
   d5410:	f000 feb7 	bl	d6182 <memcpy>
        _offset += read;
   d5414:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5416:	442b      	add	r3, r5
   d5418:	86e3      	strh	r3, [r4, #54]	; 0x36
   d541a:	e001      	b.n	d5420 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d541c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d5420:	4628      	mov	r0, r5
   d5422:	bd70      	pop	{r4, r5, r6, pc}

000d5424 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5424:	b570      	push	{r4, r5, r6, lr}
   d5426:	4604      	mov	r4, r0
   d5428:	4b05      	ldr	r3, [pc, #20]	; (d5440 <_ZN3UDP8remoteIPEv+0x1c>)
   d542a:	f844 3b04 	str.w	r3, [r4], #4
   d542e:	f101 0520 	add.w	r5, r1, #32
   d5432:	4606      	mov	r6, r0
   d5434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5438:	682b      	ldr	r3, [r5, #0]
   d543a:	7023      	strb	r3, [r4, #0]
   d543c:	4630      	mov	r0, r6
   d543e:	bd70      	pop	{r4, r5, r6, pc}
   d5440:	000d6a14 	.word	0x000d6a14

000d5444 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5444:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5446:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5448:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d544a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d544c:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d544e:	4a0a      	ldr	r2, [pc, #40]	; (d5478 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5450:	9202      	str	r2, [sp, #8]
   d5452:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5454:	468e      	mov	lr, r1
   d5456:	4606      	mov	r6, r0
   d5458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d545a:	ac03      	add	r4, sp, #12
   d545c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d545e:	682b      	ldr	r3, [r5, #0]
   d5460:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5462:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d5466:	9300      	str	r3, [sp, #0]
   d5468:	4662      	mov	r2, ip
   d546a:	ab02      	add	r3, sp, #8
   d546c:	4671      	mov	r1, lr
   d546e:	4630      	mov	r0, r6
   d5470:	47b8      	blx	r7
    }
   d5472:	b009      	add	sp, #36	; 0x24
   d5474:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5476:	bf00      	nop
   d5478:	000d6a14 	.word	0x000d6a14

000d547c <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d547c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d547e:	6803      	ldr	r3, [r0, #0]
   d5480:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5484:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5486:	4b0d      	ldr	r3, [pc, #52]	; (d54bc <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5488:	b089      	sub	sp, #36	; 0x24
   d548a:	f100 0620 	add.w	r6, r0, #32
   d548e:	4604      	mov	r4, r0
   d5490:	9302      	str	r3, [sp, #8]
   d5492:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5494:	ad03      	add	r5, sp, #12
   d5496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5498:	6833      	ldr	r3, [r6, #0]
   d549a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d549c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d549e:	9300      	str	r3, [sp, #0]
   d54a0:	4672      	mov	r2, lr
   d54a2:	ab02      	add	r3, sp, #8
   d54a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d54a6:	4620      	mov	r0, r4
   d54a8:	47b8      	blx	r7
    flush(); // wait for send to complete
   d54aa:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d54ac:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d54ae:	69db      	ldr	r3, [r3, #28]
   d54b0:	4620      	mov	r0, r4
   d54b2:	4798      	blx	r3
    return result;
}
   d54b4:	4628      	mov	r0, r5
   d54b6:	b009      	add	sp, #36	; 0x24
   d54b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d54ba:	bf00      	nop
   d54bc:	000d6a14 	.word	0x000d6a14

000d54c0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d54c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d54c2:	7843      	ldrb	r3, [r0, #1]
   d54c4:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d54c6:	b08d      	sub	sp, #52	; 0x34
   d54c8:	4605      	mov	r5, r0
   d54ca:	460c      	mov	r4, r1
   d54cc:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d54ce:	d101      	bne.n	d54d4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d54d0:	1d01      	adds	r1, r0, #4
   d54d2:	e033      	b.n	d553c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d54d4:	2b0a      	cmp	r3, #10
   d54d6:	d135      	bne.n	d5544 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d54d8:	2211      	movs	r2, #17
   d54da:	2100      	movs	r1, #0
   d54dc:	a801      	add	r0, sp, #4
   d54de:	f000 fe5b 	bl	d6198 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d54e2:	68ab      	ldr	r3, [r5, #8]
   d54e4:	b943      	cbnz	r3, d54f8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d54e6:	68eb      	ldr	r3, [r5, #12]
   d54e8:	b933      	cbnz	r3, d54f8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d54ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d54ee:	692e      	ldr	r6, [r5, #16]
   d54f0:	f7fe fef2 	bl	d42d8 <inet_htonl>
   d54f4:	4286      	cmp	r6, r0
   d54f6:	d01f      	beq.n	d5538 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d54f8:	f105 0308 	add.w	r3, r5, #8
   d54fc:	ae01      	add	r6, sp, #4
   d54fe:	f105 0e18 	add.w	lr, r5, #24
   d5502:	6818      	ldr	r0, [r3, #0]
   d5504:	6859      	ldr	r1, [r3, #4]
   d5506:	4632      	mov	r2, r6
   d5508:	c203      	stmia	r2!, {r0, r1}
   d550a:	3308      	adds	r3, #8
   d550c:	4573      	cmp	r3, lr
   d550e:	4616      	mov	r6, r2
   d5510:	d1f7      	bne.n	d5502 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d5512:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5514:	a901      	add	r1, sp, #4
   d5516:	a806      	add	r0, sp, #24
   d5518:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d551a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d551e:	f7ff f949 	bl	d47b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5522:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5524:	3404      	adds	r4, #4
   d5526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5528:	6833      	ldr	r3, [r6, #0]
   d552a:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d552c:	b157      	cbz	r7, d5544 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d552e:	8868      	ldrh	r0, [r5, #2]
   d5530:	f7fe feda 	bl	d42e8 <inet_ntohs>
   d5534:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5536:	e005      	b.n	d5544 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5538:	f105 0114 	add.w	r1, r5, #20
   d553c:	4620      	mov	r0, r4
   d553e:	f7ff f96e 	bl	d481e <_ZN9IPAddressaSEPKh>
   d5542:	e7f3      	b.n	d552c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5544:	b00d      	add	sp, #52	; 0x34
   d5546:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5548 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d554c:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d554e:	ab0e      	add	r3, sp, #56	; 0x38
   d5550:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5552:	4606      	mov	r6, r0
   d5554:	4617      	mov	r7, r2
   d5556:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d5558:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d555c:	462a      	mov	r2, r5
   d555e:	4629      	mov	r1, r5
   d5560:	f7fe feda 	bl	d4318 <netdb_getaddrinfo>
   d5564:	2800      	cmp	r0, #0
   d5566:	db1f      	blt.n	d55a8 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5568:	9b01      	ldr	r3, [sp, #4]
   d556a:	b1fb      	cbz	r3, d55ac <_ZN3UDP11beginPacketEPKct+0x64>
   d556c:	695b      	ldr	r3, [r3, #20]
   d556e:	b1eb      	cbz	r3, d55ac <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d5570:	a802      	add	r0, sp, #8
   d5572:	f7ff f911 	bl	d4798 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5576:	9b01      	ldr	r3, [sp, #4]
   d5578:	462a      	mov	r2, r5
   d557a:	6958      	ldr	r0, [r3, #20]
   d557c:	a902      	add	r1, sp, #8
   d557e:	f7ff ff9f 	bl	d54c0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5582:	a802      	add	r0, sp, #8
   d5584:	f7ff f928 	bl	d47d8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5588:	b180      	cbz	r0, d55ac <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d558a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d558c:	ad03      	add	r5, sp, #12
   d558e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5592:	4b0b      	ldr	r3, [pc, #44]	; (d55c0 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5594:	9308      	str	r3, [sp, #32]
   d5596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5598:	ac09      	add	r4, sp, #36	; 0x24
   d559a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d559c:	682b      	ldr	r3, [r5, #0]
   d559e:	7023      	strb	r3, [r4, #0]
   d55a0:	463a      	mov	r2, r7
   d55a2:	a908      	add	r1, sp, #32
   d55a4:	4630      	mov	r0, r6
   d55a6:	47c0      	blx	r8
   d55a8:	4604      	mov	r4, r0
   d55aa:	e001      	b.n	d55b0 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d55ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d55b0:	9801      	ldr	r0, [sp, #4]
   d55b2:	f7fe fea9 	bl	d4308 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d55b6:	4620      	mov	r0, r4
   d55b8:	b00e      	add	sp, #56	; 0x38
   d55ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d55be:	bf00      	nop
   d55c0:	000d6a14 	.word	0x000d6a14

000d55c4 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d55c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d55c8:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d55cc:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d55d0:	b08c      	sub	sp, #48	; 0x30
   d55d2:	4605      	mov	r5, r0
   d55d4:	460c      	mov	r4, r1
   d55d6:	4617      	mov	r7, r2
   d55d8:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d55da:	db00      	blt.n	d55de <_ZN3UDP13receivePacketEPhjm+0x1a>
   d55dc:	b911      	cbnz	r1, d55e4 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d55de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d55e2:	e035      	b.n	d5650 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d55e4:	f04f 0a1c 	mov.w	sl, #28
   d55e8:	ae05      	add	r6, sp, #20
   d55ea:	4652      	mov	r2, sl
   d55ec:	2100      	movs	r1, #0
   d55ee:	4630      	mov	r0, r6
   d55f0:	f000 fdd2 	bl	d6198 <memset>
        socklen_t slen = sizeof(saddr);
   d55f4:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d55f8:	f1b9 0f00 	cmp.w	r9, #0
   d55fc:	d014      	beq.n	d5628 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d55fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5602:	fbb9 f1f2 	udiv	r1, r9, r2
   d5606:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d5608:	fb02 9111 	mls	r1, r2, r1, r9
   d560c:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d560e:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5610:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5612:	9300      	str	r3, [sp, #0]
   d5614:	f241 0206 	movw	r2, #4102	; 0x1006
   d5618:	ab03      	add	r3, sp, #12
   d561a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d561e:	4640      	mov	r0, r8
   d5620:	f7fe fe8a 	bl	d4338 <sock_setsockopt>
            if (ret) {
   d5624:	b108      	cbz	r0, d562a <_ZN3UDP13receivePacketEPhjm+0x66>
   d5626:	e013      	b.n	d5650 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d5628:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d562a:	ab02      	add	r3, sp, #8
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	4621      	mov	r1, r4
   d5630:	4603      	mov	r3, r0
   d5632:	9600      	str	r6, [sp, #0]
   d5634:	463a      	mov	r2, r7
   d5636:	6968      	ldr	r0, [r5, #20]
   d5638:	f7fe fe8e 	bl	d4358 <sock_recvfrom>
        if (ret >= 0) {
   d563c:	1e04      	subs	r4, r0, #0
   d563e:	db06      	blt.n	d564e <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5640:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5644:	f105 011c 	add.w	r1, r5, #28
   d5648:	4630      	mov	r0, r6
   d564a:	f7ff ff39 	bl	d54c0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d564e:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5650:	b00c      	add	sp, #48	; 0x30
   d5652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5656 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5656:	b538      	push	{r3, r4, r5, lr}
   d5658:	4605      	mov	r5, r0
   d565a:	4614      	mov	r4, r2
   d565c:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d565e:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5660:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5662:	d111      	bne.n	d5688 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5664:	231c      	movs	r3, #28
   d5666:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d5668:	230a      	movs	r3, #10
   d566a:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d566c:	f7fe fe44 	bl	d42f8 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5670:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5672:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5676:	1d2b      	adds	r3, r5, #4
   d5678:	3514      	adds	r5, #20
   d567a:	f853 2b04 	ldr.w	r2, [r3], #4
   d567e:	f844 2b04 	str.w	r2, [r4], #4
   d5682:	42ab      	cmp	r3, r5
   d5684:	d1f9      	bne.n	d567a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d5686:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d5688:	2b04      	cmp	r3, #4
   d568a:	d10a      	bne.n	d56a2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d568c:	2310      	movs	r3, #16
   d568e:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d5690:	2302      	movs	r3, #2
   d5692:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5694:	f7fe fe30 	bl	d42f8 <inet_htons>
   d5698:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d569a:	6868      	ldr	r0, [r5, #4]
   d569c:	f7fe fe1c 	bl	d42d8 <inet_htonl>
   d56a0:	6060      	str	r0, [r4, #4]
   d56a2:	bd38      	pop	{r3, r4, r5, pc}

000d56a4 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d56a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d56a8:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d56aa:	ac03      	add	r4, sp, #12
   d56ac:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d56ae:	4699      	mov	r9, r3
   d56b0:	4606      	mov	r6, r0
   d56b2:	460f      	mov	r7, r1
   d56b4:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d56b6:	2100      	movs	r1, #0
   d56b8:	462a      	mov	r2, r5
   d56ba:	4620      	mov	r0, r4
   d56bc:	f000 fd6c 	bl	d6198 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d56c0:	4622      	mov	r2, r4
   d56c2:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d56c6:	4648      	mov	r0, r9
   d56c8:	f7ff ffc5 	bl	d5656 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d56cc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d56d0:	b143      	cbz	r3, d56e4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d56d2:	e88d 0030 	stmia.w	sp, {r4, r5}
   d56d6:	2300      	movs	r3, #0
   d56d8:	4642      	mov	r2, r8
   d56da:	4639      	mov	r1, r7
   d56dc:	6970      	ldr	r0, [r6, #20]
   d56de:	f7fe fe43 	bl	d4368 <sock_sendto>
   d56e2:	e001      	b.n	d56e8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d56e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d56e8:	b00b      	add	sp, #44	; 0x2c
   d56ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d56ee <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d56ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56f0:	b091      	sub	sp, #68	; 0x44
   d56f2:	460c      	mov	r4, r1
   d56f4:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d56f6:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d56f8:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d56fa:	a809      	add	r0, sp, #36	; 0x24
   d56fc:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d56fe:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d5700:	f000 fd4a 	bl	d6198 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d5704:	aa09      	add	r2, sp, #36	; 0x24
   d5706:	2100      	movs	r1, #0
   d5708:	4620      	mov	r0, r4
   d570a:	f7ff ffa4 	bl	d5656 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d570e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5712:	2b02      	cmp	r3, #2
   d5714:	d12e      	bne.n	d5774 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d5716:	2300      	movs	r3, #0
   d5718:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d571a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d571c:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d571e:	b1dd      	cbz	r5, d5758 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5720:	a902      	add	r1, sp, #8
   d5722:	4628      	mov	r0, r5
   d5724:	f7fe fdb0 	bl	d4288 <if_get_by_index>
   d5728:	b9b0      	cbnz	r0, d5758 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d572a:	a910      	add	r1, sp, #64	; 0x40
   d572c:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5730:	9802      	ldr	r0, [sp, #8]
   d5732:	f7fe fdb1 	bl	d4298 <if_get_addrs>
   d5736:	b960      	cbnz	r0, d5752 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5738:	9b03      	ldr	r3, [sp, #12]
   d573a:	b153      	cbz	r3, d5752 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d573c:	68da      	ldr	r2, [r3, #12]
   d573e:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5740:	7851      	ldrb	r1, [r2, #1]
   d5742:	2902      	cmp	r1, #2
   d5744:	d103      	bne.n	d574e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d5746:	6852      	ldr	r2, [r2, #4]
   d5748:	b10a      	cbz	r2, d574e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d574a:	9205      	str	r2, [sp, #20]
   d574c:	e001      	b.n	d5752 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d574e:	681b      	ldr	r3, [r3, #0]
   d5750:	e7f3      	b.n	d573a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5752:	9803      	ldr	r0, [sp, #12]
   d5754:	f7fe fda8 	bl	d42a8 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d5758:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d575a:	f04f 0308 	mov.w	r3, #8
   d575e:	9300      	str	r3, [sp, #0]
   d5760:	bf18      	it	ne
   d5762:	2203      	movne	r2, #3
   d5764:	ab04      	add	r3, sp, #16
   d5766:	bf08      	it	eq
   d5768:	2204      	moveq	r2, #4
   d576a:	2100      	movs	r1, #0
   d576c:	4630      	mov	r0, r6
   d576e:	f7fe fde3 	bl	d4338 <sock_setsockopt>
   d5772:	e01e      	b.n	d57b2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5774:	2b0a      	cmp	r3, #10
   d5776:	d11a      	bne.n	d57ae <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d5778:	ac04      	add	r4, sp, #16
   d577a:	2214      	movs	r2, #20
   d577c:	2100      	movs	r1, #0
   d577e:	4620      	mov	r0, r4
   d5780:	f000 fd0a 	bl	d6198 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5784:	ab0b      	add	r3, sp, #44	; 0x2c
   d5786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5788:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d578a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d578e:	f04f 0314 	mov.w	r3, #20
   d5792:	9300      	str	r3, [sp, #0]
   d5794:	bf18      	it	ne
   d5796:	220c      	movne	r2, #12
   d5798:	4623      	mov	r3, r4
   d579a:	bf08      	it	eq
   d579c:	220d      	moveq	r2, #13
   d579e:	2129      	movs	r1, #41	; 0x29
   d57a0:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d57a2:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d57a4:	f7fe fdc8 	bl	d4338 <sock_setsockopt>
   d57a8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d57ac:	e001      	b.n	d57b2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d57ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d57b2:	b011      	add	sp, #68	; 0x44
   d57b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d57b8 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d57b8:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d57ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57be:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d57c0:	4b0b      	ldr	r3, [pc, #44]	; (d57f0 <_ZN3UDPC1Ev+0x38>)
   d57c2:	f103 0208 	add.w	r2, r3, #8
   d57c6:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57c8:	2500      	movs	r5, #0
   d57ca:	6103      	str	r3, [r0, #16]
   d57cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d57d0:	4604      	mov	r4, r0
   d57d2:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d57d4:	6002      	str	r2, [r0, #0]
   d57d6:	6143      	str	r3, [r0, #20]
   d57d8:	301c      	adds	r0, #28
   d57da:	f7fe ffdd 	bl	d4798 <_ZN9IPAddressC1Ev>
   d57de:	f44f 7300 	mov.w	r3, #512	; 0x200
   d57e2:	86e5      	strh	r5, [r4, #54]	; 0x36
   d57e4:	8725      	strh	r5, [r4, #56]	; 0x38
   d57e6:	63e5      	str	r5, [r4, #60]	; 0x3c
   d57e8:	6423      	str	r3, [r4, #64]	; 0x40
   d57ea:	6465      	str	r5, [r4, #68]	; 0x44
}
   d57ec:	4620      	mov	r0, r4
   d57ee:	bd38      	pop	{r3, r4, r5, pc}
   d57f0:	000d6bd0 	.word	0x000d6bd0

000d57f4 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d57f4:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d57f6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d57fa:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d57fc:	b11b      	cbz	r3, d5806 <_ZN3UDP13releaseBufferEv+0x12>
   d57fe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5800:	b108      	cbz	r0, d5806 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d5802:	f7fe fc4c 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d5806:	2300      	movs	r3, #0
   d5808:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d580a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d580e:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5810:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5812:	8723      	strh	r3, [r4, #56]	; 0x38
   d5814:	bd10      	pop	{r4, pc}

000d5816 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5816:	b570      	push	{r4, r5, r6, lr}
   d5818:	4604      	mov	r4, r0
   d581a:	4616      	mov	r6, r2
   d581c:	460d      	mov	r5, r1
    releaseBuffer();
   d581e:	f7ff ffe9 	bl	d57f4 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5822:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5824:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5826:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5828:	b93e      	cbnz	r6, d583a <_ZN3UDP9setBufferEjPh+0x24>
   d582a:	b135      	cbz	r5, d583a <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d582c:	4628      	mov	r0, r5
   d582e:	f7fe fc34 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d5832:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d5834:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5836:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d583a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d583c:	b103      	cbz	r3, d5840 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d583e:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5840:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5842:	3000      	adds	r0, #0
   d5844:	bf18      	it	ne
   d5846:	2001      	movne	r0, #1
   d5848:	bd70      	pop	{r4, r5, r6, pc}

000d584a <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d584a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d584c:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d584e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5850:	4605      	mov	r5, r0
   d5852:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5854:	b91a      	cbnz	r2, d585e <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d5856:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5858:	b109      	cbz	r1, d585e <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d585a:	f7ff ffdc 	bl	d5816 <_ZN3UDP9setBufferEjPh>
   d585e:	3404      	adds	r4, #4
   d5860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5862:	f105 0620 	add.w	r6, r5, #32
   d5866:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5868:	6823      	ldr	r3, [r4, #0]
   d586a:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d586c:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d586e:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5870:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5872:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5874:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d5876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5878 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5878:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d587a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d587c:	4604      	mov	r4, r0
   d587e:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d5880:	b91a      	cbnz	r2, d588a <_ZN3UDP11parsePacketEm+0x12>
   d5882:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5884:	b109      	cbz	r1, d588a <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d5886:	f7ff ffc6 	bl	d5816 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d588a:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d588c:	2200      	movs	r2, #0
   d588e:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d5890:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5892:	b149      	cbz	r1, d58a8 <_ZN3UDP11parsePacketEm+0x30>
   d5894:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5896:	b13a      	cbz	r2, d58a8 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d5898:	6823      	ldr	r3, [r4, #0]
   d589a:	4620      	mov	r0, r4
   d589c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d589e:	4633      	mov	r3, r6
   d58a0:	47a8      	blx	r5
        if (result > 0) {
   d58a2:	2800      	cmp	r0, #0
            _total = result;
   d58a4:	bfc8      	it	gt
   d58a6:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d58a8:	6823      	ldr	r3, [r4, #0]
   d58aa:	4620      	mov	r0, r4
   d58ac:	691b      	ldr	r3, [r3, #16]
}
   d58ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d58b2:	4718      	bx	r3

000d58b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d58b4:	b510      	push	{r4, lr}
   d58b6:	4b07      	ldr	r3, [pc, #28]	; (d58d4 <_ZN3UDPD1Ev+0x20>)
   d58b8:	f103 0208 	add.w	r2, r3, #8
   d58bc:	336c      	adds	r3, #108	; 0x6c
   d58be:	4604      	mov	r4, r0
   d58c0:	6002      	str	r2, [r0, #0]
   d58c2:	6103      	str	r3, [r0, #16]
   d58c4:	f7ff fd6d 	bl	d53a2 <_ZN3UDP4stopEv>
   d58c8:	4620      	mov	r0, r4
   d58ca:	f7ff ff93 	bl	d57f4 <_ZN3UDP13releaseBufferEv>
   d58ce:	4620      	mov	r0, r4
   d58d0:	bd10      	pop	{r4, pc}
   d58d2:	bf00      	nop
   d58d4:	000d6bd0 	.word	0x000d6bd0

000d58d8 <_ZN3UDPD0Ev>:
   d58d8:	b510      	push	{r4, lr}
   d58da:	4604      	mov	r4, r0
   d58dc:	f7ff ffea 	bl	d58b4 <_ZN3UDPD1Ev>
   d58e0:	4620      	mov	r0, r4
   d58e2:	f7fe fbdc 	bl	d409e <_ZdlPv>
   d58e6:	4620      	mov	r0, r4
   d58e8:	bd10      	pop	{r4, pc}

000d58ea <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d58ea:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d58ec:	6940      	ldr	r0, [r0, #20]
   d58ee:	2800      	cmp	r0, #0
   d58f0:	db04      	blt.n	d58fc <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d58f2:	2301      	movs	r3, #1
   d58f4:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d58f8:	f7ff bef9 	b.w	d56ee <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d58fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5900:	4770      	bx	lr

000d5902 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5902:	4770      	bx	lr

000d5904 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5904:	7441      	strb	r1, [r0, #17]
   d5906:	4770      	bx	lr

000d5908 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5908:	7c00      	ldrb	r0, [r0, #16]
   d590a:	f7fe bd75 	b.w	d43f8 <HAL_USART_Available_Data_For_Write>

000d590e <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d590e:	7c00      	ldrb	r0, [r0, #16]
   d5910:	f7fe bd52 	b.w	d43b8 <HAL_USART_Available_Data>

000d5914 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5914:	7c00      	ldrb	r0, [r0, #16]
   d5916:	f7fe bd5f 	b.w	d43d8 <HAL_USART_Peek_Data>

000d591a <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d591a:	7c00      	ldrb	r0, [r0, #16]
   d591c:	f7fe bd54 	b.w	d43c8 <HAL_USART_Read_Data>

000d5920 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5920:	7c00      	ldrb	r0, [r0, #16]
   d5922:	f7fe bd61 	b.w	d43e8 <HAL_USART_Flush_Data>

000d5926 <_ZN11USARTSerialD0Ev>:
   d5926:	b510      	push	{r4, lr}
   d5928:	4604      	mov	r4, r0
   d592a:	f7fe fbb8 	bl	d409e <_ZdlPv>
   d592e:	4620      	mov	r0, r4
   d5930:	bd10      	pop	{r4, pc}

000d5932 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5932:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5934:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5936:	4604      	mov	r4, r0
   d5938:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d593a:	b925      	cbnz	r5, d5946 <_ZN11USARTSerial5writeEh+0x14>
   d593c:	7c00      	ldrb	r0, [r0, #16]
   d593e:	f7fe fd5b 	bl	d43f8 <HAL_USART_Available_Data_For_Write>
   d5942:	2800      	cmp	r0, #0
   d5944:	dd05      	ble.n	d5952 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5946:	4631      	mov	r1, r6
   d5948:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d594a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d594e:	f7fe bd2b 	b.w	d43a8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5952:	4628      	mov	r0, r5
   d5954:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5958 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5958:	b510      	push	{r4, lr}
   d595a:	4604      	mov	r4, r0
   d595c:	4608      	mov	r0, r1
   d595e:	4611      	mov	r1, r2
   d5960:	2200      	movs	r2, #0
   d5962:	6062      	str	r2, [r4, #4]
   d5964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5968:	60a2      	str	r2, [r4, #8]
   d596a:	4a05      	ldr	r2, [pc, #20]	; (d5980 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d596c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d596e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5970:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5972:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5974:	461a      	mov	r2, r3
   d5976:	f7fe fd0f 	bl	d4398 <HAL_USART_Init>
}
   d597a:	4620      	mov	r0, r4
   d597c:	bd10      	pop	{r4, pc}
   d597e:	bf00      	nop
   d5980:	000d6c48 	.word	0x000d6c48

000d5984 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5986:	4c19      	ldr	r4, [pc, #100]	; (d59ec <_Z22__fetch_global_Serial1v+0x68>)
   d5988:	6825      	ldr	r5, [r4, #0]
   d598a:	b94d      	cbnz	r5, d59a0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d598c:	2084      	movs	r0, #132	; 0x84
   d598e:	f7fe fb82 	bl	d4096 <_Znwj>
   d5992:	4606      	mov	r6, r0
   d5994:	b118      	cbz	r0, d599e <_Z22__fetch_global_Serial1v+0x1a>
   d5996:	2284      	movs	r2, #132	; 0x84
   d5998:	4629      	mov	r1, r5
   d599a:	f000 fbfd 	bl	d6198 <memset>
   d599e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d59a0:	4d13      	ldr	r5, [pc, #76]	; (d59f0 <_Z22__fetch_global_Serial1v+0x6c>)
   d59a2:	682e      	ldr	r6, [r5, #0]
   d59a4:	b94e      	cbnz	r6, d59ba <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d59a6:	2084      	movs	r0, #132	; 0x84
   d59a8:	f7fe fb75 	bl	d4096 <_Znwj>
   d59ac:	4607      	mov	r7, r0
   d59ae:	b118      	cbz	r0, d59b8 <_Z22__fetch_global_Serial1v+0x34>
   d59b0:	2284      	movs	r2, #132	; 0x84
   d59b2:	4631      	mov	r1, r6
   d59b4:	f000 fbf0 	bl	d6198 <memset>
   d59b8:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d59ba:	4f0e      	ldr	r7, [pc, #56]	; (d59f4 <_Z22__fetch_global_Serial1v+0x70>)
   d59bc:	6839      	ldr	r1, [r7, #0]
   d59be:	f011 0601 	ands.w	r6, r1, #1
   d59c2:	d111      	bne.n	d59e8 <_Z22__fetch_global_Serial1v+0x64>
   d59c4:	4638      	mov	r0, r7
   d59c6:	f7fe fb6e 	bl	d40a6 <__cxa_guard_acquire>
   d59ca:	b168      	cbz	r0, d59e8 <_Z22__fetch_global_Serial1v+0x64>
   d59cc:	6822      	ldr	r2, [r4, #0]
   d59ce:	682b      	ldr	r3, [r5, #0]
   d59d0:	4809      	ldr	r0, [pc, #36]	; (d59f8 <_Z22__fetch_global_Serial1v+0x74>)
   d59d2:	4631      	mov	r1, r6
   d59d4:	f7ff ffc0 	bl	d5958 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d59d8:	4638      	mov	r0, r7
   d59da:	f7fe fb69 	bl	d40b0 <__cxa_guard_release>
   d59de:	4a07      	ldr	r2, [pc, #28]	; (d59fc <_Z22__fetch_global_Serial1v+0x78>)
   d59e0:	4907      	ldr	r1, [pc, #28]	; (d5a00 <_Z22__fetch_global_Serial1v+0x7c>)
   d59e2:	4805      	ldr	r0, [pc, #20]	; (d59f8 <_Z22__fetch_global_Serial1v+0x74>)
   d59e4:	f000 f912 	bl	d5c0c <__aeabi_atexit>
#endif
	return serial1;
}
   d59e8:	4803      	ldr	r0, [pc, #12]	; (d59f8 <_Z22__fetch_global_Serial1v+0x74>)
   d59ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d59ec:	2003e6e0 	.word	0x2003e6e0
   d59f0:	2003e6d8 	.word	0x2003e6d8
   d59f4:	2003e6dc 	.word	0x2003e6dc
   d59f8:	2003e6c4 	.word	0x2003e6c4
   d59fc:	2003e4b4 	.word	0x2003e4b4
   d5a00:	000d5903 	.word	0x000d5903

000d5a04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a04:	7441      	strb	r1, [r0, #17]
   d5a06:	4770      	bx	lr

000d5a08 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5a08:	4770      	bx	lr

000d5a0a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5a0a:	2100      	movs	r1, #0
   d5a0c:	7c00      	ldrb	r0, [r0, #16]
   d5a0e:	f7fe bd1b 	b.w	d4448 <HAL_USB_USART_Receive_Data>

000d5a12 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5a12:	2101      	movs	r1, #1
   d5a14:	7c00      	ldrb	r0, [r0, #16]
   d5a16:	f7fe bd17 	b.w	d4448 <HAL_USB_USART_Receive_Data>

000d5a1a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5a1a:	7c00      	ldrb	r0, [r0, #16]
   d5a1c:	f7fe bd0c 	b.w	d4438 <HAL_USB_USART_Available_Data_For_Write>

000d5a20 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5a20:	7c00      	ldrb	r0, [r0, #16]
   d5a22:	f7fe bd01 	b.w	d4428 <HAL_USB_USART_Available_Data>

000d5a26 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5a26:	b538      	push	{r3, r4, r5, lr}
   d5a28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a2a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5a2c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a2e:	f7fe fd03 	bl	d4438 <HAL_USB_USART_Available_Data_For_Write>
   d5a32:	2800      	cmp	r0, #0
   d5a34:	dc01      	bgt.n	d5a3a <_ZN9USBSerial5writeEh+0x14>
   d5a36:	7c60      	ldrb	r0, [r4, #17]
   d5a38:	b120      	cbz	r0, d5a44 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5a3a:	4629      	mov	r1, r5
   d5a3c:	7c20      	ldrb	r0, [r4, #16]
   d5a3e:	f7fe fd0b 	bl	d4458 <HAL_USB_USART_Send_Data>
    return 1;
   d5a42:	2001      	movs	r0, #1
  }
  return 0;
}
   d5a44:	bd38      	pop	{r3, r4, r5, pc}

000d5a46 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5a46:	7c00      	ldrb	r0, [r0, #16]
   d5a48:	f7fe bd0e 	b.w	d4468 <HAL_USB_USART_Flush_Data>

000d5a4c <_ZN9USBSerialD0Ev>:
   d5a4c:	b510      	push	{r4, lr}
   d5a4e:	4604      	mov	r4, r0
   d5a50:	f7fe fb25 	bl	d409e <_ZdlPv>
   d5a54:	4620      	mov	r0, r4
   d5a56:	bd10      	pop	{r4, pc}

000d5a58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a58:	b510      	push	{r4, lr}
   d5a5a:	4604      	mov	r4, r0
   d5a5c:	2300      	movs	r3, #0
   d5a5e:	6063      	str	r3, [r4, #4]
   d5a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a64:	60a3      	str	r3, [r4, #8]
   d5a66:	4b05      	ldr	r3, [pc, #20]	; (d5a7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5a68:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5a6a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a6c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5a6e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5a70:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5a72:	4611      	mov	r1, r2
   d5a74:	f7fe fcc8 	bl	d4408 <HAL_USB_USART_Init>
}
   d5a78:	4620      	mov	r0, r4
   d5a7a:	bd10      	pop	{r4, pc}
   d5a7c:	000d6c78 	.word	0x000d6c78

000d5a80 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5a80:	2200      	movs	r2, #0
   d5a82:	7c00      	ldrb	r0, [r0, #16]
   d5a84:	f7fe bcc8 	b.w	d4418 <HAL_USB_USART_Begin>

000d5a88 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a88:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5a8a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a8c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5a8e:	2100      	movs	r1, #0
   d5a90:	f000 fb82 	bl	d6198 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5a94:	4620      	mov	r0, r4
   d5a96:	bd10      	pop	{r4, pc}

000d5a98 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5a98:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a9a:	4d0e      	ldr	r5, [pc, #56]	; (d5ad4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5a9c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5a9e:	a801      	add	r0, sp, #4
   d5aa0:	f7ff fff2 	bl	d5a88 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5aa4:	6829      	ldr	r1, [r5, #0]
   d5aa6:	f011 0401 	ands.w	r4, r1, #1
   d5aaa:	d110      	bne.n	d5ace <_Z16_fetch_usbserialv+0x36>
   d5aac:	4628      	mov	r0, r5
   d5aae:	f7fe fafa 	bl	d40a6 <__cxa_guard_acquire>
   d5ab2:	b160      	cbz	r0, d5ace <_Z16_fetch_usbserialv+0x36>
   d5ab4:	aa01      	add	r2, sp, #4
   d5ab6:	4621      	mov	r1, r4
   d5ab8:	4807      	ldr	r0, [pc, #28]	; (d5ad8 <_Z16_fetch_usbserialv+0x40>)
   d5aba:	f7ff ffcd 	bl	d5a58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5abe:	4628      	mov	r0, r5
   d5ac0:	f7fe faf6 	bl	d40b0 <__cxa_guard_release>
   d5ac4:	4a05      	ldr	r2, [pc, #20]	; (d5adc <_Z16_fetch_usbserialv+0x44>)
   d5ac6:	4906      	ldr	r1, [pc, #24]	; (d5ae0 <_Z16_fetch_usbserialv+0x48>)
   d5ac8:	4803      	ldr	r0, [pc, #12]	; (d5ad8 <_Z16_fetch_usbserialv+0x40>)
   d5aca:	f000 f89f 	bl	d5c0c <__aeabi_atexit>
	return _usbserial;
}
   d5ace:	4802      	ldr	r0, [pc, #8]	; (d5ad8 <_Z16_fetch_usbserialv+0x40>)
   d5ad0:	b007      	add	sp, #28
   d5ad2:	bd30      	pop	{r4, r5, pc}
   d5ad4:	2003e6e4 	.word	0x2003e6e4
   d5ad8:	2003e6e8 	.word	0x2003e6e8
   d5adc:	2003e4b4 	.word	0x2003e4b4
   d5ae0:	000d5a09 	.word	0x000d5a09

000d5ae4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5ae4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5ae6:	4b0f      	ldr	r3, [pc, #60]	; (d5b24 <serialEventRun+0x40>)
   d5ae8:	b133      	cbz	r3, d5af8 <serialEventRun+0x14>
   d5aea:	f7ff ffd5 	bl	d5a98 <_Z16_fetch_usbserialv>
   d5aee:	6803      	ldr	r3, [r0, #0]
   d5af0:	691b      	ldr	r3, [r3, #16]
   d5af2:	4798      	blx	r3
   d5af4:	2800      	cmp	r0, #0
   d5af6:	dc0d      	bgt.n	d5b14 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5af8:	4b0b      	ldr	r3, [pc, #44]	; (d5b28 <serialEventRun+0x44>)
   d5afa:	b133      	cbz	r3, d5b0a <serialEventRun+0x26>
   d5afc:	f7ff ff42 	bl	d5984 <_Z22__fetch_global_Serial1v>
   d5b00:	6803      	ldr	r3, [r0, #0]
   d5b02:	691b      	ldr	r3, [r3, #16]
   d5b04:	4798      	blx	r3
   d5b06:	2800      	cmp	r0, #0
   d5b08:	dc07      	bgt.n	d5b1a <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d5b0a:	4b08      	ldr	r3, [pc, #32]	; (d5b2c <serialEventRun+0x48>)
   d5b0c:	b143      	cbz	r3, d5b20 <serialEventRun+0x3c>
   d5b0e:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d5b12:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5b14:	f3af 8000 	nop.w
   d5b18:	e7ee      	b.n	d5af8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5b1a:	f3af 8000 	nop.w
   d5b1e:	e7f4      	b.n	d5b0a <serialEventRun+0x26>
   d5b20:	bd08      	pop	{r3, pc}
   d5b22:	bf00      	nop
	...

000d5b30 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5b30:	b508      	push	{r3, lr}
	serialEventRun();
   d5b32:	f7ff ffd7 	bl	d5ae4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5b36:	f7fe fb77 	bl	d4228 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5b3a:	4b01      	ldr	r3, [pc, #4]	; (d5b40 <_post_loop+0x10>)
   d5b3c:	6018      	str	r0, [r3, #0]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	2003e700 	.word	0x2003e700

000d5b44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5b44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b46:	2300      	movs	r3, #0
   d5b48:	9300      	str	r3, [sp, #0]
   d5b4a:	461a      	mov	r2, r3
   d5b4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b50:	f7fe fce4 	bl	d451c <system_ctrl_set_result>
}
   d5b54:	b003      	add	sp, #12
   d5b56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5b5c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5b5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5b5e:	8843      	ldrh	r3, [r0, #2]
   d5b60:	2b0a      	cmp	r3, #10
   d5b62:	d008      	beq.n	d5b76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5b64:	2b50      	cmp	r3, #80	; 0x50
   d5b66:	d109      	bne.n	d5b7c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5b68:	4b09      	ldr	r3, [pc, #36]	; (d5b90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5b6a:	681b      	ldr	r3, [r3, #0]
   d5b6c:	b13b      	cbz	r3, d5b7e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5b6e:	b003      	add	sp, #12
   d5b70:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5b74:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5b76:	f7ff ffe5 	bl	d5b44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5b7a:	e006      	b.n	d5b8a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b7c:	2300      	movs	r3, #0
   d5b7e:	9300      	str	r3, [sp, #0]
   d5b80:	461a      	mov	r2, r3
   d5b82:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b86:	f7fe fcc9 	bl	d451c <system_ctrl_set_result>
        break;
    }
}
   d5b8a:	b003      	add	sp, #12
   d5b8c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5b90:	2003e6fc 	.word	0x2003e6fc

000d5b94 <module_user_init_hook>:

void module_user_init_hook()
{
   d5b94:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5b96:	f7fe fb37 	bl	d4208 <HAL_RNG_GetRandomNumber>
   d5b9a:	4604      	mov	r4, r0
    srand(seed);
   d5b9c:	f000 fb04 	bl	d61a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5ba0:	4b07      	ldr	r3, [pc, #28]	; (d5bc0 <module_user_init_hook+0x2c>)
   d5ba2:	b113      	cbz	r3, d5baa <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5ba4:	4620      	mov	r0, r4
   d5ba6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5baa:	2100      	movs	r1, #0
   d5bac:	4804      	ldr	r0, [pc, #16]	; (d5bc0 <module_user_init_hook+0x2c>)
   d5bae:	f7fe fce1 	bl	d4574 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5bb2:	2100      	movs	r1, #0
   d5bb4:	4803      	ldr	r0, [pc, #12]	; (d5bc4 <module_user_init_hook+0x30>)
}
   d5bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5bba:	f7fe bca5 	b.w	d4508 <system_ctrl_set_app_request_handler>
   d5bbe:	bf00      	nop
   d5bc0:	00000000 	.word	0x00000000
   d5bc4:	000d5b5d 	.word	0x000d5b5d

000d5bc8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5bc8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5bca:	4c0c      	ldr	r4, [pc, #48]	; (d5bfc <_GLOBAL__sub_I_SPI+0x34>)
   d5bcc:	4e0c      	ldr	r6, [pc, #48]	; (d5c00 <_GLOBAL__sub_I_SPI+0x38>)
   d5bce:	4d0d      	ldr	r5, [pc, #52]	; (d5c04 <_GLOBAL__sub_I_SPI+0x3c>)
   d5bd0:	2100      	movs	r1, #0
   d5bd2:	4620      	mov	r0, r4
   d5bd4:	f7ff fa72 	bl	d50bc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5bd8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5bda:	4c0b      	ldr	r4, [pc, #44]	; (d5c08 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5bdc:	4632      	mov	r2, r6
   d5bde:	4629      	mov	r1, r5
   d5be0:	f000 f814 	bl	d5c0c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5be4:	2101      	movs	r1, #1
   d5be6:	4620      	mov	r0, r4
   d5be8:	f7ff fa68 	bl	d50bc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5bec:	4632      	mov	r2, r6
   d5bee:	4629      	mov	r1, r5
   d5bf0:	4620      	mov	r0, r4
   d5bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5bf6:	f000 b809 	b.w	d5c0c <__aeabi_atexit>
   d5bfa:	bf00      	nop
   d5bfc:	2003e704 	.word	0x2003e704
   d5c00:	2003e4b4 	.word	0x2003e4b4
   d5c04:	000d50ad 	.word	0x000d50ad
   d5c08:	2003e714 	.word	0x2003e714

000d5c0c <__aeabi_atexit>:
   d5c0c:	460b      	mov	r3, r1
   d5c0e:	4601      	mov	r1, r0
   d5c10:	4618      	mov	r0, r3
   d5c12:	f000 b9a1 	b.w	d5f58 <__cxa_atexit>
	...

000d5c18 <_ZSt15get_new_handlerv>:
   d5c18:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <_ZSt15get_new_handlerv+0xc>)
   d5c1a:	6818      	ldr	r0, [r3, #0]
   d5c1c:	f3bf 8f5f 	dmb	sy
   d5c20:	4770      	bx	lr
   d5c22:	bf00      	nop
   d5c24:	2003e724 	.word	0x2003e724

000d5c28 <_ZnwjRKSt9nothrow_t>:
   d5c28:	b510      	push	{r4, lr}
   d5c2a:	2800      	cmp	r0, #0
   d5c2c:	bf14      	ite	ne
   d5c2e:	4604      	movne	r4, r0
   d5c30:	2401      	moveq	r4, #1
   d5c32:	4620      	mov	r0, r4
   d5c34:	f7fe fcf6 	bl	d4624 <malloc>
   d5c38:	b920      	cbnz	r0, d5c44 <_ZnwjRKSt9nothrow_t+0x1c>
   d5c3a:	f7ff ffed 	bl	d5c18 <_ZSt15get_new_handlerv>
   d5c3e:	b108      	cbz	r0, d5c44 <_ZnwjRKSt9nothrow_t+0x1c>
   d5c40:	4780      	blx	r0
   d5c42:	e7f6      	b.n	d5c32 <_ZnwjRKSt9nothrow_t+0xa>
   d5c44:	bd10      	pop	{r4, pc}

000d5c46 <_ZnajRKSt9nothrow_t>:
   d5c46:	f7ff bfef 	b.w	d5c28 <_ZnwjRKSt9nothrow_t>

000d5c4a <_ZSt25__throw_bad_function_callv>:
   d5c4a:	b508      	push	{r3, lr}
   d5c4c:	f7fe fd12 	bl	d4674 <abort>

000d5c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5c50:	4b24      	ldr	r3, [pc, #144]	; (d5ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5c52:	681a      	ldr	r2, [r3, #0]
   d5c54:	07d0      	lsls	r0, r2, #31
   d5c56:	bf5c      	itt	pl
   d5c58:	2201      	movpl	r2, #1
   d5c5a:	601a      	strpl	r2, [r3, #0]
   d5c5c:	4b22      	ldr	r3, [pc, #136]	; (d5ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5c5e:	681a      	ldr	r2, [r3, #0]
   d5c60:	07d1      	lsls	r1, r2, #31
   d5c62:	bf5c      	itt	pl
   d5c64:	2201      	movpl	r2, #1
   d5c66:	601a      	strpl	r2, [r3, #0]
   d5c68:	4b20      	ldr	r3, [pc, #128]	; (d5cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5c6a:	681a      	ldr	r2, [r3, #0]
   d5c6c:	07d2      	lsls	r2, r2, #31
   d5c6e:	bf5c      	itt	pl
   d5c70:	2201      	movpl	r2, #1
   d5c72:	601a      	strpl	r2, [r3, #0]
   d5c74:	4b1e      	ldr	r3, [pc, #120]	; (d5cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5c76:	681a      	ldr	r2, [r3, #0]
   d5c78:	07d0      	lsls	r0, r2, #31
   d5c7a:	bf5c      	itt	pl
   d5c7c:	2201      	movpl	r2, #1
   d5c7e:	601a      	strpl	r2, [r3, #0]
   d5c80:	4b1c      	ldr	r3, [pc, #112]	; (d5cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5c82:	681a      	ldr	r2, [r3, #0]
   d5c84:	07d1      	lsls	r1, r2, #31
   d5c86:	bf5c      	itt	pl
   d5c88:	2201      	movpl	r2, #1
   d5c8a:	601a      	strpl	r2, [r3, #0]
   d5c8c:	4b1a      	ldr	r3, [pc, #104]	; (d5cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5c8e:	681a      	ldr	r2, [r3, #0]
   d5c90:	07d2      	lsls	r2, r2, #31
   d5c92:	bf5c      	itt	pl
   d5c94:	2201      	movpl	r2, #1
   d5c96:	601a      	strpl	r2, [r3, #0]
   d5c98:	4b18      	ldr	r3, [pc, #96]	; (d5cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5c9a:	681a      	ldr	r2, [r3, #0]
   d5c9c:	07d0      	lsls	r0, r2, #31
   d5c9e:	bf5c      	itt	pl
   d5ca0:	2201      	movpl	r2, #1
   d5ca2:	601a      	strpl	r2, [r3, #0]
   d5ca4:	4b16      	ldr	r3, [pc, #88]	; (d5d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5ca6:	681a      	ldr	r2, [r3, #0]
   d5ca8:	07d1      	lsls	r1, r2, #31
   d5caa:	bf5c      	itt	pl
   d5cac:	2201      	movpl	r2, #1
   d5cae:	601a      	strpl	r2, [r3, #0]
   d5cb0:	4b14      	ldr	r3, [pc, #80]	; (d5d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5cb2:	681a      	ldr	r2, [r3, #0]
   d5cb4:	07d2      	lsls	r2, r2, #31
   d5cb6:	bf5c      	itt	pl
   d5cb8:	2201      	movpl	r2, #1
   d5cba:	601a      	strpl	r2, [r3, #0]
   d5cbc:	4b12      	ldr	r3, [pc, #72]	; (d5d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5cbe:	681a      	ldr	r2, [r3, #0]
   d5cc0:	07d0      	lsls	r0, r2, #31
   d5cc2:	bf5c      	itt	pl
   d5cc4:	2201      	movpl	r2, #1
   d5cc6:	601a      	strpl	r2, [r3, #0]
   d5cc8:	4b10      	ldr	r3, [pc, #64]	; (d5d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5cca:	681a      	ldr	r2, [r3, #0]
   d5ccc:	07d1      	lsls	r1, r2, #31
   d5cce:	bf5c      	itt	pl
   d5cd0:	2201      	movpl	r2, #1
   d5cd2:	601a      	strpl	r2, [r3, #0]
   d5cd4:	4b0e      	ldr	r3, [pc, #56]	; (d5d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5cd6:	681a      	ldr	r2, [r3, #0]
   d5cd8:	07d2      	lsls	r2, r2, #31
   d5cda:	bf5c      	itt	pl
   d5cdc:	2201      	movpl	r2, #1
   d5cde:	601a      	strpl	r2, [r3, #0]
   d5ce0:	4770      	bx	lr
   d5ce2:	bf00      	nop
   d5ce4:	2003e754 	.word	0x2003e754
   d5ce8:	2003e750 	.word	0x2003e750
   d5cec:	2003e74c 	.word	0x2003e74c
   d5cf0:	2003e748 	.word	0x2003e748
   d5cf4:	2003e744 	.word	0x2003e744
   d5cf8:	2003e740 	.word	0x2003e740
   d5cfc:	2003e73c 	.word	0x2003e73c
   d5d00:	2003e738 	.word	0x2003e738
   d5d04:	2003e734 	.word	0x2003e734
   d5d08:	2003e730 	.word	0x2003e730
   d5d0c:	2003e72c 	.word	0x2003e72c
   d5d10:	2003e728 	.word	0x2003e728

000d5d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5d14:	4b18      	ldr	r3, [pc, #96]	; (d5d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5d16:	681a      	ldr	r2, [r3, #0]
   d5d18:	07d1      	lsls	r1, r2, #31
   d5d1a:	bf5c      	itt	pl
   d5d1c:	2201      	movpl	r2, #1
   d5d1e:	601a      	strpl	r2, [r3, #0]
   d5d20:	4b16      	ldr	r3, [pc, #88]	; (d5d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5d22:	681a      	ldr	r2, [r3, #0]
   d5d24:	07d2      	lsls	r2, r2, #31
   d5d26:	bf5c      	itt	pl
   d5d28:	2201      	movpl	r2, #1
   d5d2a:	601a      	strpl	r2, [r3, #0]
   d5d2c:	4b14      	ldr	r3, [pc, #80]	; (d5d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5d2e:	681a      	ldr	r2, [r3, #0]
   d5d30:	07d0      	lsls	r0, r2, #31
   d5d32:	bf5c      	itt	pl
   d5d34:	2201      	movpl	r2, #1
   d5d36:	601a      	strpl	r2, [r3, #0]
   d5d38:	4b12      	ldr	r3, [pc, #72]	; (d5d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5d3a:	681a      	ldr	r2, [r3, #0]
   d5d3c:	07d1      	lsls	r1, r2, #31
   d5d3e:	bf5c      	itt	pl
   d5d40:	2201      	movpl	r2, #1
   d5d42:	601a      	strpl	r2, [r3, #0]
   d5d44:	4b10      	ldr	r3, [pc, #64]	; (d5d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5d46:	681a      	ldr	r2, [r3, #0]
   d5d48:	07d2      	lsls	r2, r2, #31
   d5d4a:	bf5c      	itt	pl
   d5d4c:	2201      	movpl	r2, #1
   d5d4e:	601a      	strpl	r2, [r3, #0]
   d5d50:	4b0e      	ldr	r3, [pc, #56]	; (d5d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	07d0      	lsls	r0, r2, #31
   d5d56:	bf5c      	itt	pl
   d5d58:	2201      	movpl	r2, #1
   d5d5a:	601a      	strpl	r2, [r3, #0]
   d5d5c:	4b0c      	ldr	r3, [pc, #48]	; (d5d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d5e:	681a      	ldr	r2, [r3, #0]
   d5d60:	07d1      	lsls	r1, r2, #31
   d5d62:	bf5c      	itt	pl
   d5d64:	2201      	movpl	r2, #1
   d5d66:	601a      	strpl	r2, [r3, #0]
   d5d68:	4b0a      	ldr	r3, [pc, #40]	; (d5d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5d6a:	681a      	ldr	r2, [r3, #0]
   d5d6c:	07d2      	lsls	r2, r2, #31
   d5d6e:	bf5c      	itt	pl
   d5d70:	2201      	movpl	r2, #1
   d5d72:	601a      	strpl	r2, [r3, #0]
   d5d74:	4770      	bx	lr
   d5d76:	bf00      	nop
   d5d78:	2003e774 	.word	0x2003e774
   d5d7c:	2003e770 	.word	0x2003e770
   d5d80:	2003e76c 	.word	0x2003e76c
   d5d84:	2003e768 	.word	0x2003e768
   d5d88:	2003e764 	.word	0x2003e764
   d5d8c:	2003e760 	.word	0x2003e760
   d5d90:	2003e75c 	.word	0x2003e75c
   d5d94:	2003e758 	.word	0x2003e758

000d5d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5d98:	4b18      	ldr	r3, [pc, #96]	; (d5dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5d9a:	681a      	ldr	r2, [r3, #0]
   d5d9c:	07d1      	lsls	r1, r2, #31
   d5d9e:	bf5c      	itt	pl
   d5da0:	2201      	movpl	r2, #1
   d5da2:	601a      	strpl	r2, [r3, #0]
   d5da4:	4b16      	ldr	r3, [pc, #88]	; (d5e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5da6:	681a      	ldr	r2, [r3, #0]
   d5da8:	07d2      	lsls	r2, r2, #31
   d5daa:	bf5c      	itt	pl
   d5dac:	2201      	movpl	r2, #1
   d5dae:	601a      	strpl	r2, [r3, #0]
   d5db0:	4b14      	ldr	r3, [pc, #80]	; (d5e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5db2:	681a      	ldr	r2, [r3, #0]
   d5db4:	07d0      	lsls	r0, r2, #31
   d5db6:	bf5c      	itt	pl
   d5db8:	2201      	movpl	r2, #1
   d5dba:	601a      	strpl	r2, [r3, #0]
   d5dbc:	4b12      	ldr	r3, [pc, #72]	; (d5e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5dbe:	681a      	ldr	r2, [r3, #0]
   d5dc0:	07d1      	lsls	r1, r2, #31
   d5dc2:	bf5c      	itt	pl
   d5dc4:	2201      	movpl	r2, #1
   d5dc6:	601a      	strpl	r2, [r3, #0]
   d5dc8:	4b10      	ldr	r3, [pc, #64]	; (d5e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5dca:	681a      	ldr	r2, [r3, #0]
   d5dcc:	07d2      	lsls	r2, r2, #31
   d5dce:	bf5c      	itt	pl
   d5dd0:	2201      	movpl	r2, #1
   d5dd2:	601a      	strpl	r2, [r3, #0]
   d5dd4:	4b0e      	ldr	r3, [pc, #56]	; (d5e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5dd6:	681a      	ldr	r2, [r3, #0]
   d5dd8:	07d0      	lsls	r0, r2, #31
   d5dda:	bf5c      	itt	pl
   d5ddc:	2201      	movpl	r2, #1
   d5dde:	601a      	strpl	r2, [r3, #0]
   d5de0:	4b0c      	ldr	r3, [pc, #48]	; (d5e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5de2:	681a      	ldr	r2, [r3, #0]
   d5de4:	07d1      	lsls	r1, r2, #31
   d5de6:	bf5c      	itt	pl
   d5de8:	2201      	movpl	r2, #1
   d5dea:	601a      	strpl	r2, [r3, #0]
   d5dec:	4b0a      	ldr	r3, [pc, #40]	; (d5e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5dee:	681a      	ldr	r2, [r3, #0]
   d5df0:	07d2      	lsls	r2, r2, #31
   d5df2:	bf5c      	itt	pl
   d5df4:	2201      	movpl	r2, #1
   d5df6:	601a      	strpl	r2, [r3, #0]
   d5df8:	4770      	bx	lr
   d5dfa:	bf00      	nop
   d5dfc:	2003e794 	.word	0x2003e794
   d5e00:	2003e790 	.word	0x2003e790
   d5e04:	2003e78c 	.word	0x2003e78c
   d5e08:	2003e788 	.word	0x2003e788
   d5e0c:	2003e784 	.word	0x2003e784
   d5e10:	2003e780 	.word	0x2003e780
   d5e14:	2003e77c 	.word	0x2003e77c
   d5e18:	2003e778 	.word	0x2003e778

000d5e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5e1c:	4b24      	ldr	r3, [pc, #144]	; (d5eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5e1e:	681a      	ldr	r2, [r3, #0]
   d5e20:	07d0      	lsls	r0, r2, #31
   d5e22:	bf5c      	itt	pl
   d5e24:	2201      	movpl	r2, #1
   d5e26:	601a      	strpl	r2, [r3, #0]
   d5e28:	4b22      	ldr	r3, [pc, #136]	; (d5eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5e2a:	681a      	ldr	r2, [r3, #0]
   d5e2c:	07d1      	lsls	r1, r2, #31
   d5e2e:	bf5c      	itt	pl
   d5e30:	2201      	movpl	r2, #1
   d5e32:	601a      	strpl	r2, [r3, #0]
   d5e34:	4b20      	ldr	r3, [pc, #128]	; (d5eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5e36:	681a      	ldr	r2, [r3, #0]
   d5e38:	07d2      	lsls	r2, r2, #31
   d5e3a:	bf5c      	itt	pl
   d5e3c:	2201      	movpl	r2, #1
   d5e3e:	601a      	strpl	r2, [r3, #0]
   d5e40:	4b1e      	ldr	r3, [pc, #120]	; (d5ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5e42:	681a      	ldr	r2, [r3, #0]
   d5e44:	07d0      	lsls	r0, r2, #31
   d5e46:	bf5c      	itt	pl
   d5e48:	2201      	movpl	r2, #1
   d5e4a:	601a      	strpl	r2, [r3, #0]
   d5e4c:	4b1c      	ldr	r3, [pc, #112]	; (d5ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5e4e:	681a      	ldr	r2, [r3, #0]
   d5e50:	07d1      	lsls	r1, r2, #31
   d5e52:	bf5c      	itt	pl
   d5e54:	2201      	movpl	r2, #1
   d5e56:	601a      	strpl	r2, [r3, #0]
   d5e58:	4b1a      	ldr	r3, [pc, #104]	; (d5ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5e5a:	681a      	ldr	r2, [r3, #0]
   d5e5c:	07d2      	lsls	r2, r2, #31
   d5e5e:	bf5c      	itt	pl
   d5e60:	2201      	movpl	r2, #1
   d5e62:	601a      	strpl	r2, [r3, #0]
   d5e64:	4b18      	ldr	r3, [pc, #96]	; (d5ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5e66:	681a      	ldr	r2, [r3, #0]
   d5e68:	07d0      	lsls	r0, r2, #31
   d5e6a:	bf5c      	itt	pl
   d5e6c:	2201      	movpl	r2, #1
   d5e6e:	601a      	strpl	r2, [r3, #0]
   d5e70:	4b16      	ldr	r3, [pc, #88]	; (d5ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5e72:	681a      	ldr	r2, [r3, #0]
   d5e74:	07d1      	lsls	r1, r2, #31
   d5e76:	bf5c      	itt	pl
   d5e78:	2201      	movpl	r2, #1
   d5e7a:	601a      	strpl	r2, [r3, #0]
   d5e7c:	4b14      	ldr	r3, [pc, #80]	; (d5ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5e7e:	681a      	ldr	r2, [r3, #0]
   d5e80:	07d2      	lsls	r2, r2, #31
   d5e82:	bf5c      	itt	pl
   d5e84:	2201      	movpl	r2, #1
   d5e86:	601a      	strpl	r2, [r3, #0]
   d5e88:	4b12      	ldr	r3, [pc, #72]	; (d5ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5e8a:	681a      	ldr	r2, [r3, #0]
   d5e8c:	07d0      	lsls	r0, r2, #31
   d5e8e:	bf5c      	itt	pl
   d5e90:	2201      	movpl	r2, #1
   d5e92:	601a      	strpl	r2, [r3, #0]
   d5e94:	4b10      	ldr	r3, [pc, #64]	; (d5ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5e96:	681a      	ldr	r2, [r3, #0]
   d5e98:	07d1      	lsls	r1, r2, #31
   d5e9a:	bf5c      	itt	pl
   d5e9c:	2201      	movpl	r2, #1
   d5e9e:	601a      	strpl	r2, [r3, #0]
   d5ea0:	4b0e      	ldr	r3, [pc, #56]	; (d5edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5ea2:	681a      	ldr	r2, [r3, #0]
   d5ea4:	07d2      	lsls	r2, r2, #31
   d5ea6:	bf5c      	itt	pl
   d5ea8:	2201      	movpl	r2, #1
   d5eaa:	601a      	strpl	r2, [r3, #0]
   d5eac:	4770      	bx	lr
   d5eae:	bf00      	nop
   d5eb0:	2003e7c4 	.word	0x2003e7c4
   d5eb4:	2003e7c0 	.word	0x2003e7c0
   d5eb8:	2003e7bc 	.word	0x2003e7bc
   d5ebc:	2003e7b8 	.word	0x2003e7b8
   d5ec0:	2003e7b4 	.word	0x2003e7b4
   d5ec4:	2003e7b0 	.word	0x2003e7b0
   d5ec8:	2003e7ac 	.word	0x2003e7ac
   d5ecc:	2003e7a8 	.word	0x2003e7a8
   d5ed0:	2003e7a4 	.word	0x2003e7a4
   d5ed4:	2003e7a0 	.word	0x2003e7a0
   d5ed8:	2003e79c 	.word	0x2003e79c
   d5edc:	2003e798 	.word	0x2003e798

000d5ee0 <asctime>:
   d5ee0:	4b09      	ldr	r3, [pc, #36]	; (d5f08 <asctime+0x28>)
   d5ee2:	b570      	push	{r4, r5, r6, lr}
   d5ee4:	681c      	ldr	r4, [r3, #0]
   d5ee6:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d5ee8:	4606      	mov	r6, r0
   d5eea:	b93d      	cbnz	r5, d5efc <asctime+0x1c>
   d5eec:	201a      	movs	r0, #26
   d5eee:	f7fe fb99 	bl	d4624 <malloc>
   d5ef2:	221a      	movs	r2, #26
   d5ef4:	6420      	str	r0, [r4, #64]	; 0x40
   d5ef6:	4629      	mov	r1, r5
   d5ef8:	f000 f94e 	bl	d6198 <memset>
   d5efc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d5efe:	4630      	mov	r0, r6
   d5f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5f04:	f000 b802 	b.w	d5f0c <asctime_r>
   d5f08:	2003e464 	.word	0x2003e464

000d5f0c <asctime_r>:
   d5f0c:	b510      	push	{r4, lr}
   d5f0e:	460c      	mov	r4, r1
   d5f10:	6941      	ldr	r1, [r0, #20]
   d5f12:	6903      	ldr	r3, [r0, #16]
   d5f14:	6982      	ldr	r2, [r0, #24]
   d5f16:	b086      	sub	sp, #24
   d5f18:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d5f1c:	9104      	str	r1, [sp, #16]
   d5f1e:	6801      	ldr	r1, [r0, #0]
   d5f20:	9103      	str	r1, [sp, #12]
   d5f22:	6841      	ldr	r1, [r0, #4]
   d5f24:	9102      	str	r1, [sp, #8]
   d5f26:	6881      	ldr	r1, [r0, #8]
   d5f28:	9101      	str	r1, [sp, #4]
   d5f2a:	68c1      	ldr	r1, [r0, #12]
   d5f2c:	9100      	str	r1, [sp, #0]
   d5f2e:	4907      	ldr	r1, [pc, #28]	; (d5f4c <asctime_r+0x40>)
   d5f30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5f34:	440b      	add	r3, r1
   d5f36:	4906      	ldr	r1, [pc, #24]	; (d5f50 <asctime_r+0x44>)
   d5f38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d5f3c:	440a      	add	r2, r1
   d5f3e:	4620      	mov	r0, r4
   d5f40:	4904      	ldr	r1, [pc, #16]	; (d5f54 <asctime_r+0x48>)
   d5f42:	f7fe fb87 	bl	d4654 <siprintf>
   d5f46:	4620      	mov	r0, r4
   d5f48:	b006      	add	sp, #24
   d5f4a:	bd10      	pop	{r4, pc}
   d5f4c:	000d6cb6 	.word	0x000d6cb6
   d5f50:	000d6ca1 	.word	0x000d6ca1
   d5f54:	000d6cda 	.word	0x000d6cda

000d5f58 <__cxa_atexit>:
   d5f58:	b510      	push	{r4, lr}
   d5f5a:	4c05      	ldr	r4, [pc, #20]	; (d5f70 <__cxa_atexit+0x18>)
   d5f5c:	4613      	mov	r3, r2
   d5f5e:	b12c      	cbz	r4, d5f6c <__cxa_atexit+0x14>
   d5f60:	460a      	mov	r2, r1
   d5f62:	4601      	mov	r1, r0
   d5f64:	2002      	movs	r0, #2
   d5f66:	f3af 8000 	nop.w
   d5f6a:	bd10      	pop	{r4, pc}
   d5f6c:	4620      	mov	r0, r4
   d5f6e:	bd10      	pop	{r4, pc}
   d5f70:	00000000 	.word	0x00000000

000d5f74 <localtime>:
   d5f74:	b538      	push	{r3, r4, r5, lr}
   d5f76:	4b07      	ldr	r3, [pc, #28]	; (d5f94 <localtime+0x20>)
   d5f78:	681c      	ldr	r4, [r3, #0]
   d5f7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5f7c:	4605      	mov	r5, r0
   d5f7e:	b91b      	cbnz	r3, d5f88 <localtime+0x14>
   d5f80:	2024      	movs	r0, #36	; 0x24
   d5f82:	f7fe fb4f 	bl	d4624 <malloc>
   d5f86:	63e0      	str	r0, [r4, #60]	; 0x3c
   d5f88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5f8a:	4628      	mov	r0, r5
   d5f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5f90:	f000 b802 	b.w	d5f98 <localtime_r>
   d5f94:	2003e464 	.word	0x2003e464

000d5f98 <localtime_r>:
   d5f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f9c:	460c      	mov	r4, r1
   d5f9e:	4680      	mov	r8, r0
   d5fa0:	f000 fc62 	bl	d6868 <__gettzinfo>
   d5fa4:	4621      	mov	r1, r4
   d5fa6:	4607      	mov	r7, r0
   d5fa8:	4640      	mov	r0, r8
   d5faa:	f000 fc61 	bl	d6870 <gmtime_r>
   d5fae:	6946      	ldr	r6, [r0, #20]
   d5fb0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d5fb4:	07b3      	lsls	r3, r6, #30
   d5fb6:	4604      	mov	r4, r0
   d5fb8:	d105      	bne.n	d5fc6 <localtime_r+0x2e>
   d5fba:	2264      	movs	r2, #100	; 0x64
   d5fbc:	fb96 f3f2 	sdiv	r3, r6, r2
   d5fc0:	fb02 6313 	mls	r3, r2, r3, r6
   d5fc4:	b94b      	cbnz	r3, d5fda <localtime_r+0x42>
   d5fc6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d5fca:	fb96 f3f5 	sdiv	r3, r6, r5
   d5fce:	fb05 6513 	mls	r5, r5, r3, r6
   d5fd2:	fab5 f385 	clz	r3, r5
   d5fd6:	095b      	lsrs	r3, r3, #5
   d5fd8:	e000      	b.n	d5fdc <localtime_r+0x44>
   d5fda:	2301      	movs	r3, #1
   d5fdc:	4a5f      	ldr	r2, [pc, #380]	; (d615c <localtime_r+0x1c4>)
   d5fde:	2530      	movs	r5, #48	; 0x30
   d5fe0:	fb05 2503 	mla	r5, r5, r3, r2
   d5fe4:	f000 fa74 	bl	d64d0 <__tz_lock>
   d5fe8:	f000 fa74 	bl	d64d4 <_tzset_unlocked>
   d5fec:	4b5c      	ldr	r3, [pc, #368]	; (d6160 <localtime_r+0x1c8>)
   d5fee:	681b      	ldr	r3, [r3, #0]
   d5ff0:	b1f3      	cbz	r3, d6030 <localtime_r+0x98>
   d5ff2:	687b      	ldr	r3, [r7, #4]
   d5ff4:	429e      	cmp	r6, r3
   d5ff6:	d105      	bne.n	d6004 <localtime_r+0x6c>
   d5ff8:	6839      	ldr	r1, [r7, #0]
   d5ffa:	f8d8 3000 	ldr.w	r3, [r8]
   d5ffe:	69fa      	ldr	r2, [r7, #28]
   d6000:	b941      	cbnz	r1, d6014 <localtime_r+0x7c>
   d6002:	e00a      	b.n	d601a <localtime_r+0x82>
   d6004:	4630      	mov	r0, r6
   d6006:	f000 f9bb 	bl	d6380 <__tzcalc_limits>
   d600a:	2800      	cmp	r0, #0
   d600c:	d1f4      	bne.n	d5ff8 <localtime_r+0x60>
   d600e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6012:	e00d      	b.n	d6030 <localtime_r+0x98>
   d6014:	4293      	cmp	r3, r2
   d6016:	db08      	blt.n	d602a <localtime_r+0x92>
   d6018:	e001      	b.n	d601e <localtime_r+0x86>
   d601a:	4293      	cmp	r3, r2
   d601c:	da07      	bge.n	d602e <localtime_r+0x96>
   d601e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6020:	4293      	cmp	r3, r2
   d6022:	bfac      	ite	ge
   d6024:	2300      	movge	r3, #0
   d6026:	2301      	movlt	r3, #1
   d6028:	e002      	b.n	d6030 <localtime_r+0x98>
   d602a:	2300      	movs	r3, #0
   d602c:	e000      	b.n	d6030 <localtime_r+0x98>
   d602e:	2301      	movs	r3, #1
   d6030:	6223      	str	r3, [r4, #32]
   d6032:	6a23      	ldr	r3, [r4, #32]
   d6034:	2b01      	cmp	r3, #1
   d6036:	bf0c      	ite	eq
   d6038:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d603a:	6a39      	ldrne	r1, [r7, #32]
   d603c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6040:	203c      	movs	r0, #60	; 0x3c
   d6042:	fb91 f6f3 	sdiv	r6, r1, r3
   d6046:	fb03 1316 	mls	r3, r3, r6, r1
   d604a:	6861      	ldr	r1, [r4, #4]
   d604c:	fb93 f2f0 	sdiv	r2, r3, r0
   d6050:	fb00 3012 	mls	r0, r0, r2, r3
   d6054:	6823      	ldr	r3, [r4, #0]
   d6056:	1a89      	subs	r1, r1, r2
   d6058:	68a2      	ldr	r2, [r4, #8]
   d605a:	6061      	str	r1, [r4, #4]
   d605c:	1a1b      	subs	r3, r3, r0
   d605e:	1b92      	subs	r2, r2, r6
   d6060:	2b3b      	cmp	r3, #59	; 0x3b
   d6062:	6023      	str	r3, [r4, #0]
   d6064:	60a2      	str	r2, [r4, #8]
   d6066:	dd03      	ble.n	d6070 <localtime_r+0xd8>
   d6068:	3101      	adds	r1, #1
   d606a:	6061      	str	r1, [r4, #4]
   d606c:	3b3c      	subs	r3, #60	; 0x3c
   d606e:	e004      	b.n	d607a <localtime_r+0xe2>
   d6070:	2b00      	cmp	r3, #0
   d6072:	da03      	bge.n	d607c <localtime_r+0xe4>
   d6074:	3901      	subs	r1, #1
   d6076:	6061      	str	r1, [r4, #4]
   d6078:	333c      	adds	r3, #60	; 0x3c
   d607a:	6023      	str	r3, [r4, #0]
   d607c:	6863      	ldr	r3, [r4, #4]
   d607e:	2b3b      	cmp	r3, #59	; 0x3b
   d6080:	dd03      	ble.n	d608a <localtime_r+0xf2>
   d6082:	3201      	adds	r2, #1
   d6084:	60a2      	str	r2, [r4, #8]
   d6086:	3b3c      	subs	r3, #60	; 0x3c
   d6088:	e004      	b.n	d6094 <localtime_r+0xfc>
   d608a:	2b00      	cmp	r3, #0
   d608c:	da03      	bge.n	d6096 <localtime_r+0xfe>
   d608e:	3a01      	subs	r2, #1
   d6090:	60a2      	str	r2, [r4, #8]
   d6092:	333c      	adds	r3, #60	; 0x3c
   d6094:	6063      	str	r3, [r4, #4]
   d6096:	68a3      	ldr	r3, [r4, #8]
   d6098:	2b17      	cmp	r3, #23
   d609a:	dd22      	ble.n	d60e2 <localtime_r+0x14a>
   d609c:	69e2      	ldr	r2, [r4, #28]
   d609e:	3201      	adds	r2, #1
   d60a0:	61e2      	str	r2, [r4, #28]
   d60a2:	69a2      	ldr	r2, [r4, #24]
   d60a4:	3201      	adds	r2, #1
   d60a6:	2a06      	cmp	r2, #6
   d60a8:	bfc8      	it	gt
   d60aa:	2200      	movgt	r2, #0
   d60ac:	61a2      	str	r2, [r4, #24]
   d60ae:	68e2      	ldr	r2, [r4, #12]
   d60b0:	3b18      	subs	r3, #24
   d60b2:	3201      	adds	r2, #1
   d60b4:	60a3      	str	r3, [r4, #8]
   d60b6:	6923      	ldr	r3, [r4, #16]
   d60b8:	60e2      	str	r2, [r4, #12]
   d60ba:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d60be:	428a      	cmp	r2, r1
   d60c0:	dd46      	ble.n	d6150 <localtime_r+0x1b8>
   d60c2:	3301      	adds	r3, #1
   d60c4:	2b0c      	cmp	r3, #12
   d60c6:	bf0c      	ite	eq
   d60c8:	6963      	ldreq	r3, [r4, #20]
   d60ca:	6123      	strne	r3, [r4, #16]
   d60cc:	eba2 0201 	sub.w	r2, r2, r1
   d60d0:	60e2      	str	r2, [r4, #12]
   d60d2:	bf01      	itttt	eq
   d60d4:	3301      	addeq	r3, #1
   d60d6:	2200      	moveq	r2, #0
   d60d8:	6122      	streq	r2, [r4, #16]
   d60da:	6163      	streq	r3, [r4, #20]
   d60dc:	bf08      	it	eq
   d60de:	61e2      	streq	r2, [r4, #28]
   d60e0:	e036      	b.n	d6150 <localtime_r+0x1b8>
   d60e2:	2b00      	cmp	r3, #0
   d60e4:	da34      	bge.n	d6150 <localtime_r+0x1b8>
   d60e6:	69e2      	ldr	r2, [r4, #28]
   d60e8:	3a01      	subs	r2, #1
   d60ea:	61e2      	str	r2, [r4, #28]
   d60ec:	69a2      	ldr	r2, [r4, #24]
   d60ee:	3a01      	subs	r2, #1
   d60f0:	bf48      	it	mi
   d60f2:	2206      	movmi	r2, #6
   d60f4:	61a2      	str	r2, [r4, #24]
   d60f6:	68e2      	ldr	r2, [r4, #12]
   d60f8:	3318      	adds	r3, #24
   d60fa:	3a01      	subs	r2, #1
   d60fc:	60e2      	str	r2, [r4, #12]
   d60fe:	60a3      	str	r3, [r4, #8]
   d6100:	bb32      	cbnz	r2, d6150 <localtime_r+0x1b8>
   d6102:	6923      	ldr	r3, [r4, #16]
   d6104:	3b01      	subs	r3, #1
   d6106:	d401      	bmi.n	d610c <localtime_r+0x174>
   d6108:	6123      	str	r3, [r4, #16]
   d610a:	e01d      	b.n	d6148 <localtime_r+0x1b0>
   d610c:	230b      	movs	r3, #11
   d610e:	6123      	str	r3, [r4, #16]
   d6110:	6963      	ldr	r3, [r4, #20]
   d6112:	1e5a      	subs	r2, r3, #1
   d6114:	f012 0f03 	tst.w	r2, #3
   d6118:	6162      	str	r2, [r4, #20]
   d611a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d611e:	d105      	bne.n	d612c <localtime_r+0x194>
   d6120:	2164      	movs	r1, #100	; 0x64
   d6122:	fb93 f2f1 	sdiv	r2, r3, r1
   d6126:	fb01 3212 	mls	r2, r1, r2, r3
   d612a:	b94a      	cbnz	r2, d6140 <localtime_r+0x1a8>
   d612c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6130:	fb93 f2f1 	sdiv	r2, r3, r1
   d6134:	fb01 3312 	mls	r3, r1, r2, r3
   d6138:	fab3 f383 	clz	r3, r3
   d613c:	095b      	lsrs	r3, r3, #5
   d613e:	e000      	b.n	d6142 <localtime_r+0x1aa>
   d6140:	2301      	movs	r3, #1
   d6142:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d6146:	61e3      	str	r3, [r4, #28]
   d6148:	6923      	ldr	r3, [r4, #16]
   d614a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d614e:	60e3      	str	r3, [r4, #12]
   d6150:	f000 f9bf 	bl	d64d2 <__tz_unlock>
   d6154:	4620      	mov	r0, r4
   d6156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d615a:	bf00      	nop
   d615c:	000d6e60 	.word	0x000d6e60
   d6160:	2003e7e4 	.word	0x2003e7e4

000d6164 <memcmp>:
   d6164:	b510      	push	{r4, lr}
   d6166:	3901      	subs	r1, #1
   d6168:	4402      	add	r2, r0
   d616a:	4290      	cmp	r0, r2
   d616c:	d007      	beq.n	d617e <memcmp+0x1a>
   d616e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6172:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6176:	42a3      	cmp	r3, r4
   d6178:	d0f7      	beq.n	d616a <memcmp+0x6>
   d617a:	1b18      	subs	r0, r3, r4
   d617c:	bd10      	pop	{r4, pc}
   d617e:	2000      	movs	r0, #0
   d6180:	bd10      	pop	{r4, pc}

000d6182 <memcpy>:
   d6182:	b510      	push	{r4, lr}
   d6184:	1e43      	subs	r3, r0, #1
   d6186:	440a      	add	r2, r1
   d6188:	4291      	cmp	r1, r2
   d618a:	d004      	beq.n	d6196 <memcpy+0x14>
   d618c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6190:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6194:	e7f8      	b.n	d6188 <memcpy+0x6>
   d6196:	bd10      	pop	{r4, pc}

000d6198 <memset>:
   d6198:	4402      	add	r2, r0
   d619a:	4603      	mov	r3, r0
   d619c:	4293      	cmp	r3, r2
   d619e:	d002      	beq.n	d61a6 <memset+0xe>
   d61a0:	f803 1b01 	strb.w	r1, [r3], #1
   d61a4:	e7fa      	b.n	d619c <memset+0x4>
   d61a6:	4770      	bx	lr

000d61a8 <srand>:
   d61a8:	b538      	push	{r3, r4, r5, lr}
   d61aa:	4b12      	ldr	r3, [pc, #72]	; (d61f4 <srand+0x4c>)
   d61ac:	681c      	ldr	r4, [r3, #0]
   d61ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d61b0:	4605      	mov	r5, r0
   d61b2:	b9d3      	cbnz	r3, d61ea <srand+0x42>
   d61b4:	2018      	movs	r0, #24
   d61b6:	f7fe fa35 	bl	d4624 <malloc>
   d61ba:	f243 330e 	movw	r3, #13070	; 0x330e
   d61be:	63a0      	str	r0, [r4, #56]	; 0x38
   d61c0:	8003      	strh	r3, [r0, #0]
   d61c2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d61c6:	8043      	strh	r3, [r0, #2]
   d61c8:	f241 2334 	movw	r3, #4660	; 0x1234
   d61cc:	8083      	strh	r3, [r0, #4]
   d61ce:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d61d2:	80c3      	strh	r3, [r0, #6]
   d61d4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d61d8:	8103      	strh	r3, [r0, #8]
   d61da:	2305      	movs	r3, #5
   d61dc:	8143      	strh	r3, [r0, #10]
   d61de:	230b      	movs	r3, #11
   d61e0:	8183      	strh	r3, [r0, #12]
   d61e2:	2201      	movs	r2, #1
   d61e4:	2300      	movs	r3, #0
   d61e6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d61ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d61ec:	2200      	movs	r2, #0
   d61ee:	611d      	str	r5, [r3, #16]
   d61f0:	615a      	str	r2, [r3, #20]
   d61f2:	bd38      	pop	{r3, r4, r5, pc}
   d61f4:	2003e464 	.word	0x2003e464

000d61f8 <strcmp>:
   d61f8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d61fc:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6200:	2a01      	cmp	r2, #1
   d6202:	bf28      	it	cs
   d6204:	429a      	cmpcs	r2, r3
   d6206:	d0f7      	beq.n	d61f8 <strcmp>
   d6208:	1ad0      	subs	r0, r2, r3
   d620a:	4770      	bx	lr

000d620c <strcpy>:
   d620c:	4603      	mov	r3, r0
   d620e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6212:	f803 2b01 	strb.w	r2, [r3], #1
   d6216:	2a00      	cmp	r2, #0
   d6218:	d1f9      	bne.n	d620e <strcpy+0x2>
   d621a:	4770      	bx	lr

000d621c <strlen>:
   d621c:	4603      	mov	r3, r0
   d621e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6222:	2a00      	cmp	r2, #0
   d6224:	d1fb      	bne.n	d621e <strlen+0x2>
   d6226:	1a18      	subs	r0, r3, r0
   d6228:	3801      	subs	r0, #1
   d622a:	4770      	bx	lr

000d622c <strncmp>:
   d622c:	b530      	push	{r4, r5, lr}
   d622e:	b182      	cbz	r2, d6252 <strncmp+0x26>
   d6230:	1e45      	subs	r5, r0, #1
   d6232:	3901      	subs	r1, #1
   d6234:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6238:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d623c:	42a3      	cmp	r3, r4
   d623e:	d106      	bne.n	d624e <strncmp+0x22>
   d6240:	43ec      	mvns	r4, r5
   d6242:	4414      	add	r4, r2
   d6244:	42e0      	cmn	r0, r4
   d6246:	d001      	beq.n	d624c <strncmp+0x20>
   d6248:	2b00      	cmp	r3, #0
   d624a:	d1f3      	bne.n	d6234 <strncmp+0x8>
   d624c:	461c      	mov	r4, r3
   d624e:	1b18      	subs	r0, r3, r4
   d6250:	bd30      	pop	{r4, r5, pc}
   d6252:	4610      	mov	r0, r2
   d6254:	bd30      	pop	{r4, r5, pc}

000d6256 <strnlen>:
   d6256:	b510      	push	{r4, lr}
   d6258:	4603      	mov	r3, r0
   d625a:	4401      	add	r1, r0
   d625c:	428b      	cmp	r3, r1
   d625e:	d004      	beq.n	d626a <strnlen+0x14>
   d6260:	781a      	ldrb	r2, [r3, #0]
   d6262:	1c5c      	adds	r4, r3, #1
   d6264:	b10a      	cbz	r2, d626a <strnlen+0x14>
   d6266:	4623      	mov	r3, r4
   d6268:	e7f8      	b.n	d625c <strnlen+0x6>
   d626a:	1a18      	subs	r0, r3, r0
   d626c:	bd10      	pop	{r4, pc}
	...

000d6270 <_strtoul_r>:
   d6270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6274:	4680      	mov	r8, r0
   d6276:	483c      	ldr	r0, [pc, #240]	; (d6368 <_strtoul_r+0xf8>)
   d6278:	f8d0 9000 	ldr.w	r9, [r0]
   d627c:	460e      	mov	r6, r1
   d627e:	4635      	mov	r5, r6
   d6280:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6284:	eb09 0004 	add.w	r0, r9, r4
   d6288:	7840      	ldrb	r0, [r0, #1]
   d628a:	f000 0008 	and.w	r0, r0, #8
   d628e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d6292:	b108      	cbz	r0, d6298 <_strtoul_r+0x28>
   d6294:	462e      	mov	r6, r5
   d6296:	e7f2      	b.n	d627e <_strtoul_r+0xe>
   d6298:	2c2d      	cmp	r4, #45	; 0x2d
   d629a:	d103      	bne.n	d62a4 <_strtoul_r+0x34>
   d629c:	1cb5      	adds	r5, r6, #2
   d629e:	7874      	ldrb	r4, [r6, #1]
   d62a0:	2701      	movs	r7, #1
   d62a2:	e003      	b.n	d62ac <_strtoul_r+0x3c>
   d62a4:	2c2b      	cmp	r4, #43	; 0x2b
   d62a6:	bf04      	itt	eq
   d62a8:	7874      	ldrbeq	r4, [r6, #1]
   d62aa:	1cb5      	addeq	r5, r6, #2
   d62ac:	b113      	cbz	r3, d62b4 <_strtoul_r+0x44>
   d62ae:	2b10      	cmp	r3, #16
   d62b0:	d10a      	bne.n	d62c8 <_strtoul_r+0x58>
   d62b2:	e053      	b.n	d635c <_strtoul_r+0xec>
   d62b4:	2c30      	cmp	r4, #48	; 0x30
   d62b6:	d14f      	bne.n	d6358 <_strtoul_r+0xe8>
   d62b8:	7828      	ldrb	r0, [r5, #0]
   d62ba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d62be:	2858      	cmp	r0, #88	; 0x58
   d62c0:	d145      	bne.n	d634e <_strtoul_r+0xde>
   d62c2:	786c      	ldrb	r4, [r5, #1]
   d62c4:	2310      	movs	r3, #16
   d62c6:	3502      	adds	r5, #2
   d62c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d62cc:	2600      	movs	r6, #0
   d62ce:	fbbc fcf3 	udiv	ip, ip, r3
   d62d2:	fb03 fa0c 	mul.w	sl, r3, ip
   d62d6:	ea6f 0a0a 	mvn.w	sl, sl
   d62da:	4630      	mov	r0, r6
   d62dc:	eb09 0e04 	add.w	lr, r9, r4
   d62e0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d62e4:	f01e 0f04 	tst.w	lr, #4
   d62e8:	d001      	beq.n	d62ee <_strtoul_r+0x7e>
   d62ea:	3c30      	subs	r4, #48	; 0x30
   d62ec:	e00b      	b.n	d6306 <_strtoul_r+0x96>
   d62ee:	f01e 0e03 	ands.w	lr, lr, #3
   d62f2:	d01a      	beq.n	d632a <_strtoul_r+0xba>
   d62f4:	f1be 0f01 	cmp.w	lr, #1
   d62f8:	bf0c      	ite	eq
   d62fa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d62fe:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6302:	ebce 0404 	rsb	r4, lr, r4
   d6306:	42a3      	cmp	r3, r4
   d6308:	dd0f      	ble.n	d632a <_strtoul_r+0xba>
   d630a:	2e00      	cmp	r6, #0
   d630c:	db08      	blt.n	d6320 <_strtoul_r+0xb0>
   d630e:	4560      	cmp	r0, ip
   d6310:	d806      	bhi.n	d6320 <_strtoul_r+0xb0>
   d6312:	d101      	bne.n	d6318 <_strtoul_r+0xa8>
   d6314:	4554      	cmp	r4, sl
   d6316:	dc03      	bgt.n	d6320 <_strtoul_r+0xb0>
   d6318:	fb03 4000 	mla	r0, r3, r0, r4
   d631c:	2601      	movs	r6, #1
   d631e:	e001      	b.n	d6324 <_strtoul_r+0xb4>
   d6320:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d6324:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6328:	e7d8      	b.n	d62dc <_strtoul_r+0x6c>
   d632a:	2e00      	cmp	r6, #0
   d632c:	da07      	bge.n	d633e <_strtoul_r+0xce>
   d632e:	2322      	movs	r3, #34	; 0x22
   d6330:	f8c8 3000 	str.w	r3, [r8]
   d6334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6338:	b92a      	cbnz	r2, d6346 <_strtoul_r+0xd6>
   d633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d633e:	b107      	cbz	r7, d6342 <_strtoul_r+0xd2>
   d6340:	4240      	negs	r0, r0
   d6342:	b172      	cbz	r2, d6362 <_strtoul_r+0xf2>
   d6344:	b106      	cbz	r6, d6348 <_strtoul_r+0xd8>
   d6346:	1e69      	subs	r1, r5, #1
   d6348:	6011      	str	r1, [r2, #0]
   d634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d634e:	2430      	movs	r4, #48	; 0x30
   d6350:	2b00      	cmp	r3, #0
   d6352:	d1b9      	bne.n	d62c8 <_strtoul_r+0x58>
   d6354:	2308      	movs	r3, #8
   d6356:	e7b7      	b.n	d62c8 <_strtoul_r+0x58>
   d6358:	230a      	movs	r3, #10
   d635a:	e7b5      	b.n	d62c8 <_strtoul_r+0x58>
   d635c:	2c30      	cmp	r4, #48	; 0x30
   d635e:	d0ab      	beq.n	d62b8 <_strtoul_r+0x48>
   d6360:	e7b2      	b.n	d62c8 <_strtoul_r+0x58>
   d6362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6366:	bf00      	nop
   d6368:	2003e400 	.word	0x2003e400

000d636c <strtoul>:
   d636c:	4613      	mov	r3, r2
   d636e:	460a      	mov	r2, r1
   d6370:	4601      	mov	r1, r0
   d6372:	4802      	ldr	r0, [pc, #8]	; (d637c <strtoul+0x10>)
   d6374:	6800      	ldr	r0, [r0, #0]
   d6376:	f7ff bf7b 	b.w	d6270 <_strtoul_r>
   d637a:	bf00      	nop
   d637c:	2003e464 	.word	0x2003e464

000d6380 <__tzcalc_limits>:
   d6380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6384:	4604      	mov	r4, r0
   d6386:	f000 fa6f 	bl	d6868 <__gettzinfo>
   d638a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d638e:	429c      	cmp	r4, r3
   d6390:	f340 8096 	ble.w	d64c0 <__tzcalc_limits+0x140>
   d6394:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d6398:	18e3      	adds	r3, r4, r3
   d639a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d639e:	109b      	asrs	r3, r3, #2
   d63a0:	f240 156d 	movw	r5, #365	; 0x16d
   d63a4:	fb05 3502 	mla	r5, r5, r2, r3
   d63a8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d63ac:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d63b0:	fb92 f3f3 	sdiv	r3, r2, r3
   d63b4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d63b8:	442b      	add	r3, r5
   d63ba:	18a5      	adds	r5, r4, r2
   d63bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d63c0:	fb95 f5f2 	sdiv	r5, r5, r2
   d63c4:	441d      	add	r5, r3
   d63c6:	2364      	movs	r3, #100	; 0x64
   d63c8:	fb94 f7f2 	sdiv	r7, r4, r2
   d63cc:	fb94 f6f3 	sdiv	r6, r4, r3
   d63d0:	fb02 4717 	mls	r7, r2, r7, r4
   d63d4:	fb03 4616 	mls	r6, r3, r6, r4
   d63d8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d63dc:	fab7 fe87 	clz	lr, r7
   d63e0:	9301      	str	r3, [sp, #4]
   d63e2:	f004 0303 	and.w	r3, r4, #3
   d63e6:	6044      	str	r4, [r0, #4]
   d63e8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d63ec:	4601      	mov	r1, r0
   d63ee:	9300      	str	r3, [sp, #0]
   d63f0:	f04f 0c07 	mov.w	ip, #7
   d63f4:	7a0b      	ldrb	r3, [r1, #8]
   d63f6:	2b4a      	cmp	r3, #74	; 0x4a
   d63f8:	d10e      	bne.n	d6418 <__tzcalc_limits+0x98>
   d63fa:	694b      	ldr	r3, [r1, #20]
   d63fc:	9a00      	ldr	r2, [sp, #0]
   d63fe:	18ec      	adds	r4, r5, r3
   d6400:	b902      	cbnz	r2, d6404 <__tzcalc_limits+0x84>
   d6402:	b906      	cbnz	r6, d6406 <__tzcalc_limits+0x86>
   d6404:	b927      	cbnz	r7, d6410 <__tzcalc_limits+0x90>
   d6406:	2b3b      	cmp	r3, #59	; 0x3b
   d6408:	bfd4      	ite	le
   d640a:	2300      	movle	r3, #0
   d640c:	2301      	movgt	r3, #1
   d640e:	e000      	b.n	d6412 <__tzcalc_limits+0x92>
   d6410:	2300      	movs	r3, #0
   d6412:	4423      	add	r3, r4
   d6414:	3b01      	subs	r3, #1
   d6416:	e03f      	b.n	d6498 <__tzcalc_limits+0x118>
   d6418:	2b44      	cmp	r3, #68	; 0x44
   d641a:	d102      	bne.n	d6422 <__tzcalc_limits+0xa2>
   d641c:	694b      	ldr	r3, [r1, #20]
   d641e:	442b      	add	r3, r5
   d6420:	e03a      	b.n	d6498 <__tzcalc_limits+0x118>
   d6422:	9b00      	ldr	r3, [sp, #0]
   d6424:	b92b      	cbnz	r3, d6432 <__tzcalc_limits+0xb2>
   d6426:	2e00      	cmp	r6, #0
   d6428:	bf0c      	ite	eq
   d642a:	46f0      	moveq	r8, lr
   d642c:	f04f 0801 	movne.w	r8, #1
   d6430:	e000      	b.n	d6434 <__tzcalc_limits+0xb4>
   d6432:	46f0      	mov	r8, lr
   d6434:	4b24      	ldr	r3, [pc, #144]	; (d64c8 <__tzcalc_limits+0x148>)
   d6436:	68cc      	ldr	r4, [r1, #12]
   d6438:	2230      	movs	r2, #48	; 0x30
   d643a:	fb02 3808 	mla	r8, r2, r8, r3
   d643e:	f1a8 0a04 	sub.w	sl, r8, #4
   d6442:	46a9      	mov	r9, r5
   d6444:	2301      	movs	r3, #1
   d6446:	42a3      	cmp	r3, r4
   d6448:	da04      	bge.n	d6454 <__tzcalc_limits+0xd4>
   d644a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d644e:	3301      	adds	r3, #1
   d6450:	44d9      	add	r9, fp
   d6452:	e7f8      	b.n	d6446 <__tzcalc_limits+0xc6>
   d6454:	f109 0304 	add.w	r3, r9, #4
   d6458:	fb93 fbfc 	sdiv	fp, r3, ip
   d645c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d6460:	2c01      	cmp	r4, #1
   d6462:	ebca 0a03 	rsb	sl, sl, r3
   d6466:	694b      	ldr	r3, [r1, #20]
   d6468:	bfb8      	it	lt
   d646a:	2401      	movlt	r4, #1
   d646c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d6470:	ebb3 0a0a 	subs.w	sl, r3, sl
   d6474:	690b      	ldr	r3, [r1, #16]
   d6476:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d647a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d647e:	bf48      	it	mi
   d6480:	f10a 0a07 	addmi.w	sl, sl, #7
   d6484:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6488:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d648c:	4453      	add	r3, sl
   d648e:	42a3      	cmp	r3, r4
   d6490:	db01      	blt.n	d6496 <__tzcalc_limits+0x116>
   d6492:	3b07      	subs	r3, #7
   d6494:	e7fb      	b.n	d648e <__tzcalc_limits+0x10e>
   d6496:	444b      	add	r3, r9
   d6498:	698c      	ldr	r4, [r1, #24]
   d649a:	4a0c      	ldr	r2, [pc, #48]	; (d64cc <__tzcalc_limits+0x14c>)
   d649c:	fb02 4303 	mla	r3, r2, r3, r4
   d64a0:	6a0c      	ldr	r4, [r1, #32]
   d64a2:	4423      	add	r3, r4
   d64a4:	f841 3f1c 	str.w	r3, [r1, #28]!
   d64a8:	9b01      	ldr	r3, [sp, #4]
   d64aa:	4299      	cmp	r1, r3
   d64ac:	d1a2      	bne.n	d63f4 <__tzcalc_limits+0x74>
   d64ae:	69c3      	ldr	r3, [r0, #28]
   d64b0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d64b2:	4293      	cmp	r3, r2
   d64b4:	bfac      	ite	ge
   d64b6:	2300      	movge	r3, #0
   d64b8:	2301      	movlt	r3, #1
   d64ba:	6003      	str	r3, [r0, #0]
   d64bc:	2001      	movs	r0, #1
   d64be:	e000      	b.n	d64c2 <__tzcalc_limits+0x142>
   d64c0:	2000      	movs	r0, #0
   d64c2:	b003      	add	sp, #12
   d64c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d64c8:	000d6e60 	.word	0x000d6e60
   d64cc:	00015180 	.word	0x00015180

000d64d0 <__tz_lock>:
   d64d0:	4770      	bx	lr

000d64d2 <__tz_unlock>:
   d64d2:	4770      	bx	lr

000d64d4 <_tzset_unlocked>:
   d64d4:	4b01      	ldr	r3, [pc, #4]	; (d64dc <_tzset_unlocked+0x8>)
   d64d6:	6818      	ldr	r0, [r3, #0]
   d64d8:	f000 b802 	b.w	d64e0 <_tzset_unlocked_r>
   d64dc:	2003e464 	.word	0x2003e464

000d64e0 <_tzset_unlocked_r>:
   d64e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64e4:	b08d      	sub	sp, #52	; 0x34
   d64e6:	4607      	mov	r7, r0
   d64e8:	f000 f9be 	bl	d6868 <__gettzinfo>
   d64ec:	49b0      	ldr	r1, [pc, #704]	; (d67b0 <_tzset_unlocked_r+0x2d0>)
   d64ee:	4eb1      	ldr	r6, [pc, #708]	; (d67b4 <_tzset_unlocked_r+0x2d4>)
   d64f0:	4604      	mov	r4, r0
   d64f2:	4638      	mov	r0, r7
   d64f4:	f000 f9b0 	bl	d6858 <_getenv_r>
   d64f8:	4605      	mov	r5, r0
   d64fa:	b960      	cbnz	r0, d6516 <_tzset_unlocked_r+0x36>
   d64fc:	4bae      	ldr	r3, [pc, #696]	; (d67b8 <_tzset_unlocked_r+0x2d8>)
   d64fe:	4aaf      	ldr	r2, [pc, #700]	; (d67bc <_tzset_unlocked_r+0x2dc>)
   d6500:	6018      	str	r0, [r3, #0]
   d6502:	4baf      	ldr	r3, [pc, #700]	; (d67c0 <_tzset_unlocked_r+0x2e0>)
   d6504:	6018      	str	r0, [r3, #0]
   d6506:	4baf      	ldr	r3, [pc, #700]	; (d67c4 <_tzset_unlocked_r+0x2e4>)
   d6508:	6830      	ldr	r0, [r6, #0]
   d650a:	601a      	str	r2, [r3, #0]
   d650c:	605a      	str	r2, [r3, #4]
   d650e:	f7fe f891 	bl	d4634 <free>
   d6512:	6035      	str	r5, [r6, #0]
   d6514:	e148      	b.n	d67a8 <_tzset_unlocked_r+0x2c8>
   d6516:	6831      	ldr	r1, [r6, #0]
   d6518:	b979      	cbnz	r1, d653a <_tzset_unlocked_r+0x5a>
   d651a:	6830      	ldr	r0, [r6, #0]
   d651c:	f7fe f88a 	bl	d4634 <free>
   d6520:	4628      	mov	r0, r5
   d6522:	f7ff fe7b 	bl	d621c <strlen>
   d6526:	1c41      	adds	r1, r0, #1
   d6528:	4638      	mov	r0, r7
   d652a:	f7fe f8ab 	bl	d4684 <_malloc_r>
   d652e:	6030      	str	r0, [r6, #0]
   d6530:	b148      	cbz	r0, d6546 <_tzset_unlocked_r+0x66>
   d6532:	4629      	mov	r1, r5
   d6534:	f7ff fe6a 	bl	d620c <strcpy>
   d6538:	e005      	b.n	d6546 <_tzset_unlocked_r+0x66>
   d653a:	f7ff fe5d 	bl	d61f8 <strcmp>
   d653e:	2800      	cmp	r0, #0
   d6540:	f000 8132 	beq.w	d67a8 <_tzset_unlocked_r+0x2c8>
   d6544:	e7e9      	b.n	d651a <_tzset_unlocked_r+0x3a>
   d6546:	782b      	ldrb	r3, [r5, #0]
   d6548:	4a9f      	ldr	r2, [pc, #636]	; (d67c8 <_tzset_unlocked_r+0x2e8>)
   d654a:	49a0      	ldr	r1, [pc, #640]	; (d67cc <_tzset_unlocked_r+0x2ec>)
   d654c:	2b3a      	cmp	r3, #58	; 0x3a
   d654e:	bf08      	it	eq
   d6550:	3501      	addeq	r5, #1
   d6552:	ae0a      	add	r6, sp, #40	; 0x28
   d6554:	4633      	mov	r3, r6
   d6556:	4628      	mov	r0, r5
   d6558:	f7fe f884 	bl	d4664 <siscanf>
   d655c:	2800      	cmp	r0, #0
   d655e:	f340 8123 	ble.w	d67a8 <_tzset_unlocked_r+0x2c8>
   d6562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6564:	18ef      	adds	r7, r5, r3
   d6566:	5ceb      	ldrb	r3, [r5, r3]
   d6568:	2b2d      	cmp	r3, #45	; 0x2d
   d656a:	d103      	bne.n	d6574 <_tzset_unlocked_r+0x94>
   d656c:	3701      	adds	r7, #1
   d656e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d6572:	e003      	b.n	d657c <_tzset_unlocked_r+0x9c>
   d6574:	2b2b      	cmp	r3, #43	; 0x2b
   d6576:	bf08      	it	eq
   d6578:	3701      	addeq	r7, #1
   d657a:	2501      	movs	r5, #1
   d657c:	f10d 0a20 	add.w	sl, sp, #32
   d6580:	f10d 0b1e 	add.w	fp, sp, #30
   d6584:	f04f 0800 	mov.w	r8, #0
   d6588:	9603      	str	r6, [sp, #12]
   d658a:	f8cd a008 	str.w	sl, [sp, #8]
   d658e:	9601      	str	r6, [sp, #4]
   d6590:	f8cd b000 	str.w	fp, [sp]
   d6594:	4633      	mov	r3, r6
   d6596:	aa07      	add	r2, sp, #28
   d6598:	498d      	ldr	r1, [pc, #564]	; (d67d0 <_tzset_unlocked_r+0x2f0>)
   d659a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d659e:	4638      	mov	r0, r7
   d65a0:	f8ad 8020 	strh.w	r8, [sp, #32]
   d65a4:	f7fe f85e 	bl	d4664 <siscanf>
   d65a8:	4540      	cmp	r0, r8
   d65aa:	f340 80fd 	ble.w	d67a8 <_tzset_unlocked_r+0x2c8>
   d65ae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d65b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d65b6:	f8df 9224 	ldr.w	r9, [pc, #548]	; d67dc <_tzset_unlocked_r+0x2fc>
   d65ba:	213c      	movs	r1, #60	; 0x3c
   d65bc:	fb01 3302 	mla	r3, r1, r2, r3
   d65c0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d65c4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d65c8:	fb01 3302 	mla	r3, r1, r2, r3
   d65cc:	435d      	muls	r5, r3
   d65ce:	6225      	str	r5, [r4, #32]
   d65d0:	4d7c      	ldr	r5, [pc, #496]	; (d67c4 <_tzset_unlocked_r+0x2e4>)
   d65d2:	4b7d      	ldr	r3, [pc, #500]	; (d67c8 <_tzset_unlocked_r+0x2e8>)
   d65d4:	602b      	str	r3, [r5, #0]
   d65d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d65d8:	497c      	ldr	r1, [pc, #496]	; (d67cc <_tzset_unlocked_r+0x2ec>)
   d65da:	441f      	add	r7, r3
   d65dc:	464a      	mov	r2, r9
   d65de:	4633      	mov	r3, r6
   d65e0:	4638      	mov	r0, r7
   d65e2:	f7fe f83f 	bl	d4664 <siscanf>
   d65e6:	4540      	cmp	r0, r8
   d65e8:	dc08      	bgt.n	d65fc <_tzset_unlocked_r+0x11c>
   d65ea:	682b      	ldr	r3, [r5, #0]
   d65ec:	606b      	str	r3, [r5, #4]
   d65ee:	4b72      	ldr	r3, [pc, #456]	; (d67b8 <_tzset_unlocked_r+0x2d8>)
   d65f0:	6a22      	ldr	r2, [r4, #32]
   d65f2:	601a      	str	r2, [r3, #0]
   d65f4:	4b72      	ldr	r3, [pc, #456]	; (d67c0 <_tzset_unlocked_r+0x2e0>)
   d65f6:	f8c3 8000 	str.w	r8, [r3]
   d65fa:	e0d5      	b.n	d67a8 <_tzset_unlocked_r+0x2c8>
   d65fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d65fe:	f8c5 9004 	str.w	r9, [r5, #4]
   d6602:	18fd      	adds	r5, r7, r3
   d6604:	5cfb      	ldrb	r3, [r7, r3]
   d6606:	2b2d      	cmp	r3, #45	; 0x2d
   d6608:	d103      	bne.n	d6612 <_tzset_unlocked_r+0x132>
   d660a:	3501      	adds	r5, #1
   d660c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d6610:	e003      	b.n	d661a <_tzset_unlocked_r+0x13a>
   d6612:	2b2b      	cmp	r3, #43	; 0x2b
   d6614:	bf08      	it	eq
   d6616:	3501      	addeq	r5, #1
   d6618:	2701      	movs	r7, #1
   d661a:	2300      	movs	r3, #0
   d661c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6620:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6624:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6628:	930a      	str	r3, [sp, #40]	; 0x28
   d662a:	9603      	str	r6, [sp, #12]
   d662c:	f8cd a008 	str.w	sl, [sp, #8]
   d6630:	9601      	str	r6, [sp, #4]
   d6632:	f8cd b000 	str.w	fp, [sp]
   d6636:	4633      	mov	r3, r6
   d6638:	aa07      	add	r2, sp, #28
   d663a:	4965      	ldr	r1, [pc, #404]	; (d67d0 <_tzset_unlocked_r+0x2f0>)
   d663c:	4628      	mov	r0, r5
   d663e:	f7fe f811 	bl	d4664 <siscanf>
   d6642:	2800      	cmp	r0, #0
   d6644:	dc04      	bgt.n	d6650 <_tzset_unlocked_r+0x170>
   d6646:	6a23      	ldr	r3, [r4, #32]
   d6648:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d664c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d664e:	e00e      	b.n	d666e <_tzset_unlocked_r+0x18e>
   d6650:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6654:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6658:	213c      	movs	r1, #60	; 0x3c
   d665a:	fb01 3302 	mla	r3, r1, r2, r3
   d665e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6662:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6666:	fb01 3302 	mla	r3, r1, r2, r3
   d666a:	435f      	muls	r7, r3
   d666c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d666e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6670:	4627      	mov	r7, r4
   d6672:	441d      	add	r5, r3
   d6674:	f04f 0900 	mov.w	r9, #0
   d6678:	782b      	ldrb	r3, [r5, #0]
   d667a:	2b2c      	cmp	r3, #44	; 0x2c
   d667c:	bf08      	it	eq
   d667e:	3501      	addeq	r5, #1
   d6680:	f895 8000 	ldrb.w	r8, [r5]
   d6684:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d6688:	d126      	bne.n	d66d8 <_tzset_unlocked_r+0x1f8>
   d668a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d668e:	9302      	str	r3, [sp, #8]
   d6690:	ab09      	add	r3, sp, #36	; 0x24
   d6692:	9300      	str	r3, [sp, #0]
   d6694:	9603      	str	r6, [sp, #12]
   d6696:	9601      	str	r6, [sp, #4]
   d6698:	4633      	mov	r3, r6
   d669a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d669e:	494d      	ldr	r1, [pc, #308]	; (d67d4 <_tzset_unlocked_r+0x2f4>)
   d66a0:	4628      	mov	r0, r5
   d66a2:	f7fd ffdf 	bl	d4664 <siscanf>
   d66a6:	2803      	cmp	r0, #3
   d66a8:	d17e      	bne.n	d67a8 <_tzset_unlocked_r+0x2c8>
   d66aa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d66ae:	1e4b      	subs	r3, r1, #1
   d66b0:	2b0b      	cmp	r3, #11
   d66b2:	d879      	bhi.n	d67a8 <_tzset_unlocked_r+0x2c8>
   d66b4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d66b8:	1e53      	subs	r3, r2, #1
   d66ba:	2b04      	cmp	r3, #4
   d66bc:	d874      	bhi.n	d67a8 <_tzset_unlocked_r+0x2c8>
   d66be:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d66c2:	2b06      	cmp	r3, #6
   d66c4:	d870      	bhi.n	d67a8 <_tzset_unlocked_r+0x2c8>
   d66c6:	f887 8008 	strb.w	r8, [r7, #8]
   d66ca:	60f9      	str	r1, [r7, #12]
   d66cc:	613a      	str	r2, [r7, #16]
   d66ce:	617b      	str	r3, [r7, #20]
   d66d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d66d2:	eb05 0803 	add.w	r8, r5, r3
   d66d6:	e02a      	b.n	d672e <_tzset_unlocked_r+0x24e>
   d66d8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d66dc:	bf06      	itte	eq
   d66de:	3501      	addeq	r5, #1
   d66e0:	4643      	moveq	r3, r8
   d66e2:	2344      	movne	r3, #68	; 0x44
   d66e4:	220a      	movs	r2, #10
   d66e6:	a90b      	add	r1, sp, #44	; 0x2c
   d66e8:	4628      	mov	r0, r5
   d66ea:	9305      	str	r3, [sp, #20]
   d66ec:	f7ff fe3e 	bl	d636c <strtoul>
   d66f0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d66f4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d66f8:	4545      	cmp	r5, r8
   d66fa:	9b05      	ldr	r3, [sp, #20]
   d66fc:	d114      	bne.n	d6728 <_tzset_unlocked_r+0x248>
   d66fe:	234d      	movs	r3, #77	; 0x4d
   d6700:	f1b9 0f00 	cmp.w	r9, #0
   d6704:	d107      	bne.n	d6716 <_tzset_unlocked_r+0x236>
   d6706:	7223      	strb	r3, [r4, #8]
   d6708:	2303      	movs	r3, #3
   d670a:	60e3      	str	r3, [r4, #12]
   d670c:	2302      	movs	r3, #2
   d670e:	6123      	str	r3, [r4, #16]
   d6710:	f8c4 9014 	str.w	r9, [r4, #20]
   d6714:	e00b      	b.n	d672e <_tzset_unlocked_r+0x24e>
   d6716:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d671a:	230b      	movs	r3, #11
   d671c:	62a3      	str	r3, [r4, #40]	; 0x28
   d671e:	2301      	movs	r3, #1
   d6720:	62e3      	str	r3, [r4, #44]	; 0x2c
   d6722:	2300      	movs	r3, #0
   d6724:	6323      	str	r3, [r4, #48]	; 0x30
   d6726:	e002      	b.n	d672e <_tzset_unlocked_r+0x24e>
   d6728:	b280      	uxth	r0, r0
   d672a:	723b      	strb	r3, [r7, #8]
   d672c:	6178      	str	r0, [r7, #20]
   d672e:	2302      	movs	r3, #2
   d6730:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6734:	2300      	movs	r3, #0
   d6736:	f8ad 301e 	strh.w	r3, [sp, #30]
   d673a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d673e:	930a      	str	r3, [sp, #40]	; 0x28
   d6740:	f898 3000 	ldrb.w	r3, [r8]
   d6744:	2b2f      	cmp	r3, #47	; 0x2f
   d6746:	d10b      	bne.n	d6760 <_tzset_unlocked_r+0x280>
   d6748:	9603      	str	r6, [sp, #12]
   d674a:	f8cd a008 	str.w	sl, [sp, #8]
   d674e:	9601      	str	r6, [sp, #4]
   d6750:	f8cd b000 	str.w	fp, [sp]
   d6754:	4633      	mov	r3, r6
   d6756:	aa07      	add	r2, sp, #28
   d6758:	491f      	ldr	r1, [pc, #124]	; (d67d8 <_tzset_unlocked_r+0x2f8>)
   d675a:	4640      	mov	r0, r8
   d675c:	f7fd ff82 	bl	d4664 <siscanf>
   d6760:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6764:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6768:	213c      	movs	r1, #60	; 0x3c
   d676a:	fb01 3302 	mla	r3, r1, r2, r3
   d676e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6772:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6776:	fb01 3302 	mla	r3, r1, r2, r3
   d677a:	61bb      	str	r3, [r7, #24]
   d677c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d677e:	f109 0901 	add.w	r9, r9, #1
   d6782:	f1b9 0f02 	cmp.w	r9, #2
   d6786:	4445      	add	r5, r8
   d6788:	f107 071c 	add.w	r7, r7, #28
   d678c:	f47f af74 	bne.w	d6678 <_tzset_unlocked_r+0x198>
   d6790:	6860      	ldr	r0, [r4, #4]
   d6792:	f7ff fdf5 	bl	d6380 <__tzcalc_limits>
   d6796:	4b08      	ldr	r3, [pc, #32]	; (d67b8 <_tzset_unlocked_r+0x2d8>)
   d6798:	6a22      	ldr	r2, [r4, #32]
   d679a:	601a      	str	r2, [r3, #0]
   d679c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d679e:	1a9b      	subs	r3, r3, r2
   d67a0:	4a07      	ldr	r2, [pc, #28]	; (d67c0 <_tzset_unlocked_r+0x2e0>)
   d67a2:	bf18      	it	ne
   d67a4:	2301      	movne	r3, #1
   d67a6:	6013      	str	r3, [r2, #0]
   d67a8:	b00d      	add	sp, #52	; 0x34
   d67aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67ae:	bf00      	nop
   d67b0:	000d6ec0 	.word	0x000d6ec0
   d67b4:	2003e7e0 	.word	0x2003e7e0
   d67b8:	2003e7e8 	.word	0x2003e7e8
   d67bc:	000d6ec3 	.word	0x000d6ec3
   d67c0:	2003e7e4 	.word	0x2003e7e4
   d67c4:	2003e468 	.word	0x2003e468
   d67c8:	2003e7d3 	.word	0x2003e7d3
   d67cc:	000d6ec7 	.word	0x000d6ec7
   d67d0:	000d6eea 	.word	0x000d6eea
   d67d4:	000d6ed6 	.word	0x000d6ed6
   d67d8:	000d6ee9 	.word	0x000d6ee9
   d67dc:	2003e7c8 	.word	0x2003e7c8

000d67e0 <_findenv_r>:
   d67e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67e4:	4607      	mov	r7, r0
   d67e6:	468b      	mov	fp, r1
   d67e8:	4690      	mov	r8, r2
   d67ea:	f000 f8d9 	bl	d69a0 <__env_lock>
   d67ee:	4b19      	ldr	r3, [pc, #100]	; (d6854 <_findenv_r+0x74>)
   d67f0:	681d      	ldr	r5, [r3, #0]
   d67f2:	469a      	mov	sl, r3
   d67f4:	b13d      	cbz	r5, d6806 <_findenv_r+0x26>
   d67f6:	465c      	mov	r4, fp
   d67f8:	4623      	mov	r3, r4
   d67fa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d67fe:	b142      	cbz	r2, d6812 <_findenv_r+0x32>
   d6800:	2a3d      	cmp	r2, #61	; 0x3d
   d6802:	461c      	mov	r4, r3
   d6804:	d1f8      	bne.n	d67f8 <_findenv_r+0x18>
   d6806:	4638      	mov	r0, r7
   d6808:	f000 f8cb 	bl	d69a2 <__env_unlock>
   d680c:	2000      	movs	r0, #0
   d680e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6812:	ebcb 0404 	rsb	r4, fp, r4
   d6816:	46a9      	mov	r9, r5
   d6818:	f859 0b04 	ldr.w	r0, [r9], #4
   d681c:	2800      	cmp	r0, #0
   d681e:	d0f2      	beq.n	d6806 <_findenv_r+0x26>
   d6820:	4622      	mov	r2, r4
   d6822:	4659      	mov	r1, fp
   d6824:	f7ff fd02 	bl	d622c <strncmp>
   d6828:	b988      	cbnz	r0, d684e <_findenv_r+0x6e>
   d682a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d682e:	191e      	adds	r6, r3, r4
   d6830:	5d1b      	ldrb	r3, [r3, r4]
   d6832:	2b3d      	cmp	r3, #61	; 0x3d
   d6834:	d10b      	bne.n	d684e <_findenv_r+0x6e>
   d6836:	f8da 3000 	ldr.w	r3, [sl]
   d683a:	1aed      	subs	r5, r5, r3
   d683c:	10ad      	asrs	r5, r5, #2
   d683e:	4638      	mov	r0, r7
   d6840:	f8c8 5000 	str.w	r5, [r8]
   d6844:	f000 f8ad 	bl	d69a2 <__env_unlock>
   d6848:	1c70      	adds	r0, r6, #1
   d684a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d684e:	464d      	mov	r5, r9
   d6850:	e7e1      	b.n	d6816 <_findenv_r+0x36>
   d6852:	bf00      	nop
   d6854:	2003e4b0 	.word	0x2003e4b0

000d6858 <_getenv_r>:
   d6858:	b507      	push	{r0, r1, r2, lr}
   d685a:	aa01      	add	r2, sp, #4
   d685c:	f7ff ffc0 	bl	d67e0 <_findenv_r>
   d6860:	b003      	add	sp, #12
   d6862:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6868 <__gettzinfo>:
   d6868:	4800      	ldr	r0, [pc, #0]	; (d686c <__gettzinfo+0x4>)
   d686a:	4770      	bx	lr
   d686c:	2003e470 	.word	0x2003e470

000d6870 <gmtime_r>:
   d6870:	6802      	ldr	r2, [r0, #0]
   d6872:	4b47      	ldr	r3, [pc, #284]	; (d6990 <gmtime_r+0x120>)
   d6874:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6876:	fb92 f4f3 	sdiv	r4, r2, r3
   d687a:	fb03 2214 	mls	r2, r3, r4, r2
   d687e:	2a00      	cmp	r2, #0
   d6880:	bfbc      	itt	lt
   d6882:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d6886:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d688a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d688e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d6892:	fb92 f3f0 	sdiv	r3, r2, r0
   d6896:	fb00 2213 	mls	r2, r0, r3, r2
   d689a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d689e:	bfac      	ite	ge
   d68a0:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d68a4:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d68a8:	608b      	str	r3, [r1, #8]
   d68aa:	fb92 f3f0 	sdiv	r3, r2, r0
   d68ae:	fb00 2213 	mls	r2, r0, r3, r2
   d68b2:	604b      	str	r3, [r1, #4]
   d68b4:	600a      	str	r2, [r1, #0]
   d68b6:	2307      	movs	r3, #7
   d68b8:	1ce2      	adds	r2, r4, #3
   d68ba:	fb92 f3f3 	sdiv	r3, r2, r3
   d68be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d68c2:	1ad3      	subs	r3, r2, r3
   d68c4:	618b      	str	r3, [r1, #24]
   d68c6:	4b33      	ldr	r3, [pc, #204]	; (d6994 <gmtime_r+0x124>)
   d68c8:	4d33      	ldr	r5, [pc, #204]	; (d6998 <gmtime_r+0x128>)
   d68ca:	fb94 f5f5 	sdiv	r5, r4, r5
   d68ce:	fb03 4405 	mla	r4, r3, r5, r4
   d68d2:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d68d6:	fbb4 f2f2 	udiv	r2, r4, r2
   d68da:	4422      	add	r2, r4
   d68dc:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d68e0:	fbb4 f3f7 	udiv	r3, r4, r7
   d68e4:	1ad2      	subs	r2, r2, r3
   d68e6:	482d      	ldr	r0, [pc, #180]	; (d699c <gmtime_r+0x12c>)
   d68e8:	fbb4 f0f0 	udiv	r0, r4, r0
   d68ec:	f648 6694 	movw	r6, #36500	; 0x8e94
   d68f0:	1a13      	subs	r3, r2, r0
   d68f2:	fbb3 f6f6 	udiv	r6, r3, r6
   d68f6:	4434      	add	r4, r6
   d68f8:	f240 126d 	movw	r2, #365	; 0x16d
   d68fc:	fbb3 f0f2 	udiv	r0, r3, r2
   d6900:	fbb3 f3f7 	udiv	r3, r3, r7
   d6904:	1ae3      	subs	r3, r4, r3
   d6906:	fb02 3310 	mls	r3, r2, r0, r3
   d690a:	2499      	movs	r4, #153	; 0x99
   d690c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d6910:	3202      	adds	r2, #2
   d6912:	fbb2 f2f4 	udiv	r2, r2, r4
   d6916:	2a0a      	cmp	r2, #10
   d6918:	fb04 f402 	mul.w	r4, r4, r2
   d691c:	f104 0602 	add.w	r6, r4, #2
   d6920:	f04f 0405 	mov.w	r4, #5
   d6924:	fbb6 f4f4 	udiv	r4, r6, r4
   d6928:	bf34      	ite	cc
   d692a:	2602      	movcc	r6, #2
   d692c:	f06f 0609 	mvncs.w	r6, #9
   d6930:	4416      	add	r6, r2
   d6932:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6936:	fb02 0505 	mla	r5, r2, r5, r0
   d693a:	1c5f      	adds	r7, r3, #1
   d693c:	2e01      	cmp	r6, #1
   d693e:	bf98      	it	ls
   d6940:	3501      	addls	r5, #1
   d6942:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d6946:	eba7 0704 	sub.w	r7, r7, r4
   d694a:	d302      	bcc.n	d6952 <gmtime_r+0xe2>
   d694c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d6950:	e014      	b.n	d697c <gmtime_r+0x10c>
   d6952:	0782      	lsls	r2, r0, #30
   d6954:	d105      	bne.n	d6962 <gmtime_r+0xf2>
   d6956:	2464      	movs	r4, #100	; 0x64
   d6958:	fbb0 f2f4 	udiv	r2, r0, r4
   d695c:	fb04 0212 	mls	r2, r4, r2, r0
   d6960:	b94a      	cbnz	r2, d6976 <gmtime_r+0x106>
   d6962:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6966:	fbb0 f4f2 	udiv	r4, r0, r2
   d696a:	fb02 0014 	mls	r0, r2, r4, r0
   d696e:	fab0 f280 	clz	r2, r0
   d6972:	0952      	lsrs	r2, r2, #5
   d6974:	e000      	b.n	d6978 <gmtime_r+0x108>
   d6976:	2201      	movs	r2, #1
   d6978:	333b      	adds	r3, #59	; 0x3b
   d697a:	441a      	add	r2, r3
   d697c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d6980:	2300      	movs	r3, #0
   d6982:	61ca      	str	r2, [r1, #28]
   d6984:	614d      	str	r5, [r1, #20]
   d6986:	610e      	str	r6, [r1, #16]
   d6988:	60cf      	str	r7, [r1, #12]
   d698a:	620b      	str	r3, [r1, #32]
   d698c:	4608      	mov	r0, r1
   d698e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6990:	00015180 	.word	0x00015180
   d6994:	fffdc54f 	.word	0xfffdc54f
   d6998:	00023ab1 	.word	0x00023ab1
   d699c:	00023ab0 	.word	0x00023ab0

000d69a0 <__env_lock>:
   d69a0:	4770      	bx	lr

000d69a2 <__env_unlock>:
   d69a2:	4770      	bx	lr

000d69a4 <dynalib_user>:
   d69a4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d69b4:	0000 0000 203a 6552 6563 7669 6e69 2067     ....: Receiving 
   d69c4:	7645 6e65 0074 7267 756f 2d70 7665 6e65     Event.group-even
   d69d4:	0074 0000                                   t...

000d69d8 <_ZTVN5spark13EthernetClassE>:
	...
   d69e0:	4705 000d 46fb 000d 46f1 000d 46e7 000d     .G...F...F...F..
   d69f0:	46db 000d 46cf 000d 46c3 000d 46bb 000d     .F...F...F...F..
   d6a00:	46b1 000d 46a7 000d 4e79 000d               .F...F..yN..

000d6a0c <_ZTV9IPAddress>:
	...
   d6a14:	4733 000d 4725 000d 4727 000d 0066 6e6c     3G..%G..'G..f.ln
   d6a24:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d6a34:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d6a44:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d6a54:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d6a64:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d6a74:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d6a84:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d6a94:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d6aa4:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d6ab4:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d6ac4:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d6ad4:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d6ae4:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d6af4:	6170 696e 0063 6c61 006c 0000               panic.all...

000d6b00 <_ZTVN5spark9MeshClassE>:
	...
   d6b08:	48d9 000d 48cf 000d 48c5 000d 48bb 000d     .H...H...H...H..
   d6b18:	48af 000d 48a3 000d 4897 000d 488f 000d     .H...H...H...H..
   d6b28:	4885 000d 487b 000d 4e79 000d 6666 3330     .H..{H..yN..ff03
   d6b38:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d6b48:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d6b58:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d6b64 <_ZTVN5spark12NetworkClassE>:
	...
   d6b6c:	4e11 000d 4e1b 000d 4e25 000d 4e2f 000d     .N...N..%N../N..
   d6b7c:	4e39 000d 4e45 000d 4e51 000d 4e5d 000d     9N..EN..QN..]N..
   d6b8c:	4e65 000d 4e6f 000d 4e79 000d               eN..oN..yN..

000d6b98 <_ZTV8SPIClass>:
	...
   d6ba0:	50ad 000d 50af 000d 2b25 3330 3a64 3025     .P...P..%+03d:%0
   d6bb0:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d6bc0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d6bd0 <_ZTV3UDP>:
	...
   d6bd8:	58b5 000d 58d9 000d 5295 000d 53bf 000d     .X...X...R...S..
   d6be8:	528d 000d 52ab 000d 52c9 000d 52e3 000d     .R...R...R...R..
   d6bf8:	5307 000d 53a3 000d 56a5 000d 5445 000d     .S...S...V..ET..
   d6c08:	55c5 000d 5275 000d 584b 000d 5549 000d     .U..uR..KX..IU..
   d6c18:	547d 000d 5879 000d 53e9 000d 5283 000d     }T..yX...S...R..
   d6c28:	5425 000d 5289 000d 52e5 000d fff0 ffff     %T...R...R......
   d6c38:	0000 0000 52ff 000d                         .....R..

000d6c40 <_ZTV11USARTSerial>:
	...
   d6c48:	5903 000d 5927 000d 5933 000d 4f59 000d     .Y..'Y..3Y..YO..
   d6c58:	590f 000d 591b 000d 5915 000d 5921 000d     .Y...Y...Y..!Y..
   d6c68:	5905 000d 5909 000d                         .Y...Y..

000d6c70 <_ZTV9USBSerial>:
	...
   d6c78:	5a09 000d 5a4d 000d 5a27 000d 4f59 000d     .Z..MZ..'Z..YO..
   d6c88:	5a21 000d 5a0b 000d 5a13 000d 5a47 000d     !Z...Z...Z..GZ..
   d6c98:	5a1b 000d 5a05 000d                         .Z...Z..

000d6ca0 <_ZSt7nothrow>:
	...

000d6ca1 <day_name.4725>:
   d6ca1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d6cb1:	6972 6153 4a74                                   riSat

000d6cb6 <mon_name.4726>:
   d6cb6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d6cc6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d6cd6:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d6ce6:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d6cf6:	6425 000a                                   %d..

000d6cfa <_ctype_>:
   d6cfa:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d6d0a:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d6d1a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d6d2a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d6d3a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d6d4a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d6d5a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d6d6a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d6d7a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d6dfc <__sf_fake_stdin>:
	...

000d6e1c <__sf_fake_stdout>:
	...

000d6e3c <__sf_fake_stderr>:
	...
   d6e5c:	0043 0000                                   C...

000d6e60 <__month_lengths>:
   d6e60:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d6e70:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d6e80:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d6e90:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d6ea0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d6eb0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d6ec0:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d6ed0:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d6ee0:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d6ef0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d6efc <link_const_variable_data_end>:
   d6efc:	000d4163 	.word	0x000d4163
   d6f00:	000d4711 	.word	0x000d4711
   d6f04:	000d483d 	.word	0x000d483d
   d6f08:	000d4dc5 	.word	0x000d4dc5
   d6f0c:	000d4f45 	.word	0x000d4f45
   d6f10:	000d5091 	.word	0x000d5091
   d6f14:	000d5199 	.word	0x000d5199
   d6f18:	000d5261 	.word	0x000d5261
   d6f1c:	000d5bc9 	.word	0x000d5bc9
   d6f20:	000d5c51 	.word	0x000d5c51
   d6f24:	000d5d15 	.word	0x000d5d15
   d6f28:	000d5d99 	.word	0x000d5d99
   d6f2c:	000d5e1d 	.word	0x000d5e1d
